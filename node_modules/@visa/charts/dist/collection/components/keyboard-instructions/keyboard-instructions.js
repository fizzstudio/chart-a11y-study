/**
 * Copyright (c) 2021, 2022 Visa, Inc.
 *
 * This source code is licensed under the MIT license
 * https://github.com/visa/visa-chart-components/blob/master/LICENSE
 *
 **/
import { Component, Prop, Element, State, h, Watch } from '@stencil/core';
import { KeyboardInstructionsDefaultValues } from './keyboard-instructions-default-values';
import Utils from '@visa/visa-charts-utils';
const { getLicenses } = Utils;
export class KeyboardInstructions {
  constructor() {
    this.geomType = KeyboardInstructionsDefaultValues.geomType;
    this.groupName = KeyboardInstructionsDefaultValues.groupName;
    this.chartTag = KeyboardInstructionsDefaultValues.chartTag;
    this.width = KeyboardInstructionsDefaultValues.width;
    this.isInteractive = KeyboardInstructionsDefaultValues.isInteractive;
    this.hasCousinNavigation = KeyboardInstructionsDefaultValues.hasCousinNavigation;
    this.cousinActionOverride = KeyboardInstructionsDefaultValues.cousinActionOverride;
    this.cousinResultOverride = KeyboardInstructionsDefaultValues.cousinResultOverride;
    this.disabled = KeyboardInstructionsDefaultValues.disabled;
    // debugging props
    this.unitTest = KeyboardInstructionsDefaultValues.unitTest;
    // state for showing the tablex
    this.showInstructions = false;
    this.showHeading = false;
    this.innerWidth = 300;
    this.cousinAction = () => {
      return this.hasCousinNavigation
        ? !this.cousinActionOverride
          ? 'on a ' + this.groupName + ' or ' + this.geomType
          : this.cousinActionOverride
        : 'are unused';
    };
    this.cousinResult = () => {
      return this.hasCousinNavigation
        ? !this.cousinResultOverride
          ? 'Move among ' + this.geomType + 's across ' + this.groupName + 's'
          : this.cousinResultOverride
        : 'No effect on this chart';
    };
    this.instructionsMenu = () => {
      if (this.showInstructions) {
        return (h("div", null,
          h("p", null,
            "Note: for VoiceOver users (mac), press and hold ",
            h("kbd", null, "Ctrl"),
            " + ",
            h("kbd", null, "Shift"),
            " when using the arrow keys for the best navigation experience."),
          h("table", { class: "vcc-ki-keyboard-instructions vcc-ki-data-table vcc-ki-state--single-select vcc-ki-state--compact", "data-header": "header" },
            h("thead", { class: "vcc-ki-thead" },
              h("tr", { class: "vcc-ki-tr" },
                h("th", { class: "vcc-ki-th", scope: "col" }, "Action"),
                h("th", { class: "vcc-ki-th", scope: "col" }, "Result"))),
            h("tbody", { class: "vcc-ki-tbody" },
              h("tr", { class: "vcc-ki-tr" },
                h("th", { scope: "row", class: "vcc-ki-td" },
                  h("kbd", null, "Enter"),
                  " on the chart area or a ",
                  this.groupName,
                  "."),
                h("td", { class: "vcc-ki-td" }, "Enter the chart area/drill down a level.")),
              h("tr", { class: "vcc-ki-tr" },
                h("th", { scope: "row", class: "vcc-ki-td" },
                  h("kbd", null, "Esc"),
                  " on a ",
                  this.groupName,
                  " or ",
                  this.geomType,
                  "."),
                h("td", { class: "vcc-ki-td" }, "Drill up a level.")),
              h("tr", { class: "vcc-ki-tr" },
                h("th", { scope: "row", class: "vcc-ki-td" },
                  h("kbd", null, "Tab"),
                  " at any time."),
                h("td", { class: "vcc-ki-td" }, "Exit the chart.")),
              h("tr", { class: this.isInteractive ? 'vcc-ki-tr' : 'vcc-ki-tr vcc-ki-disabled-row' },
                h("th", { scope: "row", class: "vcc-ki-td" },
                  h("kbd", null, "Space"),
                  " ",
                  this.isInteractive ? 'on a ' + this.geomType : 'is unused',
                  "."),
                h("td", { class: "vcc-ki-td" },
                  this.isInteractive ? 'Select/Deselect a ' + this.geomType : 'No effect on this chart',
                  ".")),
              h("tr", { class: "vcc-ki-tr" },
                h("th", { scope: "row", class: "vcc-ki-td" },
                  h("kbd", null, "\u2190"),
                  " / ",
                  h("kbd", null, "\u2192"),
                  " on a ",
                  this.groupName,
                  " or ",
                  this.geomType,
                  "."),
                h("td", { class: "vcc-ki-td" },
                  "Move among sibling ",
                  this.groupName,
                  "s or ",
                  this.geomType,
                  "s.")),
              h("tr", { class: this.hasCousinNavigation ? 'vcc-ki-tr' : 'vcc-ki-tr vcc-ki-disabled-row' },
                h("th", { scope: "row", class: "vcc-ki-td" },
                  h("kbd", null, "\u2191"),
                  " / ",
                  h("kbd", null, "\u2193"),
                  " ",
                  this.cousinAction(),
                  "."),
                h("td", { class: "vcc-ki-td" },
                  this.cousinResult(),
                  "."))))));
      }
    };
  }
  widthWatcher(_new, _old) {
    this.innerWidth = Math.min(Math.max(parseFloat(_new + ''), 250), 450);
  }
  componentWillLoad() {
    this.innerWidth = Math.min(Math.max(parseFloat(this.width + ''), 250), 450);
  }
  componentWillUpdate() {
    this.init();
  }
  componentDidLoad() { }
  componentDidUpdate() { }
  render() {
    if (this.disabled) {
      return;
    }
    const svgProps = { tabindex: -1 };
    const useProps = {
      href: `#visa-viz-keyboard-instructions-info--tiny-${this.uniqueID}`,
      xlinkHref: `#visa-viz-keyboard-instructions-info--tiny-${this.uniqueID}`
    };
    const symbolProps = { viewbox: '0 0 16 16' };
    return (h("div", { class: "vcc-ki-keyboard-instructions-root", style: { position: 'relative', width: `${this.width}px` } },
      h("div", { class: this.showHeading || this.showInstructions
          ? 'visa-viz-keyboard-instructions-outer-container vcc-ki-bordered'
          : 'visa-viz-keyboard-instructions-outer-container', "data-testid": this.unitTest ? 'keyboard-instructions-outer-container' : null, style: { width: `${this.innerWidth - 34}px` } },
        h("div", { class: this.showHeading || this.showInstructions
            ? 'vcc-ki-keyboard-instructions-header'
            : 'vcc-ki-keyboard-instructions-header vcc-ki-minimize' },
          h("p", { class: "vcc-ki-keyboard-heading" }, this.showInstructions ? 'Keyboard Instructions' : 'Display Keyboard Instructions')),
        h("div", { class: "visa-viz-keyboard-instructions-button-wrapper" },
          h("button", { id: `visa-viz-keyboard-instructions-button-${this.uniqueID}`, type: "button", class: "vcc-ki-btn-icon vcc-ki-btn-icon--light-tiny visa-viz-keyboard-instructions-button", "aria-label": this.showInstructions ? 'close keyboard instructions' : 'display keyboard instructions', "aria-expanded": this.showInstructions ? 'true' : 'false', role: "button", tabIndex: 0, onClick: () => {
              this.showInstructions = !this.showInstructions;
              this.showHeading = false;
            }, onFocus: () => (this.showHeading = true), onBlur: () => (this.showHeading = this.showInstructions) },
            h("svg", Object.assign({ class: "vcc-ki-icon--tiny", focusable: "false" }, svgProps),
              h("use", Object.assign({}, useProps)))),
          h("svg", { class: "vcc-ki-icons" },
            h("symbol", Object.assign({ id: `visa-viz-keyboard-instructions-info--tiny-${this.uniqueID}` }, symbolProps), this.showInstructions ? (h("path", { d: "M9.41,8l5.3,5.29a1,1,0,0,1-1.42,1.42L8,9.41l-5.29,5.3a1,1,0,0,1-1.42-1.42L6.59,8,1.29,2.71A1,1,0,0,1,2.71,1.29L8,6.59l5.29-5.3a1,1,0,1,1,1.42,1.42Z" })) : (h("path", { d: "M8.7,3.8a.68.68,0,0,1,.7.7.79.79,0,0,1-.8.8H8.5c-.4,0-.6-.3-.6-.7A.79.79,0,0,1,8.7,3.8ZM6.6,12.1l1.2-6H9l-1.2,6ZM14,8a6,6,0,1,0-6,6A6,6,0,0,0,14,8Zm2,0A8,8,0,1,1,8,0,8,8,0,0,1,16,8Z" }))))),
        h("div", { id: `visa-viz-keyboard-instructions-container-${this.uniqueID}`, class: "visa-viz-keyboard-instructions-container", "data-testid": this.unitTest ? 'keyboard-instructions-container' : null }, this.instructionsMenu()))));
  }
  init() {
    // reading properties
    const keys = Object.keys(KeyboardInstructionsDefaultValues);
    let i = 0;
    const exceptions = {};
    for (i = 0; i < keys.length; i++) {
      const exception = !exceptions[keys[i]] ? false : this[keys[i]] === exceptions[keys[i]].exception;
      this[keys[i]] = this[keys[i]] || exception ? this[keys[i]] : KeyboardInstructionsDefaultValues[keys[i]];
    }
  }
  static get is() { return "keyboard-instructions"; }
  static get originalStyleUrls() { return {
    "$": ["keyboard-instructions.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["keyboard-instructions.css"]
  }; }
  static get properties() { return {
    "uniqueID": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "unique-i-d",
      "reflect": false
    },
    "geomType": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "geom-type",
      "reflect": false,
      "defaultValue": "KeyboardInstructionsDefaultValues.geomType"
    },
    "groupName": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "group-name",
      "reflect": false,
      "defaultValue": "KeyboardInstructionsDefaultValues.groupName"
    },
    "chartTag": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "chart-tag",
      "reflect": false,
      "defaultValue": "KeyboardInstructionsDefaultValues.chartTag"
    },
    "width": {
      "type": "any",
      "mutable": true,
      "complexType": {
        "original": "number | string",
        "resolved": "number | string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "width",
      "reflect": false,
      "defaultValue": "KeyboardInstructionsDefaultValues.width"
    },
    "isInteractive": {
      "type": "boolean",
      "mutable": true,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "is-interactive",
      "reflect": false,
      "defaultValue": "KeyboardInstructionsDefaultValues.isInteractive"
    },
    "hasCousinNavigation": {
      "type": "boolean",
      "mutable": true,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "has-cousin-navigation",
      "reflect": false,
      "defaultValue": "KeyboardInstructionsDefaultValues.hasCousinNavigation"
    },
    "cousinActionOverride": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "cousin-action-override",
      "reflect": false,
      "defaultValue": "KeyboardInstructionsDefaultValues.cousinActionOverride"
    },
    "cousinResultOverride": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "cousin-result-override",
      "reflect": false,
      "defaultValue": "KeyboardInstructionsDefaultValues.cousinResultOverride"
    },
    "disabled": {
      "type": "boolean",
      "mutable": true,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "disabled",
      "reflect": false,
      "defaultValue": "KeyboardInstructionsDefaultValues.disabled"
    },
    "unitTest": {
      "type": "boolean",
      "mutable": true,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "unit-test",
      "reflect": false,
      "defaultValue": "KeyboardInstructionsDefaultValues.unitTest"
    }
  }; }
  static get states() { return {
    "showInstructions": {},
    "showHeading": {}
  }; }
  static get elementRef() { return "keyboardInstructionsEl"; }
  static get watchers() { return [{
      "propName": "width",
      "methodName": "widthWatcher"
    }]; }
}
// incorporate OSS licenses into build
window['VisaChartsLibOSSLicenses'] = getLicenses(); // tslint:disable-line no-string-literal
