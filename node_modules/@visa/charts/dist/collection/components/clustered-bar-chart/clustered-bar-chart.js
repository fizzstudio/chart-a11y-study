/**
 * Copyright (c) 2020, 2021, 2022 Visa, Inc.
 *
 * This source code is licensed under the MIT license
 * https://github.com/visa/visa-chart-components/blob/master/LICENSE
 *
 **/
import { Component, Element, Prop, Watch, h, Event } from '@stencil/core';
import { select, event } from 'd3-selection';
import { max, min } from 'd3-array';
import { scaleBand, scaleLinear } from 'd3-scale';
import { nest } from 'd3-collection';
import { easeCircleIn } from 'd3-ease';
import { ClusteredBarChartDefaultValues } from './clustered-bar-chart-default-values';
import 'd3-transition';
import Utils from '@visa/visa-charts-utils';
import { v4 as uuid } from 'uuid';
const { verifyTextHasSpace, checkAttributeTransitions, createTextStrokeFilter, drawHoverStrokes, removeHoverStrokes, buildStrokes, convertColorsToTextures, initializeDescriptionRoot, initializeElementAccess, setElementFocusHandler, setElementAccessID, setAccessibilityController, hideNonessentialGroups, setAccessTitle, setAccessSubtitle, setAccessLongDescription, setAccessExecutiveSummary, setAccessPurpose, setAccessContext, setAccessStatistics, setAccessChartCounts, setAccessXAxis, setAccessYAxis, setAccessStructure, setAccessAnnotation, retainAccessFocus, checkAccessFocus, setElementInteractionAccessState, setAccessibilityDescriptionWidth, autoTextColor, annotate, chartAccessors, convertVisaColor, checkInteraction, checkClicked, checkHovered, drawAxis, drawGrid, drawLegend, setLegendInteractionState, drawTooltip, formatDataLabel, formatDate, getColors, getLicenses, getPadding, getScopedData, initTooltipStyle, overrideTitleTooltip, placeDataLabels, scopeDataKeys, transitionEndAll, visaColors, validateAccessibilityProps, findTagLevel, prepareRenderChange, roundTo, resolveLabelCollision } = Utils;
export class ClusteredBarChart {
  constructor() {
    // Chart Attributes (1/7)
    this.mainTitle = ClusteredBarChartDefaultValues.mainTitle;
    this.subTitle = ClusteredBarChartDefaultValues.subTitle;
    this.height = ClusteredBarChartDefaultValues.height;
    this.width = ClusteredBarChartDefaultValues.width;
    this.layout = ClusteredBarChartDefaultValues.layout;
    this.margin = ClusteredBarChartDefaultValues.margin;
    this.padding = ClusteredBarChartDefaultValues.padding;
    this.highestHeadingLevel = ClusteredBarChartDefaultValues.highestHeadingLevel;
    this.ordinalAccessor = ClusteredBarChartDefaultValues.ordinalAccessor;
    this.valueAccessor = ClusteredBarChartDefaultValues.valueAccessor;
    this.groupAccessor = ClusteredBarChartDefaultValues.groupAccessor;
    this.reverseOrder = ClusteredBarChartDefaultValues.reverseOrder;
    // Axis (3/7)
    this.xAxis = ClusteredBarChartDefaultValues.xAxis;
    this.yAxis = ClusteredBarChartDefaultValues.yAxis;
    this.wrapLabel = ClusteredBarChartDefaultValues.wrapLabel;
    // Color & Shape (4/7)
    this.colorPalette = ClusteredBarChartDefaultValues.colorPalette;
    this.hoverStyle = ClusteredBarChartDefaultValues.hoverStyle;
    this.clickStyle = ClusteredBarChartDefaultValues.clickStyle;
    this.referenceStyle = ClusteredBarChartDefaultValues.referenceStyle;
    this.cursor = ClusteredBarChartDefaultValues.cursor;
    this.roundedCorner = ClusteredBarChartDefaultValues.roundedCorner;
    this.barIntervalRatio = ClusteredBarChartDefaultValues.barIntervalRatio;
    this.groupIntervalRatio = ClusteredBarChartDefaultValues.groupIntervalRatio;
    this.hoverOpacity = ClusteredBarChartDefaultValues.hoverOpacity;
    this.animationConfig = ClusteredBarChartDefaultValues.animationConfig;
    // Data label (5/7)
    this.dataLabel = ClusteredBarChartDefaultValues.dataLabel;
    this.showTooltip = ClusteredBarChartDefaultValues.showTooltip;
    this.tooltipLabel = ClusteredBarChartDefaultValues.tooltipLabel;
    this.accessibility = ClusteredBarChartDefaultValues.accessibility;
    this.legend = ClusteredBarChartDefaultValues.legend;
    this.annotations = ClusteredBarChartDefaultValues.annotations;
    this.referenceLines = ClusteredBarChartDefaultValues.referenceLines;
    // Interactivity (7/7)
    this.suppressEvents = ClusteredBarChartDefaultValues.suppressEvents;
    this.clickHighlight = ClusteredBarChartDefaultValues.clickHighlight;
    // Testing & Debug (8/8)
    this.unitTest = false;
    this.shouldValidateAccessibility = true;
    this.nest = [];
    this.datakeys = [];
    this.legendData = [];
    this.updated = true;
    this.shouldValidate = false;
    this.shouldUpdateData = false;
    this.shouldSetDimensions = false;
    this.shouldUpdateScales = false;
    this.shouldValidateAxes = false;
    this.shouldUpdateAnnotations = false;
    this.shouldResetRoot = false;
    this.shouldUpdateTableData = false;
    this.shouldSetColors = false;
    this.shouldValidateLabelPlacement = false;
    this.shouldValidateDataLabelAccessor = false;
    this.shouldValidateInteractionKeys = false;
    this.shouldSetSelectionClass = false;
    this.shouldUpdateXAxis = false;
    this.shouldUpdateYAxis = false;
    this.shouldUpdateXGrid = false;
    this.shouldUpdateYGrid = false;
    this.shouldUpdateBaseline = false;
    this.shouldCheckValueAxis = false;
    this.shouldCheckLabelAxis = false;
    this.shouldSetGlobalSelections = false;
    this.shouldEnterUpdateExit = false;
    this.shouldUpdateGeometries = false;
    this.shouldUpdateCorners = false;
    this.shouldUpdateLegendData = false;
    this.shouldUpdateLegend = false;
    this.shouldUpdateLegendInteractivity = false;
    this.shouldSetLegendCursor = false;
    this.shouldUpdateReferenceLines = false;
    this.shouldUpdateCursor = false;
    this.shouldDrawInteractionState = false;
    this.shouldSetLabelOpacity = false;
    this.shouldSetLabelPosition = false;
    this.shouldSetLabelContent = false;
    this.shouldCheckLabelColor = false;
    this.shouldBindInteractivity = false;
    this.shouldUpdateDescriptionWrapper = false;
    this.shouldSetChartAccessibilityTitle = false;
    this.shouldSetChartAccessibilitySubtitle = false;
    this.shouldSetChartAccessibilityLongDescription = false;
    this.shouldSetChartAccessibilityExecutiveSummary = false;
    this.shouldSetChartAccessibilityStatisticalNotes = false;
    this.shouldSetChartAccessibilityStructureNotes = false;
    this.shouldSetParentSVGAccessibility = false;
    this.shouldSetGeometryAccessibilityAttributes = false;
    this.shouldSetGeometryAriaLabels = false;
    this.shouldSetGroupAccessibilityLabel = false;
    this.shouldSetChartAccessibilityPurpose = false;
    this.shouldSetChartAccessibilityContext = false;
    this.shouldSetTestingAttributes = false;
    this.shouldRedrawWrapper = false;
    this.shouldSetTagLevels = false;
    this.shouldSetChartAccessibilityCount = false;
    this.shouldSetYAxisAccessibility = false;
    this.shouldSetXAxisAccessibility = false;
    this.shouldSetAnnotationAccessibility = false;
    this.shouldSetTextures = false;
    this.shouldSetStrokes = false;
    this.strokes = {};
    this.topLevel = 'h2';
    this.bottomLevel = 'p';
    this.textTreatmentHandler = (d, i, n) => {
      const me = select(n[i]);
      const bgColor = this.clickHighlight &&
        this.clickHighlight.length > 0 &&
        checkClicked(d, this.clickHighlight, this.innerInteractionKeys) &&
        this.clickStyle.color
        ? visaColors[this.clickStyle.color] || this.clickStyle.color
        : this.hoverHighlight &&
          checkHovered(d, this.hoverHighlight, this.innerInteractionKeys) &&
          this.hoverStyle.color
          ? visaColors[this.hoverStyle.color] || this.hoverStyle.color
          : this.preparedColors[i];
      const autoPlacementBackgroundColor = this.dataLabel.placement === 'auto' // can ignore this for collisionHideOnly
        ? this.layout === 'vertical'
          ? (this.dataLabel.collisionPlacement === 'top' && me.attr('data-baseline') !== 'bottom') ||
            (this.dataLabel.collisionPlacement === 'middle' && me.attr('data-baseline') !== 'bottom') ||
            (this.dataLabel.collisionPlacement === 'bottom' &&
              me.attr('data-baseline') === 'bottom' &&
              ((d[this.valueAccessor] >= 0 && this.y(0) - this.y(d[this.valueAccessor]) > 20) ||
                (d[this.valueAccessor] < 0 && this.y(0) - this.y(d[this.valueAccessor]) < -20))) // if bottom we can check against baseline value of 0, helps to handle charts with negative values
          : (this.dataLabel.collisionPlacement === 'right' && me.attr('data-align') !== 'left') ||
            (this.dataLabel.collisionPlacement === 'middle' && me.attr('data-align') !== 'left') ||
            (this.dataLabel.collisionPlacement === 'left' && me.attr('data-align') !== 'right')
        : false;
      const color = autoPlacementBackgroundColor || this.dataLabel.placement === 'bottom' || this.dataLabel.placement === 'left'
        ? autoTextColor(bgColor)
        : visaColors.dark_text;
      me.attr('filter', !me.classed('textIsMoving')
        ? createTextStrokeFilter({
          root: this.svg.node(),
          id: this.chartID,
          color: autoPlacementBackgroundColor ||
            this.dataLabel.placement === 'bottom' ||
            this.dataLabel.placement === 'left'
            ? bgColor
            : '#ffffff'
        })
        : null);
      return color;
    };
  }
  dataWatcher(_newData, _oldData) {
    this.updated = true;
    this.shouldUpdateData = true;
    this.shouldSetColors = true;
    this.shouldSetTextures = true;
    this.shouldUpdateTableData = true;
    this.shouldSetGlobalSelections = true;
    this.shouldSetTestingAttributes = true;
    this.shouldEnterUpdateExit = true;
    this.shouldSetLabelContent = true;
    this.shouldSetLabelPosition = true;
    // this.shouldDrawInteractionState = true; // called from updateGeometries
    // this.shouldCheckLabelColor = true; // called from updateGeometries
    this.shouldSetGeometryAccessibilityAttributes = true;
    this.shouldSetGeometryAriaLabels = true;
    this.shouldUpdateLegendData = true;
    this.shouldUpdateScales = true;
    this.shouldValidate = true;
    this.shouldUpdateGeometries = true;
    this.shouldUpdateXAxis = true;
    this.shouldSetXAxisAccessibility = true;
    this.shouldUpdateYAxis = true;
    this.shouldSetYAxisAccessibility = true;
    this.shouldUpdateXGrid = true;
    this.shouldUpdateYGrid = true;
    this.shouldUpdateLegend = true;
    this.shouldUpdateReferenceLines = true;
    this.shouldUpdateBaseline = true;
    this.shouldUpdateAnnotations = true;
    this.shouldSetStrokes = true;
  }
  idWatcher(newID, _oldID) {
    console.error('Change detected in prop uniqueID from value ' +
      _oldID +
      ' to value ' +
      newID +
      '. This prop cannot be changed after component has loaded.');
    // this.chartID = newID || 'clustered-bar-chart-' + uuid();
    // this.clusteredBarChartEl.id = this.chartID;
    // this.shouldValidate = true;
    // this.shouldUpdateDescriptionWrapper = true;
    // this.shouldSetParentSVGAccessibility = true;
    // this.shouldDrawInteractionState = true;
    // this.shouldUpdateLegend = true;
    // this.shouldSetStrokes = true;
  }
  headingWatcher(_newVal, _oldVal) {
    this.shouldRedrawWrapper = true;
    this.shouldSetTagLevels = true;
    this.shouldSetChartAccessibilityCount = true;
    this.shouldSetYAxisAccessibility = true;
    this.shouldSetXAxisAccessibility = true;
    this.shouldSetAnnotationAccessibility = true;
    this.shouldUpdateDescriptionWrapper = true;
    this.shouldSetChartAccessibilityTitle = true;
    this.shouldSetChartAccessibilitySubtitle = true;
    this.shouldSetChartAccessibilityLongDescription = true;
    this.shouldSetChartAccessibilityContext = true;
    this.shouldSetChartAccessibilityExecutiveSummary = true;
    this.shouldSetChartAccessibilityPurpose = true;
    this.shouldSetChartAccessibilityStatisticalNotes = true;
    this.shouldSetChartAccessibilityStructureNotes = true;
  }
  titleWatcher(_newVal, _oldVal) {
    this.shouldValidate = true;
    this.shouldUpdateDescriptionWrapper = true;
    this.shouldSetChartAccessibilityTitle = true;
    this.shouldSetParentSVGAccessibility = true;
  }
  subtitleWatcher(_newVal, _oldVal) {
    this.shouldSetChartAccessibilitySubtitle = true;
    this.shouldSetParentSVGAccessibility = true;
  }
  dimensionWatcher(_newVal, _oldVal) {
    this.shouldSetDimensions = true;
    this.shouldUpdateScales = true;
    this.shouldResetRoot = true;
    this.shouldUpdateGeometries = true;
    this.shouldUpdateXAxis = true;
    this.shouldUpdateYAxis = true;
    this.shouldUpdateXGrid = true;
    this.shouldUpdateYGrid = true;
    this.shouldSetLabelPosition = true;
    this.shouldCheckLabelColor = true;
    this.shouldUpdateLegend = true;
    this.shouldUpdateReferenceLines = true;
    this.shouldUpdateBaseline = true;
    this.shouldUpdateAnnotations = true;
  }
  layoutWatcher(_newVal, _oldVal) {
    this.shouldValidateLabelPlacement = true;
    this.shouldUpdateScales = true;
    this.shouldValidateAxes = true;
    this.shouldResetRoot = true;
    this.shouldUpdateGeometries = true;
    this.shouldUpdateXAxis = true;
    this.shouldUpdateYAxis = true;
    this.shouldUpdateXGrid = true;
    this.shouldUpdateYGrid = true;
    this.shouldSetLabelPosition = true;
    this.shouldCheckLabelColor = true;
    this.shouldUpdateLegend = true;
    this.shouldUpdateReferenceLines = true;
    this.shouldUpdateBaseline = true;
    this.shouldUpdateAnnotations = true;
    this.shouldSetGeometryAccessibilityAttributes = true;
    this.shouldSetTestingAttributes = true;
  }
  ordinalAccessorWatcher(_newVal, _oldVal) {
    this.shouldUpdateTableData = true;
    this.shouldUpdateLegendData = true;
    this.shouldUpdateScales = true;
    this.shouldSetColors = true;
    this.shouldUpdateGeometries = true;
    this.shouldDrawInteractionState = true;
    this.shouldCheckLabelColor = true;
    this.shouldUpdateLegend = true;
    this.shouldUpdateReferenceLines = true;
    this.shouldUpdateAnnotations = true;
    this.shouldSetGeometryAriaLabels = true;
    this.shouldSetStrokes = true;
    this.shouldSetTextures = true;
    if (!(this.interactionKeys && this.interactionKeys.length)) {
      this.shouldValidateInteractionKeys = true;
      this.shouldSetSelectionClass = true;
    }
  }
  valueAccessorWatcher(_newVal, _oldVal) {
    this.shouldUpdateData = true;
    this.shouldUpdateTableData = true;
    this.shouldUpdateScales = true;
    this.shouldSetColors = true;
    this.shouldUpdateGeometries = true;
    this.shouldDrawInteractionState = true;
    this.shouldCheckValueAxis = true;
    this.shouldValidateDataLabelAccessor = true;
    this.shouldSetLabelContent = true;
    this.shouldSetLabelPosition = true;
    this.shouldCheckLabelColor = true;
    this.shouldUpdateReferenceLines = true;
    this.shouldUpdateAnnotations = true;
    this.shouldSetGeometryAriaLabels = true;
    this.shouldSetStrokes = true;
    this.shouldSetTextures = true;
  }
  groupAccessorWatcher(_newVal, _oldVal) {
    this.shouldUpdateData = true;
    this.shouldSetGlobalSelections = true;
    this.shouldEnterUpdateExit = true;
    this.shouldUpdateTableData = true;
    this.shouldUpdateScales = true;
    this.shouldUpdateGeometries = true;
    this.shouldDrawInteractionState = true;
    this.shouldCheckLabelColor = true;
    this.shouldCheckLabelAxis = true;
    this.shouldUpdateBaseline = true;
    this.shouldUpdateReferenceLines = true;
    this.shouldUpdateAnnotations = true;
    this.shouldSetGeometryAriaLabels = true;
    this.shouldSetGroupAccessibilityLabel = true;
    this.shouldSetStrokes = true;
    this.shouldSetTextures = true;
    if (!(this.interactionKeys && this.interactionKeys.length)) {
      this.shouldValidateInteractionKeys = true;
      this.shouldSetSelectionClass = true;
    }
  }
  reverseOrderWatcher(_newVal, _oldVal) {
    this.shouldUpdateTableData = true;
    this.shouldUpdateScales = true;
    this.shouldUpdateGeometries = true;
    this.shouldSetLabelPosition = true;
    this.shouldCheckLabelColor = true;
    this.shouldUpdateAnnotations = true;
    this.shouldSetGeometryAccessibilityAttributes = true;
    this.shouldSetGeometryAriaLabels = true;
    if (this.layout === 'vertical') {
      this.shouldValidateAxes = true;
      this.shouldUpdateXAxis = true;
      this.shouldSetXAxisAccessibility = true;
    }
    else if (this.layout === 'horizontal') {
      this.shouldValidateAxes = true;
      this.shouldUpdateYAxis = true;
      this.shouldSetYAxisAccessibility = true;
    }
  }
  xAxisWatcher(_newVal, _oldVal) {
    this.shouldValidateAxes = true;
    this.shouldUpdateXAxis = true;
    this.shouldSetXAxisAccessibility = true;
    const newGridVal = _newVal && _newVal.gridVisible;
    const oldGridVal = _oldVal && _oldVal.gridVisible;
    const newTickInterval = _newVal && _newVal.tickInterval ? _newVal.tickInterval : 0;
    const oldTickInterval = _oldVal && _oldVal.tickInterval ? _oldVal.tickInterval : 0;
    if (newGridVal !== oldGridVal || newTickInterval !== oldTickInterval) {
      this.shouldUpdateXGrid = true;
    }
  }
  yAxisWatcher(_newVal, _oldVal) {
    this.shouldValidateAxes = true;
    this.shouldUpdateYAxis = true;
    this.shouldSetYAxisAccessibility = true;
    const newGridVal = _newVal && _newVal.gridVisible;
    const oldGridVal = _oldVal && _oldVal.gridVisible;
    const newTickInterval = _newVal && _newVal.tickInterval ? _newVal.tickInterval : 0;
    const oldTickInterval = _oldVal && _oldVal.tickInterval ? _oldVal.tickInterval : 0;
    if (newGridVal !== oldGridVal || newTickInterval !== oldTickInterval) {
      this.shouldUpdateYGrid = true;
    }
  }
  wrapLabelWatcher(_newVal, _oldVal) {
    this.shouldUpdateXAxis = true;
    this.shouldUpdateYAxis = true;
  }
  colorsWatcher(_newVal, _oldVal) {
    this.shouldSetColors = true;
    this.shouldDrawInteractionState = true;
    this.shouldUpdateLegend = true;
    this.shouldCheckLabelColor = true;
    this.shouldSetStrokes = true;
    this.shouldSetTextures = true;
  }
  hoverStyleWatcher(_newVal, _oldVal) {
    this.shouldDrawInteractionState = true;
    this.shouldCheckLabelColor = true;
    this.shouldSetStrokes = true;
  }
  clickStyleWatcher(_newVal, _oldVal) {
    this.shouldDrawInteractionState = true;
    this.shouldCheckLabelColor = true;
    this.shouldSetStrokes = true;
  }
  referenceWatcher(_newVal, _oldVal) {
    this.shouldUpdateReferenceLines = true;
  }
  cursorWatcher(_newVal, _oldVal) {
    this.shouldUpdateCursor = true;
    this.shouldSetLegendCursor = true;
  }
  cornerWatcher(_newVal, _oldVal) {
    this.shouldUpdateCorners = true;
  }
  intervalRatioWatcher(_newVal, _oldVal) {
    this.shouldUpdateScales = true;
    this.shouldUpdateGeometries = true;
    this.shouldCheckLabelAxis = true;
    this.shouldSetLabelPosition = true;
    this.shouldCheckLabelColor = true;
    this.shouldUpdateAnnotations = true;
  }
  groupIntervalRatioWatcher(_newVal, _oldVal) {
    this.shouldUpdateScales = true;
    this.shouldUpdateGeometries = true;
    this.shouldSetLabelPosition = true;
    this.shouldCheckLabelColor = true;
    this.shouldUpdateAnnotations = true;
  }
  hoverOpacityWatcher(_newVal, _oldVal) {
    this.shouldDrawInteractionState = true;
    this.shouldCheckLabelColor = true;
  }
  labelWatcher(_newVal, _oldVal) {
    const newPlacementVal = _newVal && _newVal.placement ? _newVal.placement : false;
    const oldPlacementVal = _oldVal && _oldVal.placement ? _oldVal.placement : false;
    const newCollisionPlacementVal = _newVal && _newVal.collisionPlacement ? _newVal.collisionPlacement : false;
    const oldCollisionPlacementVal = _oldVal && _oldVal.collisionPlacement ? _oldVal.collisionPlacement : false;
    const newVisibleVal = _newVal && _newVal.visible;
    const oldVisibleVal = _oldVal && _oldVal.visible;
    const newAccessor = _newVal && _newVal.labelAccessor ? _newVal.labelAccessor : false;
    const oldAccessor = _oldVal && _oldVal.labelAccessor ? _oldVal.labelAccessor : false;
    const newFormatVal = _newVal && _newVal.format ? _newVal.format : false;
    const oldFormatVal = _oldVal && _oldVal.format ? _oldVal.format : false;
    const newCollisionHideOnlyVal = _newVal && _newVal.collisionHideOnly ? _newVal.collisionHideOnly : false;
    const oldCollisionHideOnlyVal = _oldVal && _oldVal.collisionHideOnly ? _oldVal.collisionHideOnly : false;
    // if only visible changes we just flip opacity, but don't redraw
    if (newVisibleVal !== oldVisibleVal) {
      this.shouldSetLabelOpacity = true;
    }
    // any placement related stuff and we do a full redraw, no opacity
    if (newPlacementVal !== oldPlacementVal ||
      newCollisionPlacementVal !== oldCollisionPlacementVal ||
      newCollisionHideOnlyVal !== oldCollisionHideOnlyVal) {
      this.shouldValidateLabelPlacement = true;
      this.shouldSetLabelPosition = true;
      this.shouldCheckLabelColor = true;
    }
    // text/format required redraw/table but no opacity
    if (newAccessor !== oldAccessor || newFormatVal !== oldFormatVal) {
      this.shouldValidateDataLabelAccessor = true;
      this.shouldUpdateTableData = true;
      this.shouldSetLabelContent = true;
      this.shouldCheckLabelColor = true;
    }
  }
  tooltipLabelWatcher(_newVal, _oldVal) {
    this.shouldUpdateTableData = true;
  }
  accessibilityWatcher(_newVal, _oldVal) {
    this.shouldValidate = true;
    const newTitle = _newVal && _newVal.title ? _newVal.title : false;
    const oldTitle = _oldVal && _oldVal.title ? _oldVal.title : false;
    if (newTitle !== oldTitle) {
      this.shouldUpdateDescriptionWrapper = true;
      this.shouldSetChartAccessibilityTitle = true;
      this.shouldSetParentSVGAccessibility = true;
    }
    const newExecutiveSummary = _newVal && _newVal.executiveSummary ? _newVal.executiveSummary : false;
    const oldExecutiveSummary = _oldVal && _oldVal.executiveSummary ? _oldVal.executiveSummary : false;
    if (newExecutiveSummary !== oldExecutiveSummary) {
      this.shouldSetChartAccessibilityExecutiveSummary = true;
    }
    const newPurpose = _newVal && _newVal.purpose ? _newVal.purpose : false;
    const oldPurpose = _oldVal && _oldVal.purpose ? _oldVal.purpose : false;
    if (newPurpose !== oldPurpose) {
      this.shouldSetChartAccessibilityPurpose = true;
    }
    const newLongDescription = _newVal && _newVal.longDescription ? _newVal.longDescription : false;
    const oldLongDescription = _oldVal && _oldVal.longDescription ? _oldVal.longDescription : false;
    if (newLongDescription !== oldLongDescription) {
      this.shouldSetChartAccessibilityLongDescription = true;
    }
    const newContext = _newVal && _newVal.contextExplanation ? _newVal.contextExplanation : false;
    const oldContext = _oldVal && _oldVal.contextExplanation ? _oldVal.contextExplanation : false;
    if (newContext !== oldContext) {
      this.shouldSetChartAccessibilityContext = true;
    }
    const newStatisticalNotes = _newVal && _newVal.statisticalNotes ? _newVal.statisticalNotes : false;
    const oldStatisticalNotes = _oldVal && _oldVal.statisticalNotes ? _oldVal.statisticalNotes : false;
    if (newStatisticalNotes !== oldStatisticalNotes) {
      this.shouldSetChartAccessibilityStatisticalNotes = true;
    }
    const newStructureNotes = _newVal && _newVal.structureNotes ? _newVal.structureNotes : false;
    const oldStructureNotes = _oldVal && _oldVal.structureNotes ? _oldVal.structureNotes : false;
    if (newStructureNotes !== oldStructureNotes) {
      this.shouldSetChartAccessibilityStructureNotes = true;
    }
    const newincludeDataKeyNames = _newVal && _newVal.includeDataKeyNames;
    const oldincludeDataKeyNames = _oldVal && _oldVal.includeDataKeyNames;
    const newElementDescriptionAccessor = _newVal && _newVal.elementDescriptionAccessor ? _newVal.elementDescriptionAccessor : false;
    const oldElementDescriptionAccessor = _oldVal && _oldVal.elementDescriptionAccessor ? _oldVal.elementDescriptionAccessor : false;
    if (newincludeDataKeyNames !== oldincludeDataKeyNames ||
      newElementDescriptionAccessor !== oldElementDescriptionAccessor) {
      if (newincludeDataKeyNames !== oldincludeDataKeyNames) {
        // this one is tricky because it needs to run after the lifecycle
        // AND it could run in the off-chance this prop is changed
        this.shouldSetGroupAccessibilityLabel = true;
      }
      this.shouldSetGeometryAriaLabels = true;
      this.shouldSetParentSVGAccessibility = true;
    }
    const newTextures = _newVal && _newVal.hideTextures ? _newVal.hideTextures : false;
    const oldTextures = _oldVal && _oldVal.hideTextures ? _oldVal.hideTextures : false;
    if (newTextures !== oldTextures) {
      this.shouldSetTextures = true;
      this.shouldUpdateLegend = true;
      this.shouldDrawInteractionState = true;
    }
    const newSmallValue = _newVal && _newVal.showSmallLabels ? _newVal.showSmallLabels : false;
    const oldSmallValue = _oldVal && _oldVal.showSmallLabels ? _oldVal.showSmallLabels : false;
    if (newSmallValue !== oldSmallValue) {
      this.shouldSetLabelOpacity = true;
    }
    const newStrokes = _newVal && _newVal.hideStrokes ? _newVal.hideStrokes : false;
    const oldStrokes = _oldVal && _oldVal.hideStrokes ? _oldVal.hideStrokes : false;
    if (newStrokes !== oldStrokes) {
      this.shouldUpdateLegend = true;
      this.shouldSetStrokes = true;
      this.shouldDrawInteractionState = true;
    }
    const newKeyNav = _newVal && _newVal.keyboardNavConfig && _newVal.keyboardNavConfig.disabled
      ? _newVal.keyboardNavConfig.disabled
      : false;
    const oldKeyNav = _oldVal && _oldVal.keyboardNavConfig && _oldVal.keyboardNavConfig.disabled
      ? _oldVal.keyboardNavConfig.disabled
      : false;
    const newInterface = _newVal && _newVal.elementsAreInterface ? _newVal.elementsAreInterface : false;
    const oldInterface = _oldVal && _oldVal.elementsAreInterface ? _oldVal.elementsAreInterface : false;
    if (newKeyNav !== oldKeyNav || newInterface !== oldInterface) {
      this.shouldSetGeometryAriaLabels = true;
      this.shouldSetParentSVGAccessibility = true;
      this.shouldUpdateDescriptionWrapper = true;
      this.shouldRedrawWrapper = true;
      this.shouldSetChartAccessibilityTitle = true;
      this.shouldSetChartAccessibilitySubtitle = true;
      this.shouldSetChartAccessibilityLongDescription = true;
      this.shouldSetChartAccessibilityContext = true;
      this.shouldSetChartAccessibilityExecutiveSummary = true;
      this.shouldSetChartAccessibilityPurpose = true;
      this.shouldSetChartAccessibilityStatisticalNotes = true;
      this.shouldSetChartAccessibilityStructureNotes = true;
    }
    if (newInterface !== oldInterface) {
      this.shouldDrawInteractionState = true;
    }
  }
  legendWatcher(_newVal, _oldVal) {
    this.shouldUpdateLegend = true;
    const newInteractiveVal = _newVal && _newVal.interactive;
    const oldInteractiveVal = _oldVal && _oldVal.interactive;
    if (newInteractiveVal !== oldInteractiveVal) {
      this.shouldSetLegendCursor = true;
      this.shouldUpdateLegendInteractivity = true;
    }
  }
  annotationsWatcher(_newVal, _oldVal) {
    this.shouldValidate = true;
    this.shouldUpdateAnnotations = true;
    this.shouldSetAnnotationAccessibility = true;
  }
  valueOverrideWatcher(_newVal, _oldVal) {
    this.shouldUpdateScales = true;
    this.shouldCheckValueAxis = true;
    this.shouldUpdateGeometries = true;
    this.shouldSetLabelPosition = true;
    this.shouldCheckLabelColor = true;
    this.shouldUpdateReferenceLines = true;
    this.shouldUpdateBaseline = true;
    this.shouldUpdateAnnotations = true;
  }
  clickWatcher(_newVal, _oldVal) {
    this.shouldDrawInteractionState = true;
    this.shouldCheckLabelColor = true;
    this.shouldSetSelectionClass = true;
  }
  hoverWatcher(_newVal, _oldVal) {
    this.shouldDrawInteractionState = true;
    this.shouldCheckLabelColor = true;
  }
  interactionWatcher(_newVal, _oldVal) {
    this.shouldValidateInteractionKeys = true;
    this.shouldDrawInteractionState = true;
    this.shouldCheckLabelColor = true;
    this.shouldSetSelectionClass = true;
    this.shouldUpdateTableData = true;
    this.shouldSetGeometryAriaLabels = true;
  }
  suppressWatcher(_newVal, _oldVal) {
    this.shouldBindInteractivity = true;
    this.shouldUpdateCursor = true;
    this.shouldSetLegendCursor = true;
    this.shouldUpdateLegendInteractivity = true;
    this.shouldSetGeometryAriaLabels = true;
    this.shouldSetParentSVGAccessibility = true;
    this.shouldUpdateDescriptionWrapper = true;
    this.shouldRedrawWrapper = true;
    this.shouldValidate = true;
    this.shouldSetChartAccessibilityTitle = true;
    this.shouldSetChartAccessibilitySubtitle = true;
    this.shouldSetChartAccessibilityLongDescription = true;
    this.shouldSetChartAccessibilityContext = true;
    this.shouldSetChartAccessibilityExecutiveSummary = true;
    this.shouldSetChartAccessibilityPurpose = true;
    this.shouldSetChartAccessibilityStatisticalNotes = true;
    this.shouldSetChartAccessibilityStructureNotes = true;
  }
  unitTestWatcher(_newVal, _oldVal) {
    this.shouldSetTestingAttributes = true;
  }
  componentWillLoad() {
    const chartID = this.uniqueID || 'clustered-bar-chart-' + uuid();
    this.initialLoadEvent.emit({ chartID: chartID });
    // contrary to componentWillUpdate, this method appears safe to use for
    // any calculations we need. Keeping them here reduces future refactor,
    // since componentWillUpdate should eventually mirror this method
    return new Promise(resolve => {
      this.duration = 0;
      this.defaults = true;
      this.chartID = chartID;
      this.clusteredBarChartEl.id = this.chartID;
      this.setTagLevels();
      this.prepareData();
      this.prepareLegendData();
      this.setDimensions();
      this.prepareScales();
      this.validateInteractionKeys();
      this.validateDataLabelAccessor();
      this.validateAxes();
      this.validateLabelPlacement();
      this.setTableData();
      this.shouldValidateAccessibilityProps();
      this.setColors();
      resolve('component will load');
    });
  }
  componentWillUpdate() {
    // NEVER put items in this method that rely on props (until stencil bug is resolved)
    // All items that belong here are currently at the top of render
    // see: https://github.com/ionic-team/stencil/issues/2061#issuecomment-578282178
    return new Promise(resolve => {
      resolve('component will update');
    });
  }
  componentDidLoad() {
    return new Promise(resolve => {
      this.shouldValidateAccessibilityProps();
      this.renderRootElements();
      this.setTooltipInitialStyle();
      this.setChartDescriptionWrapper();
      this.setChartAccessibilityTitle();
      this.setChartAccessibilitySubtitle();
      this.setChartAccessibilityLongDescription();
      this.setChartAccessibilityExecutiveSummary();
      this.setChartAccessibilityPurpose();
      this.setChartAccessibilityContext();
      this.setChartAccessibilityStatisticalNotes();
      this.setChartAccessibilityStructureNotes();
      this.setParentSVGAccessibility();
      this.reSetRoot();
      this.setTextures();
      this.setStrokes();
      this.drawXGrid();
      this.drawYGrid();
      this.setGlobalSelections();
      this.setTestingAttributes();
      this.enterGeometries();
      this.updateGeometries();
      this.exitGeometries();
      this.enterDataLabels();
      this.updateDataLabels();
      this.exitDataLabels();
      this.drawGeometries();
      this.setChartCountAccessibility();
      this.setGeometryAccessibilityAttributes();
      this.setGeometryAriaLabels();
      this.drawLegendElements();
      this.bindLegendInteractivity();
      this.setLabelContent();
      this.processLabelPosition(this.updateLabels, false, true, false);
      this.drawReferenceLines();
      this.setSelectedClass();
      this.checkLabelColorAgainstBackground();
      this.updateCursor();
      this.bindInteractivity();
      this.drawAnnotations();
      this.setAnnotationAccessibility();
      this.drawXAxis();
      this.setXAxisAccessibility();
      this.drawYAxis();
      this.setYAxisAccessibility();
      this.drawBaseline();
      this.onChangeHandler();
      // we want to hide all child <g> of this.root BUT we want to make sure not to hide the
      // parent<g> that contains our geometries! In a subGroup chart (like stacked bars),
      // we want to pass the PARENT of all the <g>s that contain bars
      hideNonessentialGroups(this.root.node(), this.barG.node());
      this.setGroupAccessibilityID();
      this.defaults = false;
      // catch all to remove entering class from labels once we have loaded component
      this.updateLabels.classed('entering', false);
      resolve('component did load');
    });
  }
  componentDidUpdate() {
    return new Promise(resolve => {
      this.duration = !this.animationConfig || !this.animationConfig.disabled ? 750 : 0;
      if (this.shouldUpdateDescriptionWrapper) {
        this.setChartDescriptionWrapper();
        this.shouldUpdateDescriptionWrapper = false;
      }
      if (this.shouldSetChartAccessibilityCount) {
        this.setChartCountAccessibility();
        this.shouldSetChartAccessibilityCount = false;
      }
      if (this.shouldSetChartAccessibilityTitle) {
        this.setChartAccessibilityTitle();
        this.shouldSetChartAccessibilityTitle = false;
      }
      if (this.shouldSetChartAccessibilitySubtitle) {
        this.setChartAccessibilitySubtitle();
        this.shouldSetChartAccessibilitySubtitle = false;
      }
      if (this.shouldSetChartAccessibilityLongDescription) {
        this.setChartAccessibilityLongDescription();
        this.shouldSetChartAccessibilityLongDescription = false;
      }
      if (this.shouldSetChartAccessibilityExecutiveSummary) {
        this.setChartAccessibilityExecutiveSummary();
        this.shouldSetChartAccessibilityExecutiveSummary = false;
      }
      if (this.shouldSetChartAccessibilityPurpose) {
        this.setChartAccessibilityPurpose();
        this.shouldSetChartAccessibilityPurpose = false;
      }
      if (this.shouldSetChartAccessibilityContext) {
        this.setChartAccessibilityContext();
        this.shouldSetChartAccessibilityContext = false;
      }
      if (this.shouldSetChartAccessibilityStatisticalNotes) {
        this.setChartAccessibilityStatisticalNotes();
        this.shouldSetChartAccessibilityStatisticalNotes = false;
      }
      if (this.shouldSetChartAccessibilityStructureNotes) {
        this.setChartAccessibilityStructureNotes();
        this.shouldSetChartAccessibilityStructureNotes = false;
      }
      if (this.shouldSetParentSVGAccessibility) {
        this.setParentSVGAccessibility();
        this.shouldSetParentSVGAccessibility = false;
      }
      if (this.shouldResetRoot) {
        this.reSetRoot();
        this.shouldResetRoot = false;
      }
      if (this.shouldSetTextures) {
        this.setTextures();
        this.shouldSetTextures = false;
      }
      if (this.shouldSetStrokes) {
        this.setStrokes();
        this.shouldSetStrokes = false;
      }
      if (this.shouldSetGlobalSelections) {
        this.setGlobalSelections();
        this.shouldSetGlobalSelections = false;
      }
      if (this.shouldSetTestingAttributes) {
        this.setTestingAttributes();
        this.shouldSetTestingAttributes = false;
      }
      if (this.shouldUpdateXGrid) {
        this.drawXGrid();
        this.shouldUpdateXGrid = false;
      }
      if (this.shouldUpdateYGrid) {
        this.drawYGrid();
        this.shouldUpdateYGrid = false;
      }
      if (this.shouldEnterUpdateExit) {
        this.enterGeometries();
        this.updateGeometries();
        this.exitGeometries();
        this.enterDataLabels();
        this.updateDataLabels();
        this.exitDataLabels();
        this.shouldEnterUpdateExit = false;
      }
      if (this.shouldUpdateGeometries) {
        this.drawGeometries();
        this.shouldUpdateGeometries = false;
      }
      if (this.shouldSetGeometryAccessibilityAttributes) {
        this.setGeometryAccessibilityAttributes();
        this.shouldSetGeometryAccessibilityAttributes = false;
      }
      if (this.shouldSetGeometryAriaLabels) {
        this.setGeometryAriaLabels();
        this.shouldSetGeometryAriaLabels = false;
      }
      if (this.shouldSetGroupAccessibilityLabel) {
        this.setGroupAccessibilityID();
        this.shouldSetGroupAccessibilityLabel = false;
      }
      if (this.shouldUpdateCorners) {
        this.setRoundedCorners();
        this.shouldUpdateCorners = false;
      }
      if (this.shouldUpdateLegend) {
        this.drawLegendElements();
        this.shouldUpdateLegend = false;
      }
      if (this.shouldSetLabelContent) {
        this.setLabelContent();
        this.shouldSetLabelContent = false;
      }
      if (this.shouldSetLabelPosition) {
        this.setLabelPosition();
        this.shouldSetLabelPosition = false;
      }
      if (this.shouldUpdateReferenceLines) {
        this.drawReferenceLines();
        this.shouldUpdateReferenceLines = false;
      }
      if (this.shouldDrawInteractionState) {
        this.updateInteractionState();
        this.shouldDrawInteractionState = false;
      }
      if (this.shouldSetLabelOpacity) {
        this.setLabelOpacity();
        this.shouldSetLabelOpacity = false;
      }
      if (this.shouldCheckLabelColor) {
        this.checkLabelColorAgainstBackground();
        this.shouldCheckLabelColor = false;
      }
      if (this.shouldSetSelectionClass) {
        this.setSelectedClass();
        this.shouldSetSelectionClass = false;
      }
      if (this.shouldUpdateLegendInteractivity) {
        this.bindLegendInteractivity();
        this.shouldUpdateLegendInteractivity = false;
      }
      if (this.shouldSetLegendCursor) {
        this.setLegendCursor();
        this.shouldSetLegendCursor = false;
      }
      if (this.shouldUpdateCursor) {
        this.updateCursor();
        this.shouldUpdateCursor = false;
      }
      if (this.shouldBindInteractivity) {
        this.bindInteractivity();
        this.shouldBindInteractivity = false;
      }
      if (this.shouldUpdateAnnotations) {
        this.drawAnnotations();
        this.shouldUpdateAnnotations = false;
      }
      if (this.shouldSetAnnotationAccessibility) {
        this.setAnnotationAccessibility();
        this.shouldSetAnnotationAccessibility = false;
      }
      if (this.shouldUpdateXAxis) {
        this.drawXAxis();
        this.shouldUpdateXAxis = false;
      }
      if (this.shouldSetXAxisAccessibility) {
        this.setXAxisAccessibility();
        this.shouldSetXAxisAccessibility = false;
      }
      if (this.shouldUpdateYAxis) {
        this.drawYAxis();
        this.shouldUpdateYAxis = false;
      }
      if (this.shouldSetYAxisAccessibility) {
        this.setYAxisAccessibility();
        this.shouldSetYAxisAccessibility = false;
      }
      if (this.shouldUpdateBaseline) {
        this.drawBaseline();
        this.shouldUpdateBaseline = false;
      }
      this.onChangeHandler();
      this.updateLabels.classed('entering', false);
      resolve('component did update');
    }).then(() => this.drawEndEvent.emit({ chartID: this.chartID }));
  }
  shouldValidateAccessibilityProps() {
    if (this.shouldValidateAccessibility && !this.accessibility.disableValidation) {
      this.shouldValidateAccessibility = false;
      validateAccessibilityProps(this.chartID, Object.assign({}, this.accessibility), {
        annotations: this.annotations,
        data: this.data,
        uniqueID: this.uniqueID,
        context: {
          mainTitle: this.mainTitle,
          onClickEvent: !this.suppressEvents ? this.clickEvent.emit : undefined
        }
      });
    }
  }
  validateInteractionKeys() {
    this.innerInteractionKeys =
      this.interactionKeys && this.interactionKeys.length ? this.interactionKeys : [this.ordinalAccessor];
  }
  validateDataLabelAccessor() {
    this.innerLabelAccessor = this.dataLabel.labelAccessor ? this.dataLabel.labelAccessor : this.valueAccessor;
  }
  validateLabelPlacement() {
    // check data label placement assignment based on layout
    if (this.layout === 'vertical') {
      if (this.dataLabel.placement !== 'top' &&
        this.dataLabel.placement !== 'bottom' &&
        this.dataLabel.placement !== 'auto') {
        this.dataLabel.placement = 'top';
      }
    }
    else {
      if (this.dataLabel.placement !== 'right' &&
        this.dataLabel.placement !== 'left' &&
        this.dataLabel.placement !== 'auto') {
        this.dataLabel.placement = 'right';
      }
    }
  }
  setDimensions() {
    this.padding = typeof this.padding === 'string' ? getPadding(this.padding) : this.padding;
    // before we render/load we need to set our height and width based on props
    this.innerHeight = this.height - this.margin.top - this.margin.bottom;
    this.innerWidth = this.width - this.margin.left - this.margin.right;
    this.innerPaddedHeight = this.innerHeight - this.padding.top - this.padding.bottom;
    this.innerPaddedWidth = this.innerWidth - this.padding.left - this.padding.right;
  }
  prepareData() {
    // check data format & offset time object
    this.data.map(d => {
      d[this.valueAccessor] = parseFloat(d[this.valueAccessor]);
      d[this.groupAccessor] =
        d[this.groupAccessor] instanceof Date
          ? formatDate({
            date: d[this.groupAccessor],
            format: this.layout === 'vertical' ? this.xAxis.format : this.yAxis.format,
            offsetTimezone: true
          })
          : d[this.groupAccessor];
    });
    this.nest = nest()
      .key(d => d[this.groupAccessor])
      .entries(this.data);
    // Get all item categories
    this.datakeys = this.nest.map(d => d.key);
  }
  setTableData() {
    // generate scoped and formatted data for data-table component
    const keys = scopeDataKeys(this, chartAccessors, 'clustered-bar-chart');
    this.tableData = getScopedData(this.data, keys);
    this.tableColumns = Object.keys(keys);
  }
  prepareScales() {
    const minBarValue = this.minValueOverride && this.minValueOverride < min(this.data, d => d[this.valueAccessor])
      ? this.minValueOverride
      : min(this.data, d => d[this.valueAccessor]);
    const maxBarValue = this.maxValueOverride && this.maxValueOverride > max(this.data, d => d[this.valueAccessor])
      ? this.maxValueOverride
      : max(this.data, d => d[this.valueAccessor]);
    // scale band based on layout of chart
    if (this.layout === 'vertical') {
      this.y = scaleLinear()
        .domain([Math.min(0, minBarValue), Math.max(0, maxBarValue)])
        .range([this.innerPaddedHeight, 0]);
      this.x0 = scaleBand()
        .domain(this.datakeys)
        .range(this.reverseOrder ? [this.innerPaddedWidth, 0] : [0, this.innerPaddedWidth])
        .padding(this.groupIntervalRatio);
      this.x1 = scaleBand()
        .domain(this.nest[0].values.map(d => d[this.ordinalAccessor]))
        .rangeRound([0, this.x0.bandwidth()])
        .padding(this.barIntervalRatio);
    }
    else if (this.layout === 'horizontal') {
      this.x = scaleLinear()
        .domain([Math.min(0, minBarValue), Math.max(0, maxBarValue)])
        .range([0, this.innerPaddedWidth]);
      this.y0 = scaleBand()
        .domain(this.datakeys)
        .range(this.reverseOrder ? [this.innerPaddedHeight, 0] : [0, this.innerPaddedHeight])
        .padding(this.groupIntervalRatio);
      this.y1 = scaleBand()
        .domain(this.nest[0].values.map(d => d[this.ordinalAccessor]))
        .rangeRound([0, this.y0.bandwidth()])
        .padding(this.barIntervalRatio);
    }
  }
  validateAxes() {
    // check whether we are going to display axis and then update props
    this.innerXAxis = Object.assign(Object.assign({}, this.xAxis), { gridVisible: !(this.layout === 'vertical') && this.xAxis.gridVisible });
    this.innerYAxis = Object.assign(Object.assign({}, this.yAxis), { gridVisible: this.layout === 'vertical' && this.yAxis.gridVisible });
  }
  setColors() {
    this.preparedColors = this.colors
      ? convertVisaColor(this.colors)
      : getColors(this.colorPalette, this.nest[0].values.length);
  }
  setTextures() {
    const colorsArray = this.preparedColors.range ? this.preparedColors.range() : this.preparedColors;
    if (this.accessibility.hideTextures || colorsArray.length > 6) {
      this.colorArr = this.preparedColors;
    }
    else {
      const colorsToConvert = colorsArray;
      const textures = convertColorsToTextures({
        colors: colorsToConvert,
        rootSVG: this.svg.node(),
        id: this.chartID,
        scheme: 'categorical',
        disableTransitions: !this.duration
      });
      this.colorArr = this.preparedColors.range ? this.preparedColors.copy().range(textures) : textures;
    }
  }
  setStrokes() {
    this.strokes = buildStrokes({
      root: this.svg.node(),
      id: this.chartID,
      colors: this.preparedColors.range ? this.preparedColors.range() : this.preparedColors,
      clickStyle: this.clickStyle,
      hoverStyle: this.hoverStyle
    });
  }
  renderRootElements() {
    this.svg = select(this.clusteredBarChartEl)
      .select('.visa-viz-d3-clustered-bar-container')
      .append('svg')
      .attr('width', this.width)
      .attr('height', this.height)
      .attr('viewBox', '0 0 ' + this.width + ' ' + this.height);
    this.root = this.svg.append('g').attr('id', 'visa-viz-margin-container-g-' + this.chartID);
    this.rootG = this.root.append('g').attr('id', 'visa-viz-padding-container-g-' + this.chartID);
    this.gridG = this.rootG.append('g').attr('class', 'grid-group');
    this.barG = this.rootG.append('g').attr('class', 'clustered-bar-group');
    this.labelG = this.rootG.append('g').attr('class', 'clustered-bar-dataLabel-group');
    this.legendG = select(this.clusteredBarChartEl)
      .select('.clustered-bar-legend')
      .append('svg');
    this.tooltipG = select(this.clusteredBarChartEl).select('.clustered-bar-tooltip');
    this.references = this.rootG.append('g').attr('class', 'clustered-bar-reference-line-group');
  }
  setTestingAttributes() {
    if (this.unitTest) {
      select(this.clusteredBarChartEl)
        .select('.visa-viz-d3-clustered-bar-container')
        .attr('data-testid', 'chart-container');
      select(this.clusteredBarChartEl)
        .select('.clustered-bar-main-title')
        .attr('data-testid', 'main-title');
      select(this.clusteredBarChartEl)
        .select('.clustered-bar-sub-title')
        .attr('data-testid', 'sub-title');
      this.svg.attr('data-testid', 'root-svg');
      this.root.attr('data-testid', 'margin-container');
      this.rootG.attr('data-testid', 'padding-container');
      this.legendG.attr('data-testid', 'legend-container');
      this.tooltipG.attr('data-testid', 'tooltip-container');
      this.barG.attr('data-testid', 'clustered-bar-group');
      this.updateBarWrappers
        .attr('data-testid', 'clustered-bar-wrapper')
        .attr('data-id', d => `clustered-bar-wrapper-${d.key}`);
      this.update
        .attr('data-testid', 'bar')
        .attr('data-id', d => `bar-${d[this.groupAccessor]}-${d[this.ordinalAccessor]}`);
      this.labelG.attr('data-testid', 'clustered-bar-dataLabel-group');
      this.updateLabelWrappers
        .attr('data-testid', 'clustered-bar-dataLabel-wrapper')
        .attr('data-id', d => `clustered-bar-dataLabel-wrapper-${d.key}`);
      this.updateLabels
        .attr('data-testid', 'dataLabel')
        .attr('data-id', d => `dataLabel-${d[this.groupAccessor]}-${d[this.ordinalAccessor]}`);
      this.references.attr('data-testid', 'reference-line-group');
      this.svg.select('defs').attr('data-testid', 'pattern-defs');
      // reference lines do not have global selections
      this.references.selectAll('.clustered-bar-reference-line').attr('data-testid', 'reference-line');
      this.references.selectAll('.clustered-bar-reference-line-label').attr('data-testid', 'reference-line-label');
    }
    else {
      select(this.clusteredBarChartEl)
        .select('.visa-viz-d3-clustered-bar-container')
        .attr('data-testid', null);
      select(this.clusteredBarChartEl)
        .select('.clustered-bar-main-title')
        .attr('data-testid', null);
      select(this.clusteredBarChartEl)
        .select('.clustered-bar-sub-title')
        .attr('data-testid', null);
      this.svg.attr('data-testid', null);
      this.root.attr('data-testid', null);
      this.rootG.attr('data-testid', null);
      this.legendG.attr('data-testid', null);
      this.tooltipG.attr('data-testid', null);
      this.barG.attr('data-testid', null);
      this.updateBarWrappers.attr('data-testid', null).attr('data-id', null);
      this.update.attr('data-testid', null).attr('data-id', null);
      this.labelG.attr('data-testid', null);
      this.updateLabelWrappers.attr('data-testid', null).attr('data-id', null);
      this.updateLabels.attr('data-testid', null).attr('data-id', null);
      this.references.attr('data-testid', null);
      this.svg.select('defs').attr('data-testid', null);
      // reference lines do not have global selections
      this.references.selectAll('.clustered-bar-reference-line').attr('data-testid', null);
      this.references.selectAll('.clustered-bar-reference-line-label').attr('data-testid', null);
    }
  }
  // reset graph size based on window size
  reSetRoot() {
    const changeSvg = prepareRenderChange({
      selection: this.svg,
      duration: this.duration,
      namespace: 'root_reset',
      easing: easeCircleIn
    });
    changeSvg
      .attr('width', this.width)
      .attr('height', this.height)
      .attr('viewBox', '0 0 ' + this.width + ' ' + this.height);
    const changeRoot = prepareRenderChange({
      selection: this.root,
      duration: this.duration,
      namespace: 'root_reset',
      easing: easeCircleIn
    });
    changeRoot.attr('transform', `translate(${this.margin.left}, ${this.margin.top})`);
    const changeRootG = prepareRenderChange({
      selection: this.rootG,
      duration: this.duration,
      namespace: 'root_reset',
      easing: easeCircleIn
    });
    changeRootG.attr('transform', `translate(${this.padding.left}, ${this.padding.top})`);
    setAccessibilityDescriptionWidth(this.chartID, this.width);
  }
  // draw axis line
  drawXAxis() {
    drawAxis({
      root: this.rootG,
      height: this.innerPaddedHeight,
      width: this.innerPaddedWidth,
      axisScale: this.layout === 'vertical' ? this.x0 : this.x,
      left: false,
      wrapLabel: this.wrapLabel && this.layout === 'vertical' ? this.x0.bandwidth() : '',
      format: this.xAxis.format,
      tickInterval: this.xAxis.tickInterval,
      label: this.xAxis.label,
      padding: this.padding,
      hide: !this.innerXAxis.visible,
      duration: this.duration
    });
  }
  drawYAxis() {
    drawAxis({
      root: this.rootG,
      height: this.innerPaddedHeight,
      width: this.innerPaddedWidth,
      axisScale: this.layout === 'vertical' ? this.y : this.y0,
      left: true,
      wrapLabel: this.wrapLabel ? this.padding.left || 100 : '',
      format: this.yAxis.format,
      tickInterval: this.yAxis.tickInterval,
      label: this.yAxis.label,
      padding: this.padding,
      hide: !this.innerYAxis.visible,
      duration: this.duration
    });
  }
  setXAxisAccessibility() {
    setAccessXAxis({
      rootEle: this.clusteredBarChartEl,
      hasXAxis: this.innerXAxis ? this.innerXAxis.visible : false,
      xAxis: this.layout === 'vertical' ? this.x0 || false : this.x || false,
      xAxisLabel: this.xAxis.label ? this.xAxis.label : '' // this is optional for some charts, if hasXAxis is always false
    });
  }
  setYAxisAccessibility() {
    setAccessYAxis({
      rootEle: this.clusteredBarChartEl,
      hasYAxis: this.innerYAxis ? this.innerYAxis.visible : false,
      yAxis: this.layout === 'vertical' ? this.y || false : this.y0 || false,
      yAxisLabel: this.yAxis.label ? this.yAxis.label : '' // this is optional for some charts, if hasXAxis is always false
    });
  }
  drawBaseline() {
    drawAxis({
      root: this.rootG,
      height: this.innerPaddedHeight,
      width: this.innerPaddedWidth,
      axisScale: this.layout === 'vertical' ? this.x0 : this.x,
      left: false,
      padding: this.padding,
      markOffset: this.layout === 'vertical' ? this.y(0) || -1 : this.y0(0) || -1,
      hide: !(this.layout === 'vertical'),
      duration: this.duration
    });
    drawAxis({
      root: this.rootG,
      height: this.innerPaddedHeight,
      width: this.innerPaddedWidth,
      axisScale: this.layout === 'vertical' ? this.y : this.y0,
      left: true,
      padding: this.padding,
      markOffset: this.layout === 'vertical' ? this.x0(0) || -1 : this.x(0) || -1,
      hide: this.layout === 'vertical',
      duration: this.duration
    });
  }
  // dashed line grid for chart
  drawXGrid() {
    drawGrid(this.gridG, this.innerPaddedHeight, this.innerPaddedWidth, this.layout === 'vertical' ? this.x0 : this.x, false, !this.innerXAxis.gridVisible, this.xAxis.tickInterval, this.duration);
  }
  drawYGrid() {
    drawGrid(this.gridG, this.innerPaddedHeight, this.innerPaddedWidth, this.layout === 'vertical' ? this.y : this.y0, true, !this.innerYAxis.gridVisible, this.yAxis.tickInterval, this.duration);
  }
  setGlobalSelections() {
    const dataBoundToWrappers = this.barG.selectAll('.clustered-bar-wrapper').data(this.nest, d => d.key);
    this.enterBarWrappers = dataBoundToWrappers.enter().append('g');
    this.exitBarWrappers = dataBoundToWrappers.exit();
    this.updateBarWrappers = dataBoundToWrappers.merge(this.enterBarWrappers);
    const dataBoundToGeometries = this.updateBarWrappers
      .selectAll('.clustered-bar')
      .data(d => d.values, d => d[this.ordinalAccessor]);
    this.enter = dataBoundToGeometries.enter().append('rect');
    this.exit = dataBoundToGeometries.exit();
    this.update = dataBoundToGeometries.merge(this.enter);
    this.enterSize = this.enter.size();
    this.exitSize = this.exit.size();
    const dataBoundToLabelWrappers = this.labelG.selectAll('g').data(this.nest, d => d.key);
    this.enterLabelWrappers = dataBoundToLabelWrappers.enter().append('g');
    this.exitLabelWrappers = dataBoundToLabelWrappers.exit();
    this.updateLabelWrappers = dataBoundToLabelWrappers.merge(this.enterLabelWrappers);
    const dataBoundToLabels = this.updateLabelWrappers
      .selectAll('text')
      .data(d => d.values, d => d[this.ordinalAccessor]);
    this.enterLabels = dataBoundToLabels.enter().append('text');
    this.exitLabels = dataBoundToLabels.exit();
    this.updateLabels = dataBoundToLabels.merge(this.enterLabels);
    // this.labels
  }
  enterGeometries() {
    this.enter.interrupt();
    const ordinalAxis = this.layout === 'vertical' ? 'x' : 'y';
    const ordinalDimension = this.layout === 'vertical' ? 'width' : 'height';
    const valueAxis = this.layout === 'vertical' ? 'y' : 'x';
    const valueDimension = this.layout === 'vertical' ? 'height' : 'width';
    const choice = this.layout === 'vertical' ? 'max' : 'min';
    this.enterBarWrappers
      .attr('class', 'clustered-bar-wrapper')
      .classed('entering', true)
      .attr('transform', d => this.layout === 'vertical' ? 'translate(' + this.x0(d.key) + ',0)' : 'translate(0,' + this.y0(d.key) + ')')
      .each((_, i, n) => {
      initializeElementAccess(n[i]);
    });
    this.enter
      .attr('class', 'clustered-bar')
      .attr('cursor', !this.suppressEvents ? this.cursor : null)
      .attr('rx', this.roundedCorner)
      .attr('ry', this.roundedCorner)
      .each((_d, i, n) => {
      initializeElementAccess(n[i]);
    })
      .on('click', !this.suppressEvents ? (d, i, n) => this.onClickHandler(d, n[i]) : null)
      .on('mouseover', !this.suppressEvents ? (d, i, n) => this.onHoverHandler(d, n[i]) : null)
      .on('mouseout', !this.suppressEvents ? () => this.onMouseOutHandler() : null)
      .attr('fill', (d, i) => {
      const clicked = this.clickHighlight &&
        this.clickHighlight.length > 0 &&
        checkClicked(d, this.clickHighlight, this.innerInteractionKeys);
      const hovered = this.hoverHighlight && checkHovered(d, this.hoverHighlight, this.innerInteractionKeys);
      const baseColor = this.colorArr[i];
      return clicked && this.clickStyle.color
        ? visaColors[this.clickStyle.color] || this.clickStyle.color
        : clicked
          ? baseColor
          : hovered && this.hoverStyle.color
            ? visaColors[this.hoverStyle.color] || this.hoverStyle.color
            : baseColor;
    })
      .attr('opacity', 0)
      .attr(valueAxis, d => this[valueAxis](Math[choice](0, d[this.valueAccessor])))
      .attr(valueDimension, d => Math.abs(this.layout === 'vertical'
      ? this[valueAxis](0) - this[valueAxis](d[this.valueAccessor])
      : this[valueAxis](d[this.valueAccessor]) - this[valueAxis](0)))
      .attr(ordinalAxis, d => this[ordinalAxis + '1'](d[this.ordinalAccessor]))
      .attr(ordinalDimension, this[ordinalAxis + '1'].bandwidth());
    if (!this.defaults) {
      this.enter
        .classed('entering', true)
        .attr(ordinalAxis, (d, i, n) => {
        const p = select(n[i].parentNode);
        const groupEntering = p.classed('entering');
        let xStart = groupEntering
          ? this[ordinalAxis + '0'](p.datum().key)
          : this[ordinalAxis + '1'](d[this.ordinalAccessor]);
        const xCenter = groupEntering
          ? this[ordinalAxis + '0'].bandwidth() / 2
          : this[ordinalAxis + '1'].bandwidth() / 2;
        const xPercent = (xStart + xCenter) / (this.innerPaddedWidth / 2);
        xStart = groupEntering ? 0 : xStart;
        const shift = xStart + xCenter * xPercent;
        return shift;
      })
        .attr(ordinalDimension, 0);
    }
    this.enterBarWrappers.order();
    this.enter.order();
  }
  updateGeometries() {
    this.update.interrupt();
    this.update
      .transition('opacity')
      .duration((_, i, n) => {
      if (select(n[i]).classed('entering')) {
        select(n[i]).classed('entering', false);
        return this.duration;
      }
      return 0;
    })
      .ease(easeCircleIn)
      .attr('opacity', d => checkInteraction(d, 1, this.hoverOpacity, this.hoverHighlight, this.clickHighlight, this.innerInteractionKeys));
  }
  exitGeometries() {
    this.exitBarWrappers.interrupt();
    this.exit.interrupt();
    const axisOfShift = this.layout === 'vertical' ? 'x' : 'y';
    const dimensionOfShift = this.layout === 'vertical' ? 'width' : 'height';
    const innerPaddedDimension = 'innerPadded' + dimensionOfShift[0].toUpperCase() + dimensionOfShift.substring(1);
    this.exit
      .transition('exit')
      .duration(this.duration)
      .ease(easeCircleIn)
      .attr('opacity', 0)
      .attr(axisOfShift, (_d, i, n) => {
      const self = select(n[i]);
      let shift = +self.attr(axisOfShift) + +self.attr(dimensionOfShift) / 2;
      shift =
        +self.attr(axisOfShift) + (+self.attr(dimensionOfShift) / 2) * (shift / (this[innerPaddedDimension] / 2));
      return shift;
    })
      .attr(dimensionOfShift, 0);
    this.exitSize += this.exitBarWrappers.selectAll('.clustered-bar').size();
    this.exitBarWrappers
      .selectAll('.clustered-bar')
      .transition('exit_wrappers')
      .duration(this.duration * 0.75)
      .ease(easeCircleIn)
      .attr('opacity', 0)
      .attr(axisOfShift, (_, i, n) => {
      const p = n[i].parentNode;
      const xStart = p.transform.baseVal.consolidate().matrix.e;
      const xCenter = this[axisOfShift + '0'].bandwidth() / 2;
      const xPercent = (xStart + xCenter) / (this[innerPaddedDimension] / 2);
      const shift = xCenter * xPercent;
      return shift;
    })
      .attr(dimensionOfShift, 0);
    this.update
      .transition('accessibilityAfterExit')
      .duration(this.duration)
      .ease(easeCircleIn)
      .call(transitionEndAll, () => {
      // before we exit geometries, we need to check if a focus exists or not
      const focusDidExist = checkAccessFocus(this.rootG.node());
      // then we must remove the exiting elements
      this.exit.remove();
      this.exitBarWrappers.remove();
      // then our util can count geometries
      this.setChartCountAccessibility();
      // our group's label should update with new counts too
      this.setGroupAccessibilityID();
      // since items exited, labels must receive updated values
      this.setGeometryAriaLabels();
      // and also make sure the user's focus isn't lost
      retainAccessFocus({
        parentGNode: this.rootG.node(),
        focusDidExist
        // recursive: true
      });
    });
  }
  drawGeometries() {
    const ordinalAxis = this.layout === 'vertical' ? 'x' : 'y';
    const ordinalDimension = this.layout === 'vertical' ? 'width' : 'height';
    const valueAxis = this.layout === 'vertical' ? 'y' : 'x';
    const valueDimension = this.layout === 'vertical' ? 'height' : 'width';
    const choice = this.layout === 'vertical' ? 'max' : 'min';
    this.updateBarWrappers
      .transition('update')
      .duration(this.duration)
      .ease(easeCircleIn)
      .attr('transform', d => this.layout === 'vertical' ? 'translate(' + this.x0(d.key) + ',0)' : 'translate(0,' + this.y0(d.key) + ')')
      .call(transitionEndAll, () => {
      this.updateBarWrappers.classed('entering', false);
    });
    this.update
      .classed('geometryIsMoving', (d, i, n) => {
      const geometryIsUpdating = checkAttributeTransitions(select(n[i]), [
        {
          attr: ordinalAxis,
          numeric: true,
          newValue: this[ordinalAxis + '1'](d[this.ordinalAccessor])
        },
        {
          attr: ordinalDimension,
          numeric: true,
          newValue: this[ordinalAxis + '1'].bandwidth()
        },
        {
          attr: valueAxis,
          numeric: true,
          newValue: this[valueAxis](Math[choice](0, d[this.valueAccessor])) // this.y(d[this.valueAccessor]))
        },
        {
          attr: valueDimension,
          numeric: true,
          newValue: Math.abs(this.layout === 'vertical'
            ? this[valueAxis](0) - this[valueAxis](d[this.valueAccessor])
            : this[valueAxis](d[this.valueAccessor]) - this[valueAxis](0))
        }
      ]);
      return geometryIsUpdating;
    })
      .attr(`data-${ordinalAxis}`, d => this.layout === 'vertical'
      ? this[ordinalAxis + '1'](d[this.ordinalAccessor]) //+ this.x0(d[this.groupAccessor])
      : this[ordinalAxis + '1'](d[this.ordinalAccessor]) //+ this.y0(d[this.groupAccessor])
    )
      .attr(`data-translate-x`, d => (this.layout === 'vertical' ? this.x0(d[this.groupAccessor]) : 0) + this.padding.left + this.margin.left)
      .attr(`data-translate-y`, d => (this.layout === 'vertical' ? 0 : this.y0(d[this.groupAccessor])) + this.padding.top + this.margin.top)
      .attr(`data-${ordinalDimension}`, this[ordinalAxis + '1'].bandwidth())
      .attr(`data-${valueAxis}`, d => this[valueAxis](Math[choice](0, d[this.valueAccessor])))
      .attr(`data-${valueDimension}`, d => Math.abs(this.layout === 'vertical'
      ? this[valueAxis](0) - this[valueAxis](d[this.valueAccessor])
      : this[valueAxis](d[this.valueAccessor]) - this[valueAxis](0)))
      .transition('update')
      .duration((_, i, n) => {
      return select(n[i]).classed('entering') ? this.duration / 2 : this.duration;
    })
      .delay((_, i, n) => {
      return select(n[i]).classed('entering') ? this.duration / 2 : 0;
    })
      .ease(easeCircleIn)
      .attr(valueAxis, d => this[valueAxis](Math[choice](0, d[this.valueAccessor])))
      .attr(valueDimension, d => Math.abs(this.layout === 'vertical'
      ? this[valueAxis](0) - this[valueAxis](d[this.valueAccessor])
      : this[valueAxis](d[this.valueAccessor]) - this[valueAxis](0)))
      .attr(ordinalAxis, d => this[ordinalAxis + '1'](d[this.ordinalAccessor]))
      .attr(ordinalDimension, this[ordinalAxis + '1'].bandwidth())
      .call(transitionEndAll, () => {
      this.update.classed('geometryIsMoving', false);
      this.updateInteractionState();
      this.checkLabelColorAgainstBackground();
      // we must make sure if geometries move, that our focus indicator does too
      retainAccessFocus({
        parentGNode: this.rootG.node()
      });
      // now we can emit the event that transitions are complete
      this.transitionEndEvent.emit({ chartID: this.chartID });
    });
  }
  updateInteractionState() {
    removeHoverStrokes(this.svg.node());
    // we created an "opacity" transition namespace in update's transition
    // we override it here to instantly display opacity state (below)
    this.update.interrupt('opacity');
    // we use this.update and this.updateLabels from setGlobalSelection here
    // the lifecycle state does not matter (enter/update/exit)
    // since interaction state can happen at any time
    // first we address interaction state on marks/bars
    this.update
      .attr('opacity', d => checkInteraction(d, 1, this.hoverOpacity, this.hoverHighlight, this.clickHighlight, this.innerInteractionKeys))
      .attr('fill', (d, i) => {
      const clicked = this.clickHighlight &&
        this.clickHighlight.length > 0 &&
        checkClicked(d, this.clickHighlight, this.innerInteractionKeys);
      const hovered = this.hoverHighlight && checkHovered(d, this.hoverHighlight, this.innerInteractionKeys);
      const baseColor = this.colorArr[i];
      return clicked && this.clickStyle.color
        ? visaColors[this.clickStyle.color] || this.clickStyle.color
        : clicked
          ? baseColor
          : hovered && this.hoverStyle.color
            ? visaColors[this.hoverStyle.color] || this.hoverStyle.color
            : baseColor;
    })
      .attr('filter', (d, i, n) => {
      if (!this.accessibility.hideStrokes && !select(n[i]).classed('geometryIsMoving')) {
        const clicked = this.clickHighlight &&
          this.clickHighlight.length > 0 &&
          checkClicked(d, this.clickHighlight, this.innerInteractionKeys);
        const hovered = this.hoverHighlight && checkHovered(d, this.hoverHighlight, this.innerInteractionKeys);
        const baseColor = this.preparedColors[i];
        const state = clicked ? 'click' : hovered && !select(n[i]).classed('geometryIsMoving') ? 'hover' : 'rest';
        const color = clicked && this.clickStyle.color
          ? visaColors[this.clickStyle.color] || this.clickStyle.color
          : clicked
            ? baseColor
            : hovered && this.hoverStyle.color
              ? visaColors[this.hoverStyle.color] || this.hoverStyle.color
              : baseColor;
        if (state === 'hover') {
          drawHoverStrokes({
            inputElement: n[i],
            id: this.chartID,
            key: d[this.ordinalAccessor] + d[this.groupAccessor],
            strokeWidth: this.hoverStyle.strokeWidth,
            fill: color
          });
        }
        return this.strokes[state + color];
      }
      return null;
    });
    retainAccessFocus({
      parentGNode: this.rootG.node()
    });
    // then we set the legend interactive state
    setLegendInteractionState({
      root: this.legendG,
      uniqueID: this.chartID,
      interactionKeys: this.innerInteractionKeys,
      groupAccessor: this.ordinalAccessor,
      hoverHighlight: this.hoverHighlight,
      clickHighlight: this.clickHighlight,
      hoverStyle: this.hoverStyle,
      clickStyle: this.clickStyle,
      hoverOpacity: this.hoverOpacity
    });
    // and lastly we have to check for labels, especially when auto placement is in place
    this.updateLabels.interrupt('opacity');
    const addCollisionClass = this.dataLabel.placement === 'auto' || this.dataLabel.collisionHideOnly;
    const hideOnly = this.dataLabel.placement !== 'auto' && this.dataLabel.collisionHideOnly;
    this.processLabelOpacity(this.updateLabels, addCollisionClass);
    // if we have collision on, we need to update the bitmap on interaction
    if (addCollisionClass) {
      const labelsAdded = this.updateLabels.filter((_, i, n) => select(n[i]).classed('collision-added'));
      const labelsRemoved = this.updateLabels
        .filter((_, i, n) => select(n[i]).classed('collision-removed'))
        .attr('data-use-dx', hideOnly) // need to add this for remove piece of collision below
        .attr('data-use-dy', hideOnly); // .transition().duration(0);
      // we can now remove labels as well if we need to...
      if (labelsRemoved.size() > 0) {
        this.bitmaps = resolveLabelCollision({
          bitmaps: this.bitmaps,
          labelSelection: labelsRemoved,
          avoidMarks: [],
          validPositions: ['middle'],
          offsets: [1],
          accessors: ['key'],
          size: [roundTo(this.width, 0), roundTo(this.height, 0)],
          hideOnly: false,
          removeOnly: true
        });
        // remove temporary class now
        labelsRemoved.classed('collision-removed', false);
      }
      // we can now add labels as well if we need to...
      if (labelsAdded.size() > 0) {
        this.processLabelPosition(labelsAdded, false, false, true);
        // remove temporary class now
        labelsAdded.classed('collision-added', false);
      }
    }
  }
  setLabelOpacity() {
    this.processLabelOpacity(this.updateLabels);
  }
  processLabelOpacity(selection, addCollisionClass) {
    const opacity = this.dataLabel.visible ? 1 : 0;
    const ordinalAxis = this.layout === 'vertical' ? 'x' : 'y';
    const ordinalDimension = this.layout === 'vertical' ? 'width' : 'height';
    const valueAxis = this.layout === 'vertical' ? 'y' : 'x';
    const valueDimension = this.layout === 'vertical' ? 'height' : 'width';
    const fullBandwidth = this[ordinalAxis + '0'].bandwidth() / this.nest[0].values.length;
    selection.attr('opacity', (d, i, n) => {
      const prevOpacity = +select(n[i]).attr('opacity');
      const styleVisibility = select(n[i]).style('visibility');
      const dimensions = {};
      dimensions[ordinalDimension] =
        this.dataLabel.placement === 'left' || this.dataLabel.placement === 'bottom'
          ? this[ordinalAxis + '1'].bandwidth()
          : fullBandwidth;
      if (this.dataLabel.placement === 'left' || this.dataLabel.placement === 'bottom') {
        dimensions[valueDimension] = Math.abs(this.layout === 'vertical'
          ? this[valueAxis](0) - this[valueAxis](d[this.valueAccessor])
          : this[valueAxis](d[this.valueAccessor]) - this[valueAxis](0));
      }
      const hasRoom = this.dataLabel.placement === 'auto' ||
        this.dataLabel.collisionHideOnly ||
        this.accessibility.showSmallLabels ||
        verifyTextHasSpace({
          text: formatDataLabel(d, this.innerLabelAccessor, this.dataLabel.format),
          dimensions,
          fontSize: 14
        });
      const targetOpacity = hasRoom
        ? checkInteraction(d, opacity, this.hoverOpacity, this.hoverHighlight, this.clickHighlight, this.innerInteractionKeys) < 1
          ? 0
          : 1
        : 0;
      if (((targetOpacity === 1 && styleVisibility === 'hidden') || prevOpacity !== targetOpacity) &&
        addCollisionClass) {
        if (targetOpacity === 1) {
          select(n[i])
            .classed('collision-added', true)
            .style('visibility', null);
        }
        else {
          select(n[i]).classed('collision-removed', true);
        }
      }
      return targetOpacity;
    });
  }
  checkLabelColorAgainstBackground() {
    this.updateLabels.attr('fill', (d, i, n) => {
      return this.textTreatmentHandler(d, i, n);
    });
  }
  setRoundedCorners() {
    this.update
      .transition('corners')
      .duration(this.duration)
      .ease(easeCircleIn)
      .attr('rx', this.roundedCorner)
      .attr('ry', this.roundedCorner);
  }
  setSelectedClass() {
    this.update.classed('highlight', (d, i, n) => {
      let selected = checkInteraction(d, true, false, '', this.clickHighlight, this.innerInteractionKeys);
      selected = this.clickHighlight && this.clickHighlight.length ? selected : false;
      const selectable = this.accessibility.elementsAreInterface;
      setElementInteractionAccessState(n[i], selected, selectable);
      return selected;
    });
  }
  updateCursor() {
    this.update.attr('cursor', !this.suppressEvents ? this.cursor : null);
    this.updateLabels.attr('cursor', !this.suppressEvents ? this.cursor : null);
  }
  enterDataLabels() {
    const ordinalAxis = this.layout === 'vertical' ? 'x' : 'y';
    const opacity = this.dataLabel.visible ? 1 : 0;
    this.enterLabelWrappers
      .attr('class', 'clustered-bar-label-wrapper')
      .classed('entering', true)
      .attr('transform', d => this.layout === 'vertical' ? 'translate(' + this.x0(d.key) + ',0)' : 'translate(0,' + this.y0(d.key) + ')');
    this.enterLabels
      .attr('class', 'clustered-bar-dataLabel')
      .classed('entering', true)
      .classed('clustered-bar-dataLabel-horizontal', false)
      .classed('clustered-bar-dataLabel-vertical', false)
      .classed('clustered-bar-dataLabel-' + this.layout, true)
      .attr('cursor', !this.suppressEvents ? this.cursor : null)
      .attr('opacity', d => checkInteraction(d, opacity, this.hoverOpacity, this.hoverHighlight, this.clickHighlight, this.innerInteractionKeys) < 1
      ? 0
      : Number.EPSILON)
      .attr('fill', this.textTreatmentHandler)
      .on('click', !this.suppressEvents ? (d, i, n) => this.onClickHandler(d, n[i]) : null)
      .on('mouseover', !this.suppressEvents ? (d, i, n) => this.onHoverHandler(d, n[i]) : null)
      .on('mouseout', !this.suppressEvents ? () => this.onMouseOutHandler() : null);
    this.enterLabels.attr(ordinalAxis, (d, i, n) => {
      const zeroScale = ordinalAxis + '0';
      const oneScale = ordinalAxis + '1';
      const breadth = ordinalAxis === 'x' ? 'innerPaddedWidth' : 'innerPaddedHeight';
      const p = select(n[i].parentNode);
      const groupEntering = p.classed('entering');
      let xStart = groupEntering ? this[zeroScale](p.datum().key) : this[oneScale](d[this.ordinalAccessor]);
      const xCenter = groupEntering ? this[zeroScale].bandwidth() / 2 : this[oneScale].bandwidth() / 2;
      const xPercent = (xStart + xCenter) / (this[breadth] / 2);
      xStart = groupEntering ? 0 : xStart;
      const shift = xStart + xCenter * xPercent;
      return shift;
    });
  }
  updateDataLabels() {
    this.updateLabels.interrupt();
    const opacity = this.dataLabel.visible ? 1 : 0;
    this.updateLabels
      .transition('opacity')
      .duration((_, i, n) => {
      if (select(n[i]).classed('entering')) {
        // select(n[i]).classed('entering', false);
        return this.duration / 4;
      }
      return 0;
    })
      .delay((_, i, n) => {
      if (select(n[i]).classed('entering')) {
        // select(n[i]).classed('entering', false);
        return (this.duration / 4) * 3;
      }
      return 0;
    })
      .ease(easeCircleIn)
      .attr('opacity', d => checkInteraction(d, opacity, this.hoverOpacity, this.hoverHighlight, this.clickHighlight, this.innerInteractionKeys) < 1
      ? 0
      : 1)
      .call(transitionEndAll, () => {
      this.updateLabels.classed('entering', false);
      // this.checkLabelColorAgainstBackground();
    });
  }
  exitDataLabels() {
    this.exitLabelWrappers
      .selectAll('text')
      .transition('exit')
      .ease(easeCircleIn)
      .duration(this.duration / 3)
      .attr('opacity', 0)
      .call(transitionEndAll, () => {
      this.exitLabelWrappers.remove();
    });
    this.exitLabels
      .transition('exit')
      .ease(easeCircleIn)
      .duration(this.duration / 3)
      .attr('opacity', 0)
      .remove();
  }
  setLabelContent() {
    this.updateLabels.text(d => formatDataLabel(d, this.innerLabelAccessor, this.dataLabel.format));
  }
  setLabelPosition() {
    // position the label wrappers with/without transition
    this.updateLabelWrappers
      .classed('clustered-bar-dataLabel-horizontal', false)
      .classed('clustered-bar-dataLabel-vertical', false)
      .classed('clustered-bar-dataLabel-' + this.layout, true);
    const changeLabelWrappers = prepareRenderChange({
      selection: this.updateLabelWrappers,
      duration: this.duration,
      namespace: 'position-label-wrappers',
      easing: easeCircleIn
    });
    changeLabelWrappers
      .attr('transform', d => this.layout === 'vertical' ? 'translate(' + this.x0(d.key) + ',0)' : 'translate(0,' + this.y0(d.key) + ')')
      .call(transitionEndAll, () => {
      this.updateLabelWrappers.classed('entering', false);
    });
    // we have to run this filter as there are times when enter/update will one another's nodes in them.
    const enteringOnly = this.enterLabels.filter((_, i, n) => {
      return select(n[i]).classed('entering');
    });
    const updatingOnly = this.updateLabels.filter((_, i, n) => {
      return !select(n[i]).classed('entering');
    });
    // if we have enter and update we need to process them separately
    // enter with no transition, update with transition
    // the transition is the main reason we need to do this.
    if (enteringOnly.size() > 0) {
      this.processLabelPosition(enteringOnly, false, true, false);
      this.processLabelPosition(updatingOnly, true, false, true);
    }
    else {
      // otherwise we can just process update and do it all in one step with transition
      // doing this all at once saves processing time from calling resolveLabelCollision less
      this.processLabelPosition(updatingOnly, true, true, false);
    }
  }
  processLabelPosition(selection, runTransition, redrawBitmap, suppressMarkDraw) {
    const ordinalAxis = this.layout === 'vertical' ? 'x' : 'y';
    const ordinalDimension = this.layout === 'vertical' ? 'width' : 'height';
    const valueAxis = this.layout === 'vertical' ? 'y' : 'x';
    const valueDimension = this.layout === 'vertical' ? 'height' : 'width';
    const choice = this.layout === 'vertical' ? 'max' : 'min';
    const hideOnly = this.dataLabel.placement !== 'auto' && this.dataLabel.collisionHideOnly;
    let textHeight = 15; // default label is usually 15
    const collisionSettings = {
      vertical: {
        top: {
          validPositions: ['top', 'bottom'],
          offsets: [4, 1]
        },
        middle: {
          validPositions: ['middle', 'top'],
          offsets: [1, textHeight / 2]
        },
        bottom: {
          validPositions: ['middle', 'top'],
          offsets: [1, textHeight / 2]
        }
      },
      horizontal: {
        right: {
          validPositions: ['right', 'left'],
          offsets: [4, 8]
        },
        middle: {
          validPositions: ['middle', 'right'],
          offsets: [1, 15]
        },
        left: {
          validPositions: ['left', 'right'],
          offsets: [1, 20]
        }
      }
    };
    const collisionPlacement = this.dataLabel && this.dataLabel.collisionPlacement;
    const boundsScope = collisionPlacement && collisionSettings[this.layout][collisionPlacement] // check whether placement provided maps correctly
      ? this.dataLabel.collisionPlacement
      : this.layout === 'vertical'
        ? 'top' // if we don't have collisionPlacement
        : 'right';
    // prep the data- attributes for label collision algorithm
    // only needs to be run if we are running collision though
    selection
      .style('visibility', (_, i, n) => this.dataLabel.placement === 'auto' || this.dataLabel.collisionHideOnly
      ? select(n[i]).style('visibility')
      : null)
      .attr(`data-${ordinalAxis}`, (d, i, n) => {
      if (i === 0) {
        // we just need to check this on one element
        const textElement = n[i];
        const style = getComputedStyle(textElement);
        const fontSize = parseFloat(style.fontSize);
        textHeight = Math.max(fontSize - 1, 1); // clone.getBBox().height;
      }
      return this[ordinalAxis + '1'](d[this.ordinalAccessor]);
    })
      .attr(`data-translate-x`, d => (this.layout === 'vertical' ? this.x0(d[this.groupAccessor]) : 0) + this.padding.left + this.margin.left)
      .attr(`data-translate-y`, d => (this.layout === 'vertical' ? 0 : this.y0(d[this.groupAccessor])) + this.padding.top + this.margin.top)
      .attr(`data-${ordinalDimension}`, this[ordinalAxis + '1'].bandwidth())
      .attr(`data-${valueAxis}`, d => this[valueAxis](Math[choice](0, d[this.valueAccessor])))
      .attr(`data-${valueDimension}`, d => Math.abs(this.layout === 'vertical'
      ? this[valueAxis](0) - this[valueAxis](d[this.valueAccessor])
      : this[valueAxis](d[this.valueAccessor]) - this[valueAxis](0)));
    // we use prepareRenderChange to use or not use .transition()
    // immediate - label enter and interaction effects
    // transition - update effects (e.g., data change)
    const changeLabels = prepareRenderChange({
      selection: selection,
      duration: !runTransition ? 0 : this.duration,
      namespace: 'position-labels',
      easing: easeCircleIn
    });
    this.bitmaps = placeDataLabels({
      root: changeLabels,
      xScale: this.layout === 'vertical' ? this.x1 : this.x,
      yScale: this.layout === 'vertical' ? this.y : this.y1,
      ordinalAccessor: this.ordinalAccessor,
      valueAccessor: this.valueAccessor,
      placement: this.dataLabel.placement,
      layout: this.layout,
      chartType: 'bar',
      avoidCollision: {
        runOccupancyBitmap: this.dataLabel.visible && this.dataLabel.placement === 'auto',
        bitmaps: !redrawBitmap ? this.bitmaps : undefined,
        labelSelection: changeLabels,
        avoidMarks: [this.update],
        validPositions: hideOnly ? ['middle'] : collisionSettings[this.layout][boundsScope].validPositions,
        offsets: hideOnly ? [1] : collisionSettings[this.layout][boundsScope].offsets,
        accessors: [this.groupAccessor, this.ordinalAccessor, 'key'],
        size: [roundTo(this.width, 0), roundTo(this.height, 0)],
        boundsScope: hideOnly ? undefined : boundsScope,
        hideOnly: this.dataLabel.visible && this.dataLabel.collisionHideOnly,
        suppressMarkDraw: suppressMarkDraw
      }
    });
  }
  drawReferenceLines() {
    const currentReferences = this.references.selectAll('g').data(this.referenceLines, d => d.label);
    const enterReferences = currentReferences
      .enter()
      .append('g')
      .attr('class', 'clustered-bar-reference')
      .attr('opacity', 1);
    const enterLines = enterReferences.append('line');
    enterLines
      // .attr('id', (_, i) => 'reference-line-' + i)
      .attr('class', 'clustered-bar-reference-line')
      .attr('opacity', 0);
    const enterLabels = enterReferences.append('text');
    enterLabels
      // .attr('id', (_, i) => 'reference-line-' + i + '-label')
      .attr('class', 'clustered-bar-reference-line-label')
      .attr('opacity', 0);
    const mergeReferences = currentReferences.merge(enterReferences);
    const mergeLines = mergeReferences
      .selectAll('.clustered-bar-reference-line')
      .data(d => [d])
      .transition('merge')
      .ease(easeCircleIn)
      .duration(this.duration);
    const mergeLabels = mergeReferences
      .selectAll('.clustered-bar-reference-line-label')
      .data(d => [d])
      .transition('merge')
      .ease(easeCircleIn)
      .duration(this.duration)
      .text(d => d.label);
    const exitReferences = currentReferences.exit();
    exitReferences
      .transition('exit')
      .ease(easeCircleIn)
      .duration(this.duration)
      .attr('opacity', 0)
      .remove();
    if (this.layout === 'vertical') {
      enterReferences.attr('transform', d => {
        return 'translate(0,' + this.y(d.value) + ')';
      });
      mergeReferences
        .transition('merge')
        .ease(easeCircleIn)
        .duration(this.duration)
        .attr('transform', d => {
        return 'translate(0,' + this.y(d.value) + ')';
      });
      enterLines
        .attr('x1', 0)
        .attr('y1', 0)
        .attr('y2', 0)
        .attr('x2', this.innerPaddedWidth);
      enterLabels
        .attr('text-anchor', d => ((d.labelPlacementHorizontal || 'right') === 'right' ? 'start' : 'end'))
        .attr('x', d => ((d.labelPlacementHorizontal || 'right') === 'right' ? this.innerPaddedWidth : 0))
        .attr('y', 0)
        .attr('dx', d => ((d.labelPlacementHorizontal || 'right') === 'right' ? '0.1em' : '-0.1em'))
        .attr('dy', '0.3em');
      mergeLines
        .attr('x1', 0)
        .attr('y1', 0)
        .attr('y2', 0)
        .attr('x2', this.innerPaddedWidth);
      mergeLabels
        .attr('text-anchor', d => ((d.labelPlacementHorizontal || 'right') === 'right' ? 'start' : 'end'))
        .attr('x', d => ((d.labelPlacementHorizontal || 'right') === 'right' ? this.innerPaddedWidth : 0))
        .attr('y', 0)
        .attr('dx', d => ((d.labelPlacementHorizontal || 'right') === 'right' ? '0.1em' : '-0.1em'))
        .attr('dy', '0.3em');
    }
    else if (this.layout === 'horizontal') {
      enterReferences.attr('transform', d => {
        return 'translate(' + this.x(d.value) + ',0)';
      });
      mergeReferences
        .transition('merge')
        .ease(easeCircleIn)
        .duration(this.duration)
        .attr('transform', d => {
        return 'translate(' + this.x(d.value) + ',0)';
      });
      enterLines
        .attr('x1', 0)
        .attr('y1', this.innerPaddedHeight)
        .attr('x2', 0)
        .attr('y2', 0);
      mergeLines
        .attr('x1', 0)
        .attr('y1', this.innerPaddedHeight)
        .attr('x2', 0)
        .attr('y2', 0);
      enterLabels
        .attr('text-anchor', 'middle')
        .attr('x', 0)
        .attr('y', d => ((d.labelPlacementVertical || 'top') === 'top' ? 0 : this.innerPaddedHeight))
        .attr('dx', 0)
        .attr('dy', d => ((d.labelPlacementVertical || 'top') === 'top' ? '-0.3em' : '1em'));
      mergeLabels
        .attr('text-anchor', 'middle')
        .attr('x', 0)
        .attr('y', d => {
        return (d.labelPlacementVertical || 'top') === 'top' ? 0 : this.innerPaddedHeight;
      })
        .attr('dx', 0)
        .attr('dy', d => ((d.labelPlacementVertical || 'top') === 'top' ? '-0.3em' : '1em'));
    }
    mergeLines
      .style('stroke', visaColors[this.referenceStyle.color] || this.referenceStyle.color)
      .style('stroke-width', this.referenceStyle.strokeWidth)
      .attr('stroke-dasharray', this.referenceStyle.dashed ? this.referenceStyle.dashed : '')
      .attr('opacity', this.referenceStyle.opacity);
    mergeLabels.style('fill', visaColors[this.referenceStyle.color] || this.referenceStyle.color).attr('opacity', 1);
  }
  prepareLegendData() {
    this.legendData = this.nest[0].values;
  }
  drawLegendElements() {
    drawLegend({
      root: this.legendG,
      uniqueID: this.chartID,
      width: this.innerPaddedWidth,
      height: this.margin.top + 20,
      colorArr: this.colorArr,
      baseColorArr: this.preparedColors,
      hideStrokes: this.accessibility.hideStrokes,
      margin: this.margin,
      padding: this.padding,
      duration: this.duration,
      type: 'bar',
      fontSize: 16,
      data: this.legendData,
      labelKey: this.ordinalAccessor,
      label: this.legend.labels,
      hide: !this.legend.visible,
      interactionKeys: this.innerInteractionKeys,
      groupAccessor: this.ordinalAccessor,
      hoverHighlight: this.hoverHighlight,
      clickHighlight: this.clickHighlight,
      hoverStyle: this.hoverStyle,
      clickStyle: this.clickStyle,
      hoverOpacity: this.hoverOpacity
    });
  }
  bindLegendInteractivity() {
    select(this.clusteredBarChartEl)
      .selectAll('.legend')
      .style('cursor', this.legend.interactive && !this.suppressEvents ? this.cursor : '')
      .on('click', this.legend.interactive && !this.suppressEvents ? (d, i, n) => this.onClickHandler(d, n[i]) : null)
      .on('mouseover', this.legend.interactive && !this.suppressEvents
      ? (d, i, n) => {
        this.hoverEvent.emit({ data: d, target: n[i] });
      }
      : null)
      .on('mouseout', this.legend.interactive && !this.suppressEvents ? () => this.onMouseOutHandler() : null);
  }
  setLegendCursor() {
    select(this.clusteredBarChartEl)
      .selectAll('.legend')
      .style('cursor', this.legend.interactive && !this.suppressEvents ? this.cursor : null);
  }
  bindInteractivity() {
    this.update
      .on('click', !this.suppressEvents ? (d, i, n) => this.onClickHandler(d, n[i]) : null)
      .on('mouseover', !this.suppressEvents ? (d, i, n) => this.onHoverHandler(d, n[i]) : null)
      .on('mouseout', !this.suppressEvents ? () => this.onMouseOutHandler() : null);
    this.updateLabels
      .on('click', !this.suppressEvents ? (d, i, n) => this.onClickHandler(d, n[i]) : null)
      .on('mouseover', !this.suppressEvents ? (d, i, n) => this.onHoverHandler(d, n[i]) : null)
      .on('mouseout', !this.suppressEvents ? () => this.onMouseOutHandler() : null);
  }
  drawAnnotations() {
    annotate({
      source: this.rootG.node(),
      data: this.annotations,
      xScale: this.layout !== 'horizontal' ? this.x0 : this.x,
      xAccessor: this.layout !== 'horizontal' ? this.groupAccessor : this.valueAccessor,
      yScale: this.layout !== 'horizontal' ? this.y : this.y0,
      yAccessor: this.layout !== 'horizontal' ? this.valueAccessor : this.groupAccessor,
      width: this.width,
      height: this.height,
      padding: this.padding,
      margin: this.margin,
      bitmaps: this.bitmaps
    });
  }
  setAnnotationAccessibility() {
    setAccessAnnotation(this.clusteredBarChartEl, this.annotations);
  }
  // new accessibility functions added here
  setTagLevels() {
    this.topLevel = findTagLevel(this.highestHeadingLevel);
    this.bottomLevel = findTagLevel(this.highestHeadingLevel, 3);
  }
  setChartDescriptionWrapper() {
    initializeDescriptionRoot({
      rootEle: this.clusteredBarChartEl,
      title: this.accessibility.title || this.mainTitle,
      chartTag: 'clustered-bar-chart',
      uniqueID: this.chartID,
      highestHeadingLevel: this.highestHeadingLevel,
      redraw: this.shouldRedrawWrapper,
      disableKeyNav: this.suppressEvents &&
        this.accessibility.elementsAreInterface === false &&
        this.accessibility.keyboardNavConfig &&
        this.accessibility.keyboardNavConfig.disabled
    });
    this.shouldRedrawWrapper = false;
  }
  setParentSVGAccessibility() {
    setAccessibilityController({
      node: this.svg.node(),
      chartTag: 'clustered-bar-chart',
      title: this.accessibility.title || this.mainTitle,
      description: this.subTitle,
      uniqueID: this.chartID,
      geomType: 'bar',
      includeKeyNames: this.accessibility.includeDataKeyNames,
      dataKeys: scopeDataKeys(this, chartAccessors, 'clustered-bar-chart'),
      groupAccessor: this.groupAccessor,
      groupName: 'cluster',
      disableKeyNav: this.suppressEvents &&
        this.accessibility.elementsAreInterface === false &&
        this.accessibility.keyboardNavConfig &&
        this.accessibility.keyboardNavConfig.disabled
      // groupKeys: [],
      // nested: '',
      // recursive: true
    });
  }
  setGeometryAccessibilityAttributes() {
    this.update.each((_d, i, n) => {
      initializeElementAccess(n[i]);
    });
  }
  setGeometryAriaLabels() {
    const keys = scopeDataKeys(this, chartAccessors, 'clustered-bar-chart');
    this.update.each((_d, i, n) => {
      setElementFocusHandler({
        node: n[i],
        geomType: 'bar',
        includeKeyNames: this.accessibility.includeDataKeyNames,
        dataKeys: keys,
        groupName: 'cluster',
        uniqueID: this.chartID,
        disableKeyNav: this.suppressEvents &&
          this.accessibility.elementsAreInterface === false &&
          this.accessibility.keyboardNavConfig &&
          this.accessibility.keyboardNavConfig.disabled
      });
      setElementAccessID({
        node: n[i],
        uniqueID: this.chartID
      });
    });
  }
  setGroupAccessibilityID() {
    this.updateBarWrappers.each((_, i, n) => {
      setElementAccessID({
        node: n[i],
        uniqueID: this.chartID
      });
    });
  }
  setChartAccessibilityTitle() {
    setAccessTitle(this.clusteredBarChartEl, this.accessibility.title || this.mainTitle);
  }
  setChartAccessibilitySubtitle() {
    setAccessSubtitle(this.clusteredBarChartEl, this.subTitle);
  }
  setChartAccessibilityLongDescription() {
    setAccessLongDescription(this.clusteredBarChartEl, this.accessibility.longDescription);
  }
  setChartAccessibilityExecutiveSummary() {
    setAccessExecutiveSummary(this.clusteredBarChartEl, this.accessibility.executiveSummary);
  }
  setChartAccessibilityPurpose() {
    setAccessPurpose(this.clusteredBarChartEl, this.accessibility.purpose);
  }
  setChartAccessibilityContext() {
    setAccessContext(this.clusteredBarChartEl, this.accessibility.contextExplanation);
  }
  setChartAccessibilityStatisticalNotes() {
    setAccessStatistics(this.clusteredBarChartEl, this.accessibility.statisticalNotes);
  }
  setChartCountAccessibility() {
    setAccessChartCounts({
      rootEle: this.clusteredBarChartEl,
      parentGNode: this.barG.node(),
      chartTag: 'clustered-bar-chart',
      geomType: 'bar',
      groupName: 'cluster'
      // recursive: true
    });
  }
  setChartAccessibilityStructureNotes() {
    setAccessStructure(this.clusteredBarChartEl, this.accessibility.structureNotes);
  }
  // new accessibility stuff ends here
  onChangeHandler() {
    if (this.accessibility && typeof this.accessibility.onChangeFunc === 'function') {
      const d = {
        updated: this.updated,
        added: this.enterSize,
        removed: this.exitSize
      };
      this.accessibility.onChangeFunc(d);
    }
    this.updated = false;
    this.enterSize = 0;
    this.exitSize = 0;
  }
  onClickHandler(d, n) {
    this.clickEvent.emit({ data: d, target: n });
  }
  onHoverHandler(d, n) {
    overrideTitleTooltip(this.chartID, true);
    this.hoverEvent.emit({ data: d, target: n });
    if (this.showTooltip && d[this.ordinalAccessor]) {
      this.eventsTooltip({ data: d, evt: event, isToShow: true });
    }
  }
  onMouseOutHandler() {
    overrideTitleTooltip(this.chartID, false);
    this.mouseOutEvent.emit();
    if (this.showTooltip) {
      this.eventsTooltip({ isToShow: false });
    }
  }
  // set initial style (instead of copying css class across the lib)
  setTooltipInitialStyle() {
    initTooltipStyle(this.tooltipG);
  }
  // tooltip
  eventsTooltip({ data, evt, isToShow }) {
    drawTooltip({
      root: this.tooltipG,
      data,
      event: evt,
      isToShow,
      tooltipLabel: this.tooltipLabel,
      xAxis: this.xAxis,
      yAxis: this.yAxis,
      dataLabel: this.dataLabel,
      layout: this.layout,
      ordinalAccessor: this.groupAccessor,
      groupAccessor: this.ordinalAccessor,
      valueAccessor: this.valueAccessor,
      chartType: 'clustered'
    });
  }
  render() {
    this.drawStartEvent.emit({ chartID: this.chartID });
    // hardcoded theme to light until we add this functionality
    const theme = 'light';
    // everything between this comment and the third should eventually
    // be moved into componentWillUpdate (if the stenicl bug is fixed)
    this.init();
    if (this.shouldSetTagLevels) {
      this.setTagLevels();
      this.shouldSetTagLevels = false;
    }
    if (this.shouldCheckValueAxis) {
      if (this.layout === 'horizontal') {
        this.shouldUpdateXAxis = true;
        this.shouldUpdateXGrid = true;
      }
      else if (this.layout === 'vertical') {
        this.shouldUpdateYAxis = true;
        this.shouldUpdateYGrid = true;
      }
      this.shouldCheckValueAxis = false;
    }
    if (this.shouldCheckLabelAxis) {
      if (this.layout === 'vertical') {
        this.shouldUpdateXAxis = true;
        this.shouldUpdateXGrid = true;
        this.shouldSetXAxisAccessibility = true;
      }
      else if (this.layout === 'horizontal') {
        this.shouldUpdateYAxis = true;
        this.shouldUpdateYGrid = true;
        this.shouldSetYAxisAccessibility = true;
      }
      this.shouldCheckLabelAxis = false;
    }
    if (this.shouldUpdateData) {
      this.prepareData();
      this.shouldUpdateData = false;
    }
    if (this.shouldUpdateLegendData) {
      this.prepareLegendData();
      this.shouldUpdateLegendData = false;
    }
    if (this.shouldSetDimensions) {
      this.setDimensions();
      this.shouldSetDimensions = false;
    }
    if (this.shouldUpdateScales) {
      this.prepareScales();
      this.shouldUpdateScales = false;
    }
    if (this.shouldValidateInteractionKeys) {
      this.validateInteractionKeys();
      this.shouldValidateInteractionKeys = false;
    }
    if (this.shouldValidateDataLabelAccessor) {
      this.validateDataLabelAccessor();
      this.shouldValidateDataLabelAccessor = false;
    }
    if (this.shouldValidateAxes) {
      this.validateAxes();
      this.shouldValidateAxes = false;
    }
    if (this.shouldUpdateTableData) {
      this.setTableData();
      this.shouldUpdateTableData = false;
    }
    if (this.shouldValidate) {
      this.shouldValidateAccessibilityProps();
      this.shouldValidate = false;
    }
    if (this.shouldSetColors) {
      this.setColors();
      this.shouldSetColors = false;
    }
    if (this.shouldValidateLabelPlacement) {
      this.validateLabelPlacement();
      this.shouldValidateLabelPlacement = false;
    }
    // Everything between this comment and the first should eventually
    // be moved into componentWillUpdate (if the stenicl bug is fixed)
    return (h("div", { class: `o-layout is--${this.layout} ${theme}` },
      h("div", { class: "o-layout--chart" },
        h(this.topLevel, { class: "clustered-bar-main-title vcl-main-title" }, this.mainTitle),
        h(this.bottomLevel, { class: "visa-ui-text--instructions clustered-bar-sub-title vcl-sub-title" }, this.subTitle),
        h("div", { class: "clustered-bar-legend vcl-legend", style: { display: this.legend.visible ? 'block' : 'none' } }),
        h("keyboard-instructions", { uniqueID: this.chartID, geomType: 'bar', groupName: 'cluster', chartTag: 'clustered-bar-chart', width: this.width - (this.margin ? this.margin.right || 0 : 0), isInteractive: this.accessibility.elementsAreInterface, hasCousinNavigation // on bar this requires checking for groupAccessor
          : true, disabled: this.suppressEvents &&
            this.accessibility.elementsAreInterface === false &&
            this.accessibility.keyboardNavConfig &&
            this.accessibility.keyboardNavConfig.disabled }),
        h("div", { class: "visa-viz-d3-clustered-bar-container" }),
        h("div", { class: "clustered-bar-tooltip vcl-tooltip", style: { display: this.showTooltip ? 'block' : 'none' } }),
        h("data-table", { uniqueID: this.chartID, isCompact: true, tableColumns: this.tableColumns, data: this.tableData, padding: this.padding, margin: this.margin, hideDataTable: this.accessibility.hideDataTableButton, unitTest: this.unitTest }))));
  }
  init() {
    // reading properties
    const keys = Object.keys(ClusteredBarChartDefaultValues);
    let i = 0;
    // accept 0 or false as default value
    const exceptions = {
      mainTitle: {
        exception: ''
      },
      subTitle: {
        exception: ''
      },
      barIntervalRatio: {
        exception: 0
      },
      groupIntervalRatio: {
        exception: 0
      },
      showTooltip: {
        exception: false
      },
      wrapLabel: {
        exception: false
      },
      hoverOpacity: {
        exception: 0
      }
    };
    for (i = 0; i < keys.length; i++) {
      const exception = !exceptions[keys[i]] ? false : this[keys[i]] === exceptions[keys[i]].exception;
      this[keys[i]] = this[keys[i]] || exception ? this[keys[i]] : ClusteredBarChartDefaultValues[keys[i]];
    }
  }
  static get is() { return "clustered-bar-chart"; }
  static get originalStyleUrls() { return {
    "$": ["clustered-bar-chart.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["clustered-bar-chart.css"]
  }; }
  static get properties() { return {
    "mainTitle": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "main-title",
      "reflect": false,
      "defaultValue": "ClusteredBarChartDefaultValues.mainTitle"
    },
    "subTitle": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "sub-title",
      "reflect": false,
      "defaultValue": "ClusteredBarChartDefaultValues.subTitle"
    },
    "height": {
      "type": "number",
      "mutable": true,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "height",
      "reflect": false,
      "defaultValue": "ClusteredBarChartDefaultValues.height"
    },
    "width": {
      "type": "number",
      "mutable": true,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "width",
      "reflect": false,
      "defaultValue": "ClusteredBarChartDefaultValues.width"
    },
    "layout": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "layout",
      "reflect": false,
      "defaultValue": "ClusteredBarChartDefaultValues.layout"
    },
    "margin": {
      "type": "unknown",
      "mutable": true,
      "complexType": {
        "original": "IBoxModelType",
        "resolved": "IBoxModelType",
        "references": {
          "IBoxModelType": {
            "location": "import",
            "path": "@visa/charts-types"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "defaultValue": "ClusteredBarChartDefaultValues.margin"
    },
    "padding": {
      "type": "unknown",
      "mutable": true,
      "complexType": {
        "original": "IBoxModelType",
        "resolved": "IBoxModelType",
        "references": {
          "IBoxModelType": {
            "location": "import",
            "path": "@visa/charts-types"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "defaultValue": "ClusteredBarChartDefaultValues.padding"
    },
    "highestHeadingLevel": {
      "type": "any",
      "mutable": true,
      "complexType": {
        "original": "string | number",
        "resolved": "number | string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "highest-heading-level",
      "reflect": false,
      "defaultValue": "ClusteredBarChartDefaultValues.highestHeadingLevel"
    },
    "data": {
      "type": "any",
      "mutable": false,
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "data",
      "reflect": false
    },
    "uniqueID": {
      "type": "any",
      "mutable": false,
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "unique-i-d",
      "reflect": false
    },
    "ordinalAccessor": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "ordinal-accessor",
      "reflect": false,
      "defaultValue": "ClusteredBarChartDefaultValues.ordinalAccessor"
    },
    "valueAccessor": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "value-accessor",
      "reflect": false,
      "defaultValue": "ClusteredBarChartDefaultValues.valueAccessor"
    },
    "groupAccessor": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "group-accessor",
      "reflect": false,
      "defaultValue": "ClusteredBarChartDefaultValues.groupAccessor"
    },
    "reverseOrder": {
      "type": "boolean",
      "mutable": true,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "reverse-order",
      "reflect": false,
      "defaultValue": "ClusteredBarChartDefaultValues.reverseOrder"
    },
    "xAxis": {
      "type": "unknown",
      "mutable": true,
      "complexType": {
        "original": "IAxisType",
        "resolved": "IAxisType",
        "references": {
          "IAxisType": {
            "location": "import",
            "path": "@visa/charts-types"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "defaultValue": "ClusteredBarChartDefaultValues.xAxis"
    },
    "yAxis": {
      "type": "unknown",
      "mutable": true,
      "complexType": {
        "original": "IAxisType",
        "resolved": "IAxisType",
        "references": {
          "IAxisType": {
            "location": "import",
            "path": "@visa/charts-types"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "defaultValue": "ClusteredBarChartDefaultValues.yAxis"
    },
    "wrapLabel": {
      "type": "boolean",
      "mutable": true,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "wrap-label",
      "reflect": false,
      "defaultValue": "ClusteredBarChartDefaultValues.wrapLabel"
    },
    "colorPalette": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "color-palette",
      "reflect": false,
      "defaultValue": "ClusteredBarChartDefaultValues.colorPalette"
    },
    "colors": {
      "type": "unknown",
      "mutable": true,
      "complexType": {
        "original": "string[]",
        "resolved": "string[]",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      }
    },
    "hoverStyle": {
      "type": "unknown",
      "mutable": true,
      "complexType": {
        "original": "IHoverStyleType",
        "resolved": "IHoverStyleType",
        "references": {
          "IHoverStyleType": {
            "location": "import",
            "path": "@visa/charts-types"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "defaultValue": "ClusteredBarChartDefaultValues.hoverStyle"
    },
    "clickStyle": {
      "type": "unknown",
      "mutable": true,
      "complexType": {
        "original": "IClickStyleType",
        "resolved": "IClickStyleType",
        "references": {
          "IClickStyleType": {
            "location": "import",
            "path": "@visa/charts-types"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "defaultValue": "ClusteredBarChartDefaultValues.clickStyle"
    },
    "referenceStyle": {
      "type": "unknown",
      "mutable": true,
      "complexType": {
        "original": "IReferenceStyleType",
        "resolved": "IReferenceStyleType",
        "references": {
          "IReferenceStyleType": {
            "location": "import",
            "path": "@visa/charts-types"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "defaultValue": "ClusteredBarChartDefaultValues.referenceStyle"
    },
    "cursor": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "cursor",
      "reflect": false,
      "defaultValue": "ClusteredBarChartDefaultValues.cursor"
    },
    "roundedCorner": {
      "type": "number",
      "mutable": true,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "rounded-corner",
      "reflect": false,
      "defaultValue": "ClusteredBarChartDefaultValues.roundedCorner"
    },
    "barIntervalRatio": {
      "type": "number",
      "mutable": true,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "bar-interval-ratio",
      "reflect": false,
      "defaultValue": "ClusteredBarChartDefaultValues.barIntervalRatio"
    },
    "groupIntervalRatio": {
      "type": "number",
      "mutable": true,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "group-interval-ratio",
      "reflect": false,
      "defaultValue": "ClusteredBarChartDefaultValues.groupIntervalRatio"
    },
    "hoverOpacity": {
      "type": "number",
      "mutable": true,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "hover-opacity",
      "reflect": false,
      "defaultValue": "ClusteredBarChartDefaultValues.hoverOpacity"
    },
    "animationConfig": {
      "type": "unknown",
      "mutable": true,
      "complexType": {
        "original": "IAnimationConfig",
        "resolved": "IAnimationConfig",
        "references": {
          "IAnimationConfig": {
            "location": "import",
            "path": "@visa/charts-types"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "defaultValue": "ClusteredBarChartDefaultValues.animationConfig"
    },
    "dataLabel": {
      "type": "unknown",
      "mutable": true,
      "complexType": {
        "original": "IDataLabelType",
        "resolved": "IDataLabelType",
        "references": {
          "IDataLabelType": {
            "location": "import",
            "path": "@visa/charts-types"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "defaultValue": "ClusteredBarChartDefaultValues.dataLabel"
    },
    "showTooltip": {
      "type": "boolean",
      "mutable": true,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "show-tooltip",
      "reflect": false,
      "defaultValue": "ClusteredBarChartDefaultValues.showTooltip"
    },
    "tooltipLabel": {
      "type": "unknown",
      "mutable": true,
      "complexType": {
        "original": "ITooltipLabelType",
        "resolved": "ITooltipLabelType",
        "references": {
          "ITooltipLabelType": {
            "location": "import",
            "path": "@visa/charts-types"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "defaultValue": "ClusteredBarChartDefaultValues.tooltipLabel"
    },
    "accessibility": {
      "type": "unknown",
      "mutable": true,
      "complexType": {
        "original": "IAccessibilityType",
        "resolved": "IAccessibilityType",
        "references": {
          "IAccessibilityType": {
            "location": "import",
            "path": "@visa/charts-types"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "defaultValue": "ClusteredBarChartDefaultValues.accessibility"
    },
    "legend": {
      "type": "unknown",
      "mutable": true,
      "complexType": {
        "original": "ILegendType",
        "resolved": "ILegendType",
        "references": {
          "ILegendType": {
            "location": "import",
            "path": "@visa/charts-types"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "defaultValue": "ClusteredBarChartDefaultValues.legend"
    },
    "annotations": {
      "type": "unknown",
      "mutable": true,
      "complexType": {
        "original": "object[]",
        "resolved": "object[]",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "defaultValue": "ClusteredBarChartDefaultValues.annotations"
    },
    "minValueOverride": {
      "type": "number",
      "mutable": true,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "min-value-override",
      "reflect": false
    },
    "maxValueOverride": {
      "type": "number",
      "mutable": true,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "max-value-override",
      "reflect": false
    },
    "referenceLines": {
      "type": "unknown",
      "mutable": true,
      "complexType": {
        "original": "object[]",
        "resolved": "object[]",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "defaultValue": "ClusteredBarChartDefaultValues.referenceLines"
    },
    "suppressEvents": {
      "type": "boolean",
      "mutable": true,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "suppress-events",
      "reflect": false,
      "defaultValue": "ClusteredBarChartDefaultValues.suppressEvents"
    },
    "hoverHighlight": {
      "type": "unknown",
      "mutable": true,
      "complexType": {
        "original": "object",
        "resolved": "object",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      }
    },
    "clickHighlight": {
      "type": "unknown",
      "mutable": true,
      "complexType": {
        "original": "object[]",
        "resolved": "object[]",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "defaultValue": "ClusteredBarChartDefaultValues.clickHighlight"
    },
    "interactionKeys": {
      "type": "unknown",
      "mutable": true,
      "complexType": {
        "original": "string[]",
        "resolved": "string[]",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      }
    },
    "unitTest": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "unit-test",
      "reflect": false,
      "defaultValue": "false"
    }
  }; }
  static get events() { return [{
      "method": "clickEvent",
      "name": "clickEvent",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": ""
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }, {
      "method": "hoverEvent",
      "name": "hoverEvent",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": ""
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }, {
      "method": "mouseOutEvent",
      "name": "mouseOutEvent",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": ""
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }, {
      "method": "initialLoadEvent",
      "name": "initialLoadEvent",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": ""
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }, {
      "method": "drawStartEvent",
      "name": "drawStartEvent",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": ""
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }, {
      "method": "drawEndEvent",
      "name": "drawEndEvent",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": ""
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }, {
      "method": "transitionEndEvent",
      "name": "transitionEndEvent",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": ""
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }]; }
  static get elementRef() { return "clusteredBarChartEl"; }
  static get watchers() { return [{
      "propName": "data",
      "methodName": "dataWatcher"
    }, {
      "propName": "uniqueID",
      "methodName": "idWatcher"
    }, {
      "propName": "highestHeadingLevel",
      "methodName": "headingWatcher"
    }, {
      "propName": "mainTitle",
      "methodName": "titleWatcher"
    }, {
      "propName": "subTitle",
      "methodName": "subtitleWatcher"
    }, {
      "propName": "height",
      "methodName": "dimensionWatcher"
    }, {
      "propName": "width",
      "methodName": "dimensionWatcher"
    }, {
      "propName": "padding",
      "methodName": "dimensionWatcher"
    }, {
      "propName": "margin",
      "methodName": "dimensionWatcher"
    }, {
      "propName": "layout",
      "methodName": "layoutWatcher"
    }, {
      "propName": "ordinalAccessor",
      "methodName": "ordinalAccessorWatcher"
    }, {
      "propName": "valueAccessor",
      "methodName": "valueAccessorWatcher"
    }, {
      "propName": "groupAccessor",
      "methodName": "groupAccessorWatcher"
    }, {
      "propName": "reverseOrder",
      "methodName": "reverseOrderWatcher"
    }, {
      "propName": "xAxis",
      "methodName": "xAxisWatcher"
    }, {
      "propName": "yAxis",
      "methodName": "yAxisWatcher"
    }, {
      "propName": "wrapLabel",
      "methodName": "wrapLabelWatcher"
    }, {
      "propName": "colors",
      "methodName": "colorsWatcher"
    }, {
      "propName": "colorPalette",
      "methodName": "colorsWatcher"
    }, {
      "propName": "hoverStyle",
      "methodName": "hoverStyleWatcher"
    }, {
      "propName": "clickStyle",
      "methodName": "clickStyleWatcher"
    }, {
      "propName": "referenceLines",
      "methodName": "referenceWatcher"
    }, {
      "propName": "referenceStyle",
      "methodName": "referenceWatcher"
    }, {
      "propName": "cursor",
      "methodName": "cursorWatcher"
    }, {
      "propName": "roundedCorner",
      "methodName": "cornerWatcher"
    }, {
      "propName": "barIntervalRatio",
      "methodName": "intervalRatioWatcher"
    }, {
      "propName": "groupIntervalRatio",
      "methodName": "groupIntervalRatioWatcher"
    }, {
      "propName": "hoverOpacity",
      "methodName": "hoverOpacityWatcher"
    }, {
      "propName": "dataLabel",
      "methodName": "labelWatcher"
    }, {
      "propName": "tooltipLabel",
      "methodName": "tooltipLabelWatcher"
    }, {
      "propName": "accessibility",
      "methodName": "accessibilityWatcher"
    }, {
      "propName": "legend",
      "methodName": "legendWatcher"
    }, {
      "propName": "annotations",
      "methodName": "annotationsWatcher"
    }, {
      "propName": "maxValueOverride",
      "methodName": "valueOverrideWatcher"
    }, {
      "propName": "minValueOverride",
      "methodName": "valueOverrideWatcher"
    }, {
      "propName": "clickHighlight",
      "methodName": "clickWatcher"
    }, {
      "propName": "hoverHighlight",
      "methodName": "hoverWatcher"
    }, {
      "propName": "interactionKeys",
      "methodName": "interactionWatcher"
    }, {
      "propName": "suppressEvents",
      "methodName": "suppressWatcher"
    }, {
      "propName": "unitTest",
      "methodName": "unitTestWatcher"
    }]; }
}
// incorporate OSS licenses into build
window['VisaChartsLibOSSLicenses'] = getLicenses(); // tslint:disable-line no-string-literal
