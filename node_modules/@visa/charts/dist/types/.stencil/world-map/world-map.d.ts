/**
 * Copyright (c) 2020, 2021, 2022 Visa, Inc.
 *
 * This source code is licensed under the MIT license
 * https://github.com/visa/visa-chart-components/blob/master/LICENSE
 *
 **/
import { EventEmitter } from '../../stencil-public-runtime';
import { IBoxModelType, IMapMarkerStyleType, ICountryStyleType, IDataLabelType, ILegendType, IClickStyleType, IHoverStyleType, ITooltipLabelType, IAnimationConfig, IAccessibilityType } from '@visa/charts-types';
import 'd3-transition';
export declare class WorldMap {
  clickEvent: EventEmitter;
  hoverEvent: EventEmitter;
  mouseOutEvent: EventEmitter;
  initialLoadEvent: EventEmitter;
  drawStartEvent: EventEmitter;
  drawEndEvent: EventEmitter;
  transitionEndEvent: EventEmitter;
  highestHeadingLevel: string | number;
  height: number;
  width: number;
  mainTitle: string;
  subTitle: string;
  margin: IBoxModelType;
  padding: IBoxModelType;
  mapProjection: string;
  mapScaleZoom: number;
  quality: string;
  data: object[];
  uniqueID: string;
  sortOrder: string;
  groupAccessor: string;
  markerAccessor: string;
  markerNameAccessor: string;
  joinAccessor: string;
  joinNameAccessor: string;
  valueAccessor: string;
  latitudeAccessor: string;
  longitudeAccessor: string;
  colorPalette: string;
  colors: string[];
  colorSteps: number;
  markerStyle: IMapMarkerStyleType;
  countryStyle: ICountryStyleType;
  hoverStyle: IHoverStyleType;
  clickStyle: IClickStyleType;
  cursor: string;
  hoverOpacity: number;
  animationConfig: IAnimationConfig;
  showTooltip: boolean;
  accessibility: IAccessibilityType;
  legend: ILegendType;
  showGridlines: boolean;
  tooltipLabel: ITooltipLabelType;
  dataLabel: IDataLabelType;
  annotations: object[];
  maxValueOverride: number;
  minValueOverride: number;
  hoverHighlight: object;
  clickHighlight: object[];
  interactionKeys: string[];
  suppressEvents: boolean;
  unitTest: boolean;
  worldMapEl: HTMLElement;
  svg: any;
  root: any;
  rootG: any;
  projection: any;
  path: any;
  gridG: any;
  gridOutlineG: any;
  gridGraticuleG: any;
  graticule: any;
  colorScale: any;
  baseColorScale: any;
  precalculatedStrokes: any;
  strokeFilter: any;
  radiusScale: any;
  features: any;
  countries: any;
  markers: any;
  labels: any;
  references: any;
  defaults: boolean;
  duration: number;
  current: any;
  currentMarker: any;
  innerLegend: any;
  enter: any;
  enterMarker: any;
  enteringLabels: any;
  exit: any;
  exitMarker: any;
  exitingLabels: any;
  update: any;
  updateMarker: any;
  updatingLabels: any;
  innerHeight: number;
  innerWidth: number;
  innerPaddedHeight: number;
  innerPaddedWidth: number;
  innerXAxis: any;
  innerYAxis: any;
  innerMapProjection: string;
  innerClickStyle: any;
  innerHoverStyle: any;
  innerInteractionKeys: any;
  innerMarkerAccessor: string;
  innerMarkerNameAccessor: string;
  colorArr: any;
  preparedColors: any;
  labelBackgrounds: any;
  strokeColors: any;
  preppedData: any;
  placement: string;
  legendData: any;
  legendG: any;
  tooltipG: any;
  previousQuality: string;
  tableData: any;
  tableColumns: any;
  updated: boolean;
  enterSize: number;
  exitSize: number;
  enterMarkerSize: number;
  exitMarkerSize: number;
  chartID: string;
  shouldValidateAccessibility: boolean;
  shouldValidate: boolean;
  shouldValidateClickStyle: boolean;
  shouldValidateHoverStyle: boolean;
  shouldResetRoot: boolean;
  shouldUpdateRootIDs: boolean;
  shouldUpdateLayoutVariables: boolean;
  shouldUpdateGrid: boolean;
  shouldSetGlobalProjection: boolean;
  shouldSetGlobalSelections: boolean;
  shouldSetTestingAttributes: boolean;
  shouldSetMapFeatureQuality: boolean;
  shouldEnterUpdateExit: boolean;
  shouldUpdatePaths: boolean;
  shouldUpdateMarkers: boolean;
  shouldOrderMarkers: boolean;
  shouldSetMarkerSelectionClass: boolean;
  shouldUpdateLabels: boolean;
  shouldUpdateLegend: boolean;
  shouldUpdateScales: boolean;
  shouldUpdateData: boolean;
  shouldUpdateLegendData: boolean;
  shouldUpdateTableData: boolean;
  shouldDrawInteractionState: boolean;
  shouldUpdateColorFill: boolean;
  shouldUpdateMarkerStyle: boolean;
  shouldUpdatePathStyle: boolean;
  shouldUpdateLabelStyle: boolean;
  shouldBindInteractivity: boolean;
  shouldBindLegendInteractivity: boolean;
  shouldUpdateCursor: boolean;
  shouldUpdateLegendCursor: boolean;
  shouldUpdateAnnotations: boolean;
  shouldValidateMapProjection: boolean;
  shouldValidateInteractionKeys: boolean;
  shouldValidateMarkerAccessor: boolean;
  shouldSetColors: boolean;
  shouldUpdateDescriptionWrapper: boolean;
  shouldSetChartAccessibilityTitle: boolean;
  shouldSetChartAccessibilitySubtitle: boolean;
  shouldSetChartAccessibilityLongDescription: boolean;
  shouldSetChartAccessibilityExecutiveSummary: boolean;
  shouldSetChartAccessibilityStatisticalNotes: boolean;
  shouldSetChartAccessibilityStructureNotes: boolean;
  shouldSetParentSVGAccessibility: boolean;
  shouldSetGeometryAccessibilityAttributes: boolean;
  shouldSetGeometryAriaLabels: boolean;
  shouldSetGroupAccessibilityLabel: boolean;
  shouldSetChartAccessibilityPurpose: boolean;
  shouldSetChartAccessibilityContext: boolean;
  shouldRedrawWrapper: boolean;
  shouldSetTagLevels: boolean;
  shouldSetChartAccessibilityCount: boolean;
  shouldSetTextures: boolean;
  shouldSetStrokes: boolean;
  strokes: any;
  topLevel: string;
  bottomLevel: string;
  bitmaps: any;
  dataWatcher(_newData: any, _oldData: any): void;
  sortWatcher(_newVal: any, _oldVal: any): void;
  groupAccessorWatcher(_newVal: any, _oldVal: any): void;
  joinAccessorWatcher(_newVal: any, _oldVal: any): void;
  markerAccessorWatcher(_newVal: any, _oldVal: any): void;
  valueAccessorWatcher(_newVal: any, _oldVal: any): void;
  valueOverrideWatcher(_newVal: any, _oldVal: any): void;
  headingWatcher(_newVal: any, _oldVal: any): void;
  titleWatcher(_newVal: any, _oldVal: any): void;
  subtitleWatcher(_newVal: any, _oldVal: any): void;
  colorsWatcher(_newVal: any, _oldVal: any): void;
  projectionWatcher(_newVal: any, _oldVal: any): void;
  gridLineWatcher(_newVal: any, _oldVal: any): void;
  dimensionWatcher(_newVal: any, _oldVal: any): void;
  qualityWatcher(_newVal: any, _oldVal: any): void;
  labelWatcher(_newVal: any, _oldVal: any): void;
  legendWatcher(_newVal: any, _oldVal: any): void;
  tooltipLabelWatcher(_newVal: any, _oldVal: any): void;
  hoverOpacityWatcher(_newVal: any, _oldVal: any): void;
  countryStyleWatcher(_newVal: any, _oldVal: any): void;
  markerStyleWatcher(_newVal: any, _oldVal: any): void;
  clickStyleWatcher(_newVal: any, _oldVal: any): void;
  hoverStyleWatcher(_newVal: any, _oldVal: any): void;
  clickWatcher(_newVal: any, _oldVal: any): void;
  hoverWatcher(_newVal: any, _oldVal: any): void;
  interactionWatcher(_newVal: any, _oldVal: any): void;
  cursorWatcher(_newVal: any, _oldVal: any): void;
  accessibilityWatcher(_newVal: any, _oldVal: any): void;
  annotationsWatcher(_newVal: any, _oldVal: any): void;
  idWatcher(_newVal: any, _oldVal: any): void;
  suppressWatcher(_newVal: any, _oldVal: any): void;
  unitTestWatcher(_newVal: any, _oldVal: any): void;
  componentWillLoad(): Promise<unknown>;
  componentDidLoad(): Promise<unknown>;
  componentWillUpdate(): Promise<unknown>;
  componentDidUpdate(): Promise<CustomEvent<any>>;
  shouldValidateAccessibilityProps(): void;
  prepareData(): void;
  prepareLegendData(): void;
  updateChartVariable(): void;
  validateMarkerAccessor(): void;
  validateInteractionKeys(): void;
  setTagLevels(): void;
  setTestingAttributes(): void;
  setGlobalSelections(): void;
  setColors(): void;
  addStrokeUnder(): void;
  prepareScales(): void;
  setTableData(): void;
  updateMarkerStyle(innerDuration: any): void;
  updateLabelStyle(): void;
  updateLegendInteractionState(): void;
  validateClickStyle(): void;
  validateHoverStyle(): void;
  validateMapProjection(): void;
  setGlobalProjection(): void;
  setMapFeatureQuality(): void;
  updateRootIDs(): void;
  renderRootElements(): void;
  reSetRoot(): void;
  setTextures(): void;
  drawOutlineGrid(): void;
  drawGraticuleGrid(): void;
  setMarkerSelectedClass(): void;
  updateCursor(): void;
  updateLegendCursor(): void;
  bindLegendInteractivity(): void;
  bindInteractivity(): void;
  enterPaths(): void;
  updatePathStyle(innerDuration: any): void;
  exitPaths(): void;
  drawPaths(): void;
  setCountryStyle(d: any, i: any, n: any): any;
  enterLabels(): void;
  exitLabels(): void;
  drawDataLabels(): void;
  getMarkerLabelText(d: any): any;
  enterMarkers(): void;
  exitMarkers(): void;
  orderMarkers(): void;
  drawMarkers(): void;
  setMarkerStyle(d: any, i: any, n: any): any;
  drawAnnotations(): void;
  drawLegendElements(): void;
  setChartDescriptionWrapper(): void;
  setParentSVGAccessibility(): void;
  setGeometryAccessibilityAttributes(): void;
  setGeometryAriaLabels(): void;
  setGroupAccessibilityAttributes(): void;
  setGroupAccessibilityID(): void;
  setChartAccessibilityTitle(): void;
  setChartAccessibilitySubtitle(): void;
  setChartAccessibilityLongDescription(): void;
  setChartAccessibilityExecutiveSummary(): void;
  setChartAccessibilityPurpose(): void;
  setChartAccessibilityContext(): void;
  setChartAccessibilityStatisticalNotes(): void;
  setChartCountAccessibility(): void;
  setChartAccessibilityStructureNotes(): void;
  onChangeHandler(): void;
  onClickHandler(d: any, n: any): void;
  onHoverHandler(d: any, n: any): void;
  onMouseOutHandler(d: any): void;
  setTooltipInitialStyle(): void;
  eventsTooltip({ data, evt, isToShow }: {
    data?: any;
    evt?: any;
    isToShow: boolean;
  }): void;
  render(): any;
  private init;
}
