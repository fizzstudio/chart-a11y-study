/**
 * Copyright (c) 2021, 2022 Visa, Inc.
 *
 * This source code is licensed under the MIT license
 * https://github.com/visa/visa-chart-components/blob/master/LICENSE
 *
 **/
import { EventEmitter } from '../../stencil-public-runtime';
import { IBoxModelType, IHoverStyleType, IClickStyleType, IDataLabelType, ITooltipLabelType, IAccessibilityType, IAnimationConfig, INodeConfigType, ILinkConfigType } from '@visa/charts-types';
import 'd3-transition';
export declare class AlluvialDiagram {
  clickEvent: EventEmitter;
  hoverEvent: EventEmitter;
  mouseOutEvent: EventEmitter;
  initialLoadEvent: EventEmitter;
  drawStartEvent: EventEmitter;
  drawEndEvent: EventEmitter;
  transitionEndEvent: EventEmitter;
  mainTitle: string;
  subTitle: string;
  height: number;
  width: number;
  highestHeadingLevel: string | number;
  margin: IBoxModelType;
  padding: IBoxModelType;
  linkData: object[];
  nodeData: object[];
  uniqueID: string;
  sourceAccessor: string;
  targetAccessor: string;
  valueAccessor: string;
  groupAccessor: string;
  nodeIDAccessor: string;
  nodeConfig: INodeConfigType;
  linkConfig: ILinkConfigType;
  colorPalette: string;
  colors: string[];
  hoverStyle: IHoverStyleType;
  clickStyle: IClickStyleType;
  cursor: string;
  hoverOpacity: number;
  animationConfig: IAnimationConfig;
  dataLabel: IDataLabelType;
  showTooltip: boolean;
  tooltipLabel: ITooltipLabelType;
  accessibility: IAccessibilityType;
  annotations: object[];
  suppressEvents: boolean;
  hoverHighlight: object;
  clickHighlight: object[];
  interactionKeys: string[];
  unitTest: boolean;
  alluvialDiagramEl: HTMLElement;
  shouldValidateAccessibility: boolean;
  svg: any;
  root: any;
  rootG: any;
  nest: any;
  alluvialProperties: any;
  labels: any;
  tooltipG: any;
  defaults: boolean;
  duration: number;
  innerHeight: number;
  innerWidth: number;
  innerPaddedHeight: number;
  innerPaddedWidth: number;
  dataTest: any;
  chartID: string;
  enterNodeGroups: any;
  exitNodeGroups: any;
  updateNodeGroups: any;
  enterNodes: any;
  exitNodes: any;
  updateNodes: any;
  enterLinks: any;
  exitLinks: any;
  enterLinkGroups: any;
  exitLinkGroups: any;
  updateLinkGroups: any;
  updateLinks: any;
  enteringLabels: any;
  exitingLabels: any;
  updatingLabels: any;
  nodeList: any;
  linkList: any;
  innerNodeData: any;
  innerLinkData: any;
  preppedData: any;
  oldNodeCount: any;
  nodeCount: any;
  newColumn: any;
  nodeG: any;
  linkG: any;
  labelG: any;
  innerLinkFillMode: any;
  innerLabelAccessor: any;
  innerIDAccessor: any;
  innerNodeAlignment: any;
  innerNodeInteractionKeys: any;
  innerLinkInteractionKeys: any;
  innerInteractionKeys: any;
  interactionKeysWithObjs: any;
  colorArr: any;
  noLinksLeftPadding: any;
  widthAllNodesNoLinks: any;
  previousNodeLayers: any;
  currentNodeLayers: any;
  previousMinNodeLayer: any;
  previousMaxNodeLayer: any;
  currentMaxNodeLayer: any;
  currentMinNodeLayer: any;
  topLevel: string;
  bottomLevel: string;
  sourceLinksString: string;
  targetLinksString: string;
  valueString: string;
  groupKeys: any;
  tableData: any;
  tableColumns: any;
  secondaryTableData: any;
  secondaryTableColumns: any;
  updated: boolean;
  enterSize: number;
  exitSize: number;
  shouldSetDimensions: boolean;
  shouldUpdateData: boolean;
  shouldSetColors: boolean;
  shouldSetTagLevels: boolean;
  shouldRedrawWrapper: boolean;
  shouldUpdateTableData: boolean;
  shouldUpdateDescriptionWrapper: boolean;
  shouldSetChartAccessibilityCount: boolean;
  shouldSetChartAccessibilityTitle: boolean;
  shouldSetChartAccessibilitySubtitle: boolean;
  shouldSetChartAccessibilityLongDescription: boolean;
  shouldSetChartAccessibilityExecutiveSummary: boolean;
  shouldSetChartAccessibilityPurpose: boolean;
  shouldSetChartAccessibilityContext: boolean;
  shouldSetChartAccessibilityStatisticalNotes: boolean;
  shouldSetChartAccessibilityStructureNotes: boolean;
  shouldSetParentSVGAccessibility: boolean;
  shouldSetGeometryAccessibilityAttributes: boolean;
  shouldSetGeometryAriaLabels: boolean;
  shouldSetGroupAccessibilityLabel: boolean;
  shouldSetSelectionClass: boolean;
  shouldSetAnnotationAccessibility: boolean;
  shouldSetGlobalSelections: boolean;
  shouldSetTestingAttributes: boolean;
  shouldDrawInteractionState: boolean;
  shouldEnterUpdateExit: boolean;
  shouldUpdateNodeGeometries: boolean;
  shouldUpdateNodeStyle: boolean;
  shouldUpdateLinkGeometries: boolean;
  shouldUpdateLinkStyle: boolean;
  shouldDrawNodeLabels: boolean;
  shouldSetNodeDimensions: boolean;
  shouldCallSankeyGenerator: boolean;
  shouldUpdateAnnotations: boolean;
  shouldValidateIdAccessor: boolean;
  shouldValidateLabelText: boolean;
  shouldValidateLinkFillMode: boolean;
  shouldValidateNodeAlignment: boolean;
  shouldValidateInteractionKeys: boolean;
  shouldValidateLinkGroups: boolean;
  shouldUpdateCursor: boolean;
  shouldBindInteractivity: boolean;
  shouldResetRoot: boolean;
  shouldSetNodeLabelOpacity: boolean;
  bitmaps: any;
  dataWatcher(_newData: any, _oldData: any): void;
  idWatcher(newID: any, _oldID: any): void;
  headingWatcher(_newVal: any, _oldVal: any): void;
  mainTitleWatcher(_newVal: any, _oldVal: any): void;
  subTitleWatcher(_newVal: any, _oldVal: any): void;
  dimensionWatcher(_newVal: any, _oldVal: any): void;
  sourceAccessorWatcher(_newVal: any, _oldVal: any): void;
  targetAccessorWatcher(_newVal: any, _oldVal: any): void;
  valueAccessorWatcher(_newVal: any, _oldVal: any): void;
  groupAccessorWatcher(_newVal: any, _oldVal: any): void;
  nodeIDAccessorWatcher(_newVal: any, _oldVal: any): void;
  nodeConfigWatcher(_newVal: any, _oldVal: any): void;
  linkConfigWatcher(_newVal: any, _oldVal: any): void;
  colorWatcher(_newVal: any, _oldVal: any): void;
  interactionStyleWatcher(_newVal: any, _oldVal: any): void;
  cursorWatcher(_newVal: any, _oldVal: any): void;
  hoverOpacityWatcher(_newVal: any, _oldVal: any): void;
  dataLabelWatcher(_newVal: any, _oldVal: any): void;
  tooltipLabelWatcher(_newVal: any, _oldVal: any): void;
  showTooltipWatcher(_newVal: any, _oldVal: any): void;
  accessibilityWatcher(_newVal: any, _oldVal: any): void;
  annotationsWatcher(_newVal: any, _oldVal: any): void;
  clickWatcher(_newVal: any, _oldVal: any): void;
  hoverWatcher(_newVal: any, _oldVal: any): void;
  interactionWatcher(_newVal: any, _oldVal: any): void;
  suppressWatcher(_newVal: any, _oldVal: any): void;
  unitTestWatcher(_newVal: any, _oldVal: any): void;
  componentWillLoad(): Promise<unknown>;
  componentWillUpdate(): Promise<unknown>;
  componentDidLoad(): Promise<unknown>;
  componentDidUpdate(): Promise<CustomEvent<any>>;
  setDimensions(): void;
  prepareData(): void;
  createNodeList(): void;
  validateLabelText(): void;
  validateIdAccessor(): void;
  validateLinkFillMode(): void;
  validateNodeAlignment(): void;
  validateInteractionKeys(): void;
  validateLinkGroups(): void;
  shouldValidateAccessibilityProps(): void;
  setTableData(): void;
  getScopedTableData(data: any, keyMap: any): any[];
  setNodeDimensions(): void;
  callSankeyGenerator(): void;
  renderRootElements(): void;
  updateCursor(): void;
  reSetRoot(): void;
  setGlobalSelections(): void;
  setTestingAttributes(): void;
  newColumnInterpolationPosition(): any;
  enterLinkGeometries(): void;
  updateLinkGeometries(): void;
  exitLinkGeometries(): void;
  drawLinkGeometries(): void;
  drawDuplicateClickedLink(inputElement: any, d: any): void;
  removeTemporaryClickedLinks(root: any): void;
  updateLinkStyle(): void;
  enterNodeGeometries(): void;
  updateNodeGeometries(): void;
  exitNodeGeometries(): void;
  drawNodeGeometries(): void;
  updateNodeStyle(): void;
  enterNodeLabels(): void;
  updateNodeLabels(): void;
  exitNodeLabels(): void;
  addStrokeUnder(): void;
  drawNodeLabels(): void;
  setNodeLabelOpacity(): void;
  updateInteractionState(): void;
  bindInteractivity(): void;
  drawAnnotations(): void;
  setColors(): void;
  setTagLevels(): void;
  setChartDescriptionWrapper(): void;
  setParentSVGAccessibility(): void;
  setGeometryAccessibilityAttributes(): void;
  setGeometryAriaLabels(): void;
  setGroupAccessibilityID(): void;
  setChartCountAccessibility(): void;
  setSelectedClass(): void;
  setChartAccessibilityTitle(): void;
  setChartAccessibilitySubtitle(): void;
  setChartAccessibilityLongDescription(): void;
  setChartAccessibilityExecutiveSummary(): void;
  setChartAccessibilityPurpose(): void;
  setChartAccessibilityContext(): void;
  setChartAccessibilityStatisticalNotes(): void;
  setChartAccessibilityStructureNotes(): void;
  setAnnotationAccessibility(): void;
  onChangeHandler(): void;
  onClickHandler(d: any, n: any): void;
  onHoverHandler(d: any, n: any): void;
  onMouseOutHandler(): void;
  setTooltipInitialStyle(): void;
  eventsTooltip({ data, evt, isToShow }: {
    data?: any;
    evt?: any;
    isToShow: boolean;
  }): void;
  render(): any;
  private init;
}
