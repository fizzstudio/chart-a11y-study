/**
 * Copyright (c) 2020, 2021 Visa, Inc.
 *
 * This source code is licensed under the MIT license
 * https://github.com/visa/visa-chart-components/blob/master/LICENSE
 *
 **/
export interface ICirclePackingProps {
  /**
   * @shortDescription Main title of the chart
   * @controlName TextField
   * @groupName Base */
  mainTitle: string;
  /**
   * @shortDescription Subtitle of the chart
   * @controlName TextField
   * @groupName Base */
  subTitle: string;
  /**
   * @shortDescription Height of the chart area in pixels
   * @controlName Slider
   * @groupName Base */
  height: number;
  /**
   * @shortDescription Width of the chart area in pixels
   * @controlName Slider
   * @groupName Base */
  width: number;
  /**
   * @shortDescription Margin between the subtitle and the chart area, or between the title and chart area if no subtitle is specified
   * @controlName TextArea
   * @groupName Margin */
  margin: IBoxModelType;
  /**
   * @shortDescription Padding between plot area and axes lines
   * @controlName TextArea
   * @groupName Padding */
  padding: IBoxModelType;
  /**
   * @shortDescription Sets the padding between each circle
   * @controlName Slider
   * @groupName Style */
  circlePadding: number;
  /**
   * @shortDescription Data used to create chart
   * @controlName TextArea
   * @groupName Data */
  data: object[];
  /**
   * @shortDescription ID used to identify chart (must be unique), helpful for validation messages. Defaults to UUID v4 standard.
   * @controlName TextField
   * @groupName Data */
  uniqueID: string;
  /**
   * @shortDescription  Key used to determine circle's parent
   * @controlName TextField
   * @groupName Data */
  parentAccessor: string;
  /**
   * @shortDescription  Key used to determine circle's unique id
   * @controlName TextField
   * @groupName Data */
  nodeAccessor: string;
  /**
   * @shortDescription Key used to determine circle size
   * @controlName TextField
   * @groupName Data */
  sizeAccessor: string;
  /**
   * @shortDescription Will take in an array of values that determine which circles to highlight
   * @controlName TextArea
   * @groupName Data */
  interactionKeys: string[];
  /**
   * @shortDescription Sets the number of data layers to show on circle pack
   * @controlName Slider
   * @groupName Data */
  dataDepth: number;
  /**
   * @shortDescription Sets the number of visible layers on circle pack
   * @controlName Slider
   * @groupName Data */
  displayDepth: number;
  /**
   * @shortDescription When selected, allows tooltips to be displayed
   * @controlName Toggle
   * @groupName Labels */
  showTooltip: boolean;
  /**
   * @shortDescription Customize the tooltip content
   * @controlName TextArea
   * @groupName Labels */
  tooltipLabel: ITooltipLabelType;
  /**
   * @shortDescription Sets the color palette of the bars. Overridden by groupAccessor and colors.
   * @controlName Select
   * @groupName Style */
  colorPalette: string;
  /**
   * @shortDescription Accepts array of color strings or values to customize colors. Overridden by groupAccessor.
   * @controlName TextArea
   * @groupName Style */
  colors: string[];
  /**
   * @shortDescription Adds annotations to the chart, see d3-annotation
   * @controlName TextArea
   * @groupName Annotations */
  annotations: object[];
  /**
   * @shortDescription Sets the styling of circles when they are selected
   * @controlName TextArea
   * @groupName Style */
  clickStyle: IClickStyleType;
  /**
   * @shortDescription Sets the styling of circles when they are hovered
   * @controlName TextArea
   * @groupName Style */
  hoverStyle: IHoverStyleType;
  /**
   * @shortDescription Sets the opacity of all other circles other than the one the mouse is over
   * @controlName Slider
   * @groupName Style */
  hoverOpacity: number;
  /**
   * @shortDescription Changes pointer type during mouse over on grids
   * @controlName Radio
   * @groupName Style */
  cursor: string;
  /**
   * @shortDescription Controls visibility, styling and placement of data labels
   * @controlName TextArea
   * @groupName Labels */
  dataLabel: IDataLabelType;
  /**
   * @shortDescription Manages messages and settings for chart accessibility
   * @controlName TextArea
   * @groupName Accessibility */
  accessibility: IAccessibilityType;
  /**
   * @shortDescription Manages settings for chart animation, property 'disabled' defaults to false or undefined
   * @controlName TextArea
   * @groupName Accessibility */
  animationConfig: IAnimationConfig;
  /**
   * @shortDescription Suppresses and disables all event emitters. Setting to true can increase performance for non-interactive charts.
   * @controlName Toggle
   * @groupName Events */
  suppressEvents: boolean;
  /**
   * @shortDescription Set a callback for click event on each data point.
   * @controlName Toggle
   * @groupName Events */
  clickEvent: any;
  /**
   * @shortDescription Set a callback to execute when mouse enters the chart.
   * @controlName Toggle
   * @groupName Events */
  hoverEvent: any;
  /**
   * @shortDescription Set a callback to execute when mouse leaves the chart.
   * @controlName Toggle
   * @groupName Events */
  mouseOutEvent: any;
  /**
   * @shortDescription Set a callback to execute when chart initially loads.
   * @controlName Toggle
   * @groupName Events */
  initialLoadEvent: any;
  /**
   * @shortDescription Set a callback to execute when chart drawing starts.
   * @controlName Toggle
   * @groupName Events */
  drawStartEvent: any;
  /**
   * @shortDescription Set a callback to execute when chart drawing ends.
   * @controlName Toggle
   * @groupName Events */
  drawEndEvent: any;
  /**
   * @shortDescription Set a callback to execute when chart geometry transitions end.
   * @controlName Toggle
   * @groupName Events */
  transitionEndEvent: any;
  /**
   * @shortDescription
   * @controlName TextArea
   * @groupName Style */
  hoverHighlight: object;
  /**
   * @shortDescription
   * @controlName TextArea
   * @groupName Style */
  clickHighlight: object[];
  /**
   * @shortDescription
   * @controlName TextArea
   * @groupName Style */
  zoomToNode: any;
}
export interface IDataLabelType {
  visible: boolean;
  placement?: string;
  labelAccessor?: string;
  format?: string;
  collisionHideOnly?: boolean;
  collisionPlacement?: string;
}
export interface IBoxModelType {
  top: number;
  bottom: number;
  right: number;
  left: number;
}
export interface IHoverStyleType {
  color: string;
  strokeWidth: string | number;
}
export interface IClickStyleType {
  color: string;
  strokeWidth: string | number;
}
export interface ITooltipLabelType {
  labelAccessor: string[];
  labelTitle: string[];
  format: string | string[];
}
export interface IAccessibilityType {
  longDescription?: string;
  executiveSummary?: string;
  purpose?: string;
  contextExplanation?: string;
  title?: string;
  elementDescriptionAccessor?: string;
  statisticalNotes?: string;
  structureNotes?: string;
  includeDataKeyNames?: boolean;
  hideDataTableButton?: boolean;
  disableValidation?: boolean;
  elementsAreInterface?: any;
  onChangeFunc?: any;
  hideTextures?: boolean;
  hideStrokes?: boolean;
  showSmallLabels?: boolean;
  showExperimentalTextures?: boolean;
  keyboardNavConfig?: IKeyConfig;
}
export interface IAnimationConfig {
  disabled?: boolean;
}
export interface IKeyConfig {
  disabled?: boolean;
}
