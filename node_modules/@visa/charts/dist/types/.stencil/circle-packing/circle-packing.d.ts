/**
 * Copyright (c) 2020, 2021, 2022 Visa, Inc.
 *
 * This source code is licensed under the MIT license
 * https://github.com/visa/visa-chart-components/blob/master/LICENSE
 *
 **/
import { EventEmitter } from '../../stencil-public-runtime';
import { IBoxModelType, IHoverStyleType, IClickStyleType, IDataLabelType, ITooltipLabelType, IAnimationConfig, IAccessibilityType } from '@visa/charts-types';
import 'd3-transition';
export declare class CirclePacking {
  clickEvent: EventEmitter;
  hoverEvent: EventEmitter;
  mouseOutEvent: EventEmitter;
  initialLoadEvent: EventEmitter;
  drawStartEvent: EventEmitter;
  drawEndEvent: EventEmitter;
  transitionEndEvent: EventEmitter;
  mainTitle: string;
  subTitle: string;
  height: number;
  width: number;
  margin: IBoxModelType;
  padding: IBoxModelType;
  circlePadding: number;
  highestHeadingLevel: string | number;
  data: any;
  uniqueID: any;
  dataDepth: number;
  displayDepth: number;
  parentAccessor: string;
  nodeAccessor: string;
  sizeAccessor: string;
  colorPalette: string;
  colors: string[];
  cursor: string;
  hoverStyle: IHoverStyleType;
  clickStyle: IClickStyleType;
  hoverOpacity: number;
  animationConfig: IAnimationConfig;
  showTooltip: boolean;
  tooltipLabel: ITooltipLabelType;
  dataLabel: IDataLabelType;
  annotations: object[];
  accessibility: IAccessibilityType;
  suppressEvents: boolean;
  interactionKeys: string[];
  hoverHighlight: object;
  clickHighlight: object[];
  zoomToNode: object;
  circlePackingEl: HTMLElement;
  shouldValidateAccessibility: boolean;
  svg: any;
  root: any;
  rootG: any;
  duration: number;
  innerHeight: number;
  innerWidth: number;
  innerPaddedHeight: number;
  innerPaddedWidth: number;
  current: any;
  circle: any;
  circleG: any;
  enterCircle: any;
  exitCircle: any;
  updateParentCircle: any;
  enterText: any;
  updateText: any;
  exitText: any;
  tooltipG: any;
  nodes: any;
  view: any;
  zoomRatio: any;
  text: any;
  textG: any;
  focus: any;
  colorArr: any;
  preparedColors: any;
  rootCircle: any;
  enter: any;
  holder: any;
  diameter: any;
  currentDepth: number;
  zooming: any;
  timer: any;
  delay: any;
  prevent: any;
  tableData: any;
  tableColumns: any;
  updated: boolean;
  exitSize: number;
  enterSize: number;
  textFilter: string;
  filter: string;
  innerDisplayDepth: number;
  innerDataDepth: number;
  chartID: string;
  shouldZoom: boolean;
  shouldValidateInteractionKeys: boolean;
  shouldDrawInteractionState: boolean;
  shouldUpdateAnnotations: boolean;
  shouldResetRoot: boolean;
  shouldSetColors: boolean;
  shouldUpdateDisplayDepth: boolean;
  shouldUpdateLabels: boolean;
  shouldAddStrokeUnder: boolean;
  shouldUpdateCursor: boolean;
  shouldUpdateData: boolean;
  shouldUpdateTableData: boolean;
  shouldValidate: boolean;
  shouldBindInteractivity: boolean;
  shouldUpdateDescriptionWrapper: boolean;
  shouldSetChartAccessibilityTitle: boolean;
  shouldSetChartAccessibilitySubtitle: boolean;
  shouldSetChartAccessibilityLongDescription: boolean;
  shouldSetChartAccessibilityExecutiveSummary: boolean;
  shouldSetChartAccessibilityStatisticalNotes: boolean;
  shouldSetChartAccessibilityStructureNotes: boolean;
  shouldSetParentSVGAccessibility: boolean;
  shouldSetGeometryAccessibilityAttributes: boolean;
  shouldSetGeometryAriaLabels: boolean;
  shouldSetGroupAccessibilityAttributes: boolean;
  shouldSetGroupAccessibilityLabel: boolean;
  shouldSetChartAccessibilityPurpose: boolean;
  shouldSetChartAccessibilityContext: boolean;
  shouldSetChartAccessibilityCount: boolean;
  shouldUpdateLayout: boolean;
  shouldSetTextures: boolean;
  shouldSetStrokes: boolean;
  shouldSetTextStrokes: boolean;
  shouldSetTagLevels: boolean;
  shouldRedrawWrapper: boolean;
  shouldSetIDs: boolean;
  innerInteractionKeys: any;
  defaultsLoaded: any;
  bottomLevel: string;
  topLevel: string;
  strokes: any;
  bitmaps: any;
  dataWatcher(_new: any, _old: any): void;
  titleWatcher(_new: any, _old: any): void;
  subtitleWatcher(_new: any, _old: any): void;
  headingWatcher(_newVal: any, _oldVal: any): void;
  clusterWatcher(_new: any, _old: any): void;
  nodeWatcher(_new: any, _old: any): void;
  sizeWatcher(_new: any, _old: any): void;
  heightWatcher(_new: any, _old: any): void;
  dataDepthWatcher(_new: any, _old: any): void;
  displayDepthWatcher(_new: any, _old: any): void;
  circlePaddingWatcher(_new: any, _old: any): void;
  colorsWatcher(_new: any, _old: any): void;
  showTooltipWatcher(_new: any, _old: any): void;
  tooltipLabelWatcher(_new: any, _old: any): void;
  hoverOpacityWatcher(_new: any, _old: any): void;
  interactionStyleWatcher(_new: any, _old: any): void;
  cursorWatcher(_new: any, _old: any): void;
  clickWatcher(_new: any, _old: any): void;
  hoverWatcher(_new: any, _old: any): void;
  zoomWatcher(_new: any, _old: any): void;
  interactionWatcher(_new: any, _old: any): void;
  labelWatcher(_new: any, _old: any): void;
  accessibilityWatcher(_newVal: any, _oldVal: any): void;
  annotationsWatcher(_new: any, _old: any): void;
  idWatcher(newID: any, _oldID: any): void;
  suppressWatcher(_newVal: any, _oldVal: any): void;
  componentWillLoad(): Promise<unknown>;
  componentWillUpdate(): Promise<unknown>;
  componentDidLoad(): Promise<unknown>;
  componentDidUpdate(): Promise<CustomEvent<any>>;
  shouldValidateAccessibilityProps(): void;
  setTableData(): void;
  setLayoutData(): void;
  restructureData(): void;
  validateInteractionKeys(): void;
  prepareChartForDrawing(): void;
  renderRootElements(): void;
  reSetRoot(): void;
  setGlobalSelections(): void;
  enterUpdateExitCircles(root: any, data: any): void;
  setCircleFilter: (_: any, i: any, n: any) => string;
  setIDs: () => void;
  generateValidId: (inputId: any) => string;
  enterCircles(depth: any): void;
  exitCircles(group: any, checkRecursive: any): void;
  checkRecursion(depth: any): void;
  setLabelSelections(data: any): void;
  enterLabels(): void;
  drawLabels(): void;
  placeLabels(): void;
  addStrokeUnder(): void;
  setTextStrokes(): void;
  bindInteractivity(): void;
  drawAnnotations(): void;
  setColors(): void;
  setTextures(): void;
  setStrokes(): void;
  updateDisplayDepth(): void;
  updateCursor(): void;
  setCircleStyle: (_: any, i: any, n: any) => any;
  updateInteractionState(): void;
  drawZoomChildren(target: any): void;
  getZoomTarget(): any;
  zoom(target: any): void;
  onHoverHandler(d: any, n: any): void;
  onMouseOutHandler(): void;
  setTooltipInitialStyle(): void;
  eventsTooltip({ data, evt, isToShow }: {
    data?: any;
    evt?: any;
    isToShow: boolean;
  }): void;
  setTagLevels(): void;
  setChartDescriptionWrapper(): void;
  setParentSVGAccessibility(): void;
  setGeometryAccessibilityAttributes(): void;
  setGeometryAriaLabels(): void;
  setChartAccessibilityTitle(): void;
  setChartAccessibilitySubtitle(): void;
  setChartAccessibilityLongDescription(): void;
  setChartAccessibilityExecutiveSummary(): void;
  setChartAccessibilityPurpose(): void;
  setChartAccessibilityContext(): void;
  setChartAccessibilityStatisticalNotes(): void;
  setChartCountAccessibility(): void;
  setChartAccessibilityStructureNotes(): void;
  onChangeHandler(): void;
  filterData(targetDepth: any): any;
  render(): any;
  private init;
}
