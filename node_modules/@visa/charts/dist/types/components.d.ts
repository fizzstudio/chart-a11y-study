/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
import { IAccessibilityType, IAnimationConfig, IAxisType, IBarStyleType, IBoxModelType, IClickStyleType, ICountryStyleType, IDataLabelType, IDifferenceLabelType, IFocusStyleType, IHoverStyleType, ILegendType, ILinkConfigType, IMapMarkerStyleType, IMarkerStyleType, INodeConfigType, IReferenceStyleType, ISecondaryLinesType, ISeriesLabelType, ITooltipLabelType } from "@visa/charts-types";
export namespace Components {
    interface AlluvialDiagram {
        "accessibility": IAccessibilityType;
        "animationConfig": IAnimationConfig;
        "annotations": object[];
        "clickHighlight": object[];
        "clickStyle": IClickStyleType;
        "colorPalette": string;
        "colors": string[];
        "cursor": string;
        "dataLabel": IDataLabelType;
        "groupAccessor": string;
        "height": number;
        "highestHeadingLevel": string | number;
        "hoverHighlight": object;
        "hoverOpacity": number;
        "hoverStyle": IHoverStyleType;
        "interactionKeys": string[];
        "linkConfig": ILinkConfigType;
        "linkData": object[];
        "mainTitle": string;
        "margin": IBoxModelType;
        "nodeConfig": INodeConfigType;
        "nodeData": object[];
        "nodeIDAccessor": string;
        "padding": IBoxModelType;
        "showTooltip": boolean;
        "sourceAccessor": string;
        "subTitle": string;
        "suppressEvents": boolean;
        "targetAccessor": string;
        "tooltipLabel": ITooltipLabelType;
        "uniqueID": string;
        "unitTest": boolean;
        "valueAccessor": string;
        "width": number;
    }
    interface BarChart {
        "accessibility": IAccessibilityType;
        "animationConfig": IAnimationConfig;
        "annotations": object[];
        "barIntervalRatio": number;
        "clickHighlight": object[];
        "clickStyle": IClickStyleType;
        "colorPalette": string;
        "colors": string[];
        "cursor": string;
        "data": object[];
        "dataLabel": IDataLabelType;
        "groupAccessor": string;
        "height": number;
        "highestHeadingLevel": string | number;
        "hoverHighlight": object;
        "hoverOpacity": number;
        "hoverStyle": IHoverStyleType;
        "interactionKeys": string[];
        "layout": string;
        "legend": ILegendType;
        "mainTitle": string;
        "margin": IBoxModelType;
        "maxValueOverride": number;
        "minValueOverride": number;
        "ordinalAccessor": string;
        "padding": IBoxModelType;
        "referenceLines": object[];
        "referenceStyle": IReferenceStyleType;
        "roundedCorner": number;
        "showTooltip": boolean;
        "sortOrder": string;
        "subTitle": string;
        "suppressEvents": boolean;
        "tooltipLabel": ITooltipLabelType;
        "uniqueID": string;
        "unitTest": boolean;
        "valueAccessor": string;
        "width": number;
        "wrapLabel": boolean;
        "xAxis": IAxisType;
        "yAxis": IAxisType;
    }
    interface CirclePacking {
        "accessibility": IAccessibilityType;
        "animationConfig": IAnimationConfig;
        "annotations": object[];
        "circlePadding": number;
        "clickHighlight": object[];
        "clickStyle": IClickStyleType;
        "colorPalette": string;
        "colors": string[];
        "cursor": string;
        "data": any;
        "dataDepth": number;
        "dataLabel": IDataLabelType;
        "displayDepth": number;
        "height": number;
        "highestHeadingLevel": string | number;
        "hoverHighlight": object;
        "hoverOpacity": number;
        "hoverStyle": IHoverStyleType;
        "interactionKeys": string[];
        "mainTitle": string;
        "margin": IBoxModelType;
        "nodeAccessor": string;
        "padding": IBoxModelType;
        "parentAccessor": string;
        "showTooltip": boolean;
        "sizeAccessor": string;
        "subTitle": string;
        "suppressEvents": boolean;
        "tooltipLabel": ITooltipLabelType;
        "uniqueID": any;
        "width": number;
        "zoomToNode": object;
    }
    interface ClusteredBarChart {
        "accessibility": IAccessibilityType;
        "animationConfig": IAnimationConfig;
        "annotations": object[];
        "barIntervalRatio": number;
        "clickHighlight": object[];
        "clickStyle": IClickStyleType;
        "colorPalette": string;
        "colors": string[];
        "cursor": string;
        "data": any;
        "dataLabel": IDataLabelType;
        "groupAccessor": string;
        "groupIntervalRatio": number;
        "height": number;
        "highestHeadingLevel": string | number;
        "hoverHighlight": object;
        "hoverOpacity": number;
        "hoverStyle": IHoverStyleType;
        "interactionKeys": string[];
        "layout": string;
        "legend": ILegendType;
        "mainTitle": string;
        "margin": IBoxModelType;
        "maxValueOverride": number;
        "minValueOverride": number;
        "ordinalAccessor": string;
        "padding": IBoxModelType;
        "referenceLines": object[];
        "referenceStyle": IReferenceStyleType;
        "reverseOrder": boolean;
        "roundedCorner": number;
        "showTooltip": boolean;
        "subTitle": string;
        "suppressEvents": boolean;
        "tooltipLabel": ITooltipLabelType;
        "uniqueID": any;
        "unitTest": boolean;
        "valueAccessor": string;
        "width": number;
        "wrapLabel": boolean;
        "xAxis": IAxisType;
        "yAxis": IAxisType;
    }
    interface DataTable {
        "data": object[];
        "hideDataTable": boolean;
        "isCompact": boolean;
        "margin": IBoxModelType;
        "padding": IBoxModelType;
        "secondaryData": object[];
        "secondaryTableColumns": string[];
        "tableColumns": string[];
        "uniqueID": string;
        "unitTest": boolean;
    }
    interface DumbbellPlot {
        "accessibility": IAccessibilityType;
        "animationConfig": IAnimationConfig;
        "annotations": object[];
        "barStyle": IBarStyleType;
        "clickHighlight": object[];
        "clickStyle": IClickStyleType;
        "colorPalette": string;
        "colors": string[];
        "cursor": string;
        "data": object[];
        "dataLabel": IDataLabelType;
        "differenceLabel": IDifferenceLabelType;
        "focusMarker": IFocusStyleType;
        "height": number;
        "highestHeadingLevel": string | number;
        "hoverHighlight": object;
        "hoverOpacity": number;
        "hoverStyle": IHoverStyleType;
        "interactionKeys": string[];
        "layout": string;
        "legend": ILegendType;
        "mainTitle": string;
        "margin": IBoxModelType;
        "marker": IMarkerStyleType;
        "maxValueOverride": number;
        "minValueOverride": number;
        "ordinalAccessor": string;
        "padding": IBoxModelType;
        "referenceLines": object[];
        "referenceStyle": IReferenceStyleType;
        "seriesAccessor": string;
        "seriesLabel": ISeriesLabelType;
        "showBaselineX": boolean;
        "showBaselineY": boolean;
        "showTooltip": boolean;
        "sortOrder": string;
        "subTitle": string;
        "suppressEvents": boolean;
        "tooltipLabel": ITooltipLabelType;
        "uniqueID": string;
        "unitTest": boolean;
        "valueAccessor": string;
        "width": number;
        "wrapLabel": boolean;
        "xAxis": IAxisType;
        "yAxis": IAxisType;
    }
    interface HeatMap {
        "accessibility": IAccessibilityType;
        "animationConfig": IAnimationConfig;
        "annotations": object[];
        "clickHighlight": object[];
        "clickStyle": IClickStyleType;
        "colorPalette": string;
        "colorSteps": number;
        "colors": string[];
        "cursor": string;
        "data": object[];
        "dataLabel": IDataLabelType;
        "height": number;
        "hideAxisPath": boolean;
        "highestHeadingLevel": string | number;
        "hoverHighlight": object;
        "hoverOpacity": number;
        "hoverStyle": IHoverStyleType;
        "interactionKeys": string[];
        "legend": ILegendType;
        "mainTitle": string;
        "margin": IBoxModelType;
        "maxValueOverride": number;
        "minValueOverride": number;
        "padding": IBoxModelType;
        "shape": string;
        "showTooltip": boolean;
        "strokeWidth": number;
        "subTitle": string;
        "suppressEvents": boolean;
        "tooltipLabel": ITooltipLabelType;
        "uniqueID": string;
        "unitTest": boolean;
        "valueAccessor": string;
        "width": number;
        "wrapLabel": boolean;
        "xAccessor": string;
        "xAxis": IAxisType;
        "xKeyOrder": string[];
        "yAccessor": string;
        "yAxis": IAxisType;
        "yKeyOrder": string[];
    }
    interface KeyboardInstructions {
        "chartTag": string;
        "cousinActionOverride": string;
        "cousinResultOverride": string;
        "disabled": boolean;
        "geomType": string;
        "groupName": string;
        "hasCousinNavigation": boolean;
        "isInteractive": boolean;
        "uniqueID": string;
        "unitTest": boolean;
        "width": number | string;
    }
    interface LineChart {
        "accessibility": IAccessibilityType;
        "animationConfig": IAnimationConfig;
        "annotations": object[];
        "clickHighlight": object[];
        "clickStyle": IClickStyleType;
        "colorPalette": string;
        "colors": string[];
        "cursor": string;
        "data": object[];
        "dataLabel": IDataLabelType;
        "dotRadius": number;
        "height": number;
        "highestHeadingLevel": string | number;
        "hoverHighlight": object;
        "hoverOpacity": number;
        "hoverStyle": IHoverStyleType;
        "interactionKeys": string[];
        "legend": ILegendType;
        "mainTitle": string;
        "margin": IBoxModelType;
        "maxValueOverride": number;
        "minValueOverride": number;
        "ordinalAccessor": string;
        "padding": IBoxModelType;
        "referenceLines": object[];
        "referenceStyle": IReferenceStyleType;
        "secondaryLines": ISecondaryLinesType;
        "seriesAccessor": string;
        "seriesLabel": ISeriesLabelType;
        "showBaselineX": boolean;
        "showDots": boolean;
        "showTooltip": boolean;
        "strokeWidth": number;
        "subTitle": string;
        "suppressEvents": boolean;
        "tooltipLabel": ITooltipLabelType;
        "uniqueID": string;
        "unitTest": boolean;
        "valueAccessor": string;
        "width": number;
        "wrapLabel": boolean;
        "xAxis": IAxisType;
        "yAxis": IAxisType;
    }
    interface ParallelPlot {
        "accessibility": IAccessibilityType;
        "animationConfig": IAnimationConfig;
        "annotations": object[];
        "clickHighlight": object[];
        "clickStyle": IClickStyleType;
        "colorPalette": string;
        "colors": string[];
        "cursor": string;
        "data": object[];
        "dataLabel": IDataLabelType;
        "dotRadius": number;
        "height": number;
        "highestHeadingLevel": string | number;
        "hoverHighlight": object;
        "hoverOpacity": number;
        "hoverStyle": IHoverStyleType;
        "interactionKeys": string[];
        "legend": ILegendType;
        "mainTitle": string;
        "margin": IBoxModelType;
        "maxValueOverride": number;
        "minValueOverride": number;
        "ordinalAccessor": string;
        "padding": IBoxModelType;
        "referenceLines": object[];
        "referenceStyle": IReferenceStyleType;
        "secondaryLines": ISecondaryLinesType;
        "seriesAccessor": string;
        "seriesLabel": ISeriesLabelType;
        "showBaselineX": boolean;
        "showDots": boolean;
        "showTooltip": boolean;
        "strokeWidth": number;
        "subTitle": string;
        "suppressEvents": boolean;
        "tooltipLabel": ITooltipLabelType;
        "uniqueID": string;
        "unitTest": boolean;
        "valueAccessor": string;
        "width": number;
        "wrapLabel": boolean;
        "xAxis": IAxisType;
        "yAxis": IAxisType;
    }
    interface PieChart {
        "accessibility": IAccessibilityType;
        "animationConfig": IAnimationConfig;
        "annotations": object[];
        "centerSubTitle": string;
        "centerTitle": string;
        "clickHighlight": object[];
        "clickStyle": IClickStyleType;
        "colorPalette": string;
        "colors": string[];
        "cursor": string;
        "data": object[];
        "dataLabel": IDataLabelType;
        "height": number;
        "highestHeadingLevel": string | number;
        "hoverHighlight": object;
        "hoverOpacity": number;
        "hoverStyle": IHoverStyleType;
        "innerRatio": number;
        "interactionKeys": string[];
        "labelOffset": number;
        "mainTitle": string;
        "margin": IBoxModelType;
        "ordinalAccessor": string;
        "padding": IBoxModelType;
        "referenceData": object[];
        "referenceStyle": IReferenceStyleType;
        "showEdgeLine": boolean;
        "showLabelNote": boolean;
        "showPercentage": boolean;
        "showTooltip": boolean;
        "sortOrder": string;
        "subTitle": string;
        "suppressEvents": boolean;
        "tooltipLabel": ITooltipLabelType;
        "uniqueID": string;
        "unitTest": boolean;
        "valueAccessor": string;
        "width": number;
    }
    interface ScatterPlot {
        "accessibility": IAccessibilityType;
        "animationConfig": IAnimationConfig;
        "annotations": object[];
        "clickHighlight": object[];
        "clickStyle": IClickStyleType;
        "colorPalette": string;
        "colors": string[];
        "cursor": string;
        "data": object[];
        "dataLabel": IDataLabelType;
        "dotOpacity": number;
        "dotRadius": number;
        "dotSymbols": string[];
        "fitLineStyle": IReferenceStyleType;
        "groupAccessor": string;
        "height": number;
        "highestHeadingLevel": string | number;
        "hoverHighlight": object;
        "hoverOpacity": number;
        "hoverStyle": IHoverStyleType;
        "interactionKeys": string[];
        "legend": ILegendType;
        "mainTitle": string;
        "margin": IBoxModelType;
        "padding": IBoxModelType;
        "referenceLines": object[];
        "referenceStyle": IReferenceStyleType;
        "showBaselineX": boolean;
        "showBaselineY": boolean;
        "showFitLine": boolean;
        "showTooltip": boolean;
        "sizeConfig": any;
        "subTitle": string;
        "suppressEvents": boolean;
        "tooltipLabel": ITooltipLabelType;
        "uniqueID": string;
        "unitTest": boolean;
        "width": number;
        "xAccessor": string;
        "xAxis": IAxisType;
        "xMaxValueOverride": number;
        "xMinValueOverride": number;
        "yAccessor": string;
        "yAxis": IAxisType;
        "yMaxValueOverride": number;
        "yMinValueOverride": number;
    }
    interface StackedBarChart {
        "accessibility": IAccessibilityType;
        "animationConfig": IAnimationConfig;
        "annotations": object[];
        "barIntervalRatio": number;
        "clickHighlight": object[];
        "clickStyle": IClickStyleType;
        "colorPalette": string;
        "colors": string[];
        "cursor": string;
        "data": object[];
        "dataLabel": IDataLabelType;
        "groupAccessor": string;
        "height": number;
        "highestHeadingLevel": string | number;
        "hoverHighlight": object;
        "hoverOpacity": number;
        "hoverStyle": IHoverStyleType;
        "interactionKeys": string[];
        "layout": string;
        "legend": ILegendType;
        "mainTitle": string;
        "margin": IBoxModelType;
        "maxValueOverride": number;
        "minValueOverride": number;
        "normalized": boolean;
        "ordinalAccessor": string;
        "padding": IBoxModelType;
        "referenceLines": object[];
        "referenceStyle": IReferenceStyleType;
        "roundedCorner": number;
        "showTooltip": boolean;
        "showTotalValue": boolean;
        "showZeroLabels": boolean;
        "sortOrder": string;
        "subTitle": string;
        "suppressEvents": boolean;
        "tooltipLabel": ITooltipLabelType;
        "uniqueID": string;
        "unitTest": boolean;
        "valueAccessor": string;
        "width": number;
        "wrapLabel": boolean;
        "xAxis": IAxisType;
        "yAxis": IAxisType;
    }
    interface WorldMap {
        "accessibility": IAccessibilityType;
        "animationConfig": IAnimationConfig;
        "annotations": object[];
        "clickHighlight": object[];
        "clickStyle": IClickStyleType;
        "colorPalette": string;
        "colorSteps": number;
        "colors": string[];
        "countryStyle": ICountryStyleType;
        "cursor": string;
        "data": object[];
        "dataLabel": IDataLabelType;
        "groupAccessor": string;
        "height": number;
        "highestHeadingLevel": string | number;
        "hoverHighlight": object;
        "hoverOpacity": number;
        "hoverStyle": IHoverStyleType;
        "interactionKeys": string[];
        "joinAccessor": string;
        "joinNameAccessor": string;
        "latitudeAccessor": string;
        "legend": ILegendType;
        "longitudeAccessor": string;
        "mainTitle": string;
        "mapProjection": string;
        "mapScaleZoom": number;
        "margin": IBoxModelType;
        "markerAccessor": string;
        "markerNameAccessor": string;
        "markerStyle": IMapMarkerStyleType;
        "maxValueOverride": number;
        "minValueOverride": number;
        "padding": IBoxModelType;
        "quality": string;
        "showGridlines": boolean;
        "showTooltip": boolean;
        "sortOrder": string;
        "subTitle": string;
        "suppressEvents": boolean;
        "tooltipLabel": ITooltipLabelType;
        "uniqueID": string;
        "unitTest": boolean;
        "valueAccessor": string;
        "width": number;
    }
}
declare global {
    interface HTMLAlluvialDiagramElement extends Components.AlluvialDiagram, HTMLStencilElement {
    }
    var HTMLAlluvialDiagramElement: {
        prototype: HTMLAlluvialDiagramElement;
        new (): HTMLAlluvialDiagramElement;
    };
    interface HTMLBarChartElement extends Components.BarChart, HTMLStencilElement {
    }
    var HTMLBarChartElement: {
        prototype: HTMLBarChartElement;
        new (): HTMLBarChartElement;
    };
    interface HTMLCirclePackingElement extends Components.CirclePacking, HTMLStencilElement {
    }
    var HTMLCirclePackingElement: {
        prototype: HTMLCirclePackingElement;
        new (): HTMLCirclePackingElement;
    };
    interface HTMLClusteredBarChartElement extends Components.ClusteredBarChart, HTMLStencilElement {
    }
    var HTMLClusteredBarChartElement: {
        prototype: HTMLClusteredBarChartElement;
        new (): HTMLClusteredBarChartElement;
    };
    interface HTMLDataTableElement extends Components.DataTable, HTMLStencilElement {
    }
    var HTMLDataTableElement: {
        prototype: HTMLDataTableElement;
        new (): HTMLDataTableElement;
    };
    interface HTMLDumbbellPlotElement extends Components.DumbbellPlot, HTMLStencilElement {
    }
    var HTMLDumbbellPlotElement: {
        prototype: HTMLDumbbellPlotElement;
        new (): HTMLDumbbellPlotElement;
    };
    interface HTMLHeatMapElement extends Components.HeatMap, HTMLStencilElement {
    }
    var HTMLHeatMapElement: {
        prototype: HTMLHeatMapElement;
        new (): HTMLHeatMapElement;
    };
    interface HTMLKeyboardInstructionsElement extends Components.KeyboardInstructions, HTMLStencilElement {
    }
    var HTMLKeyboardInstructionsElement: {
        prototype: HTMLKeyboardInstructionsElement;
        new (): HTMLKeyboardInstructionsElement;
    };
    interface HTMLLineChartElement extends Components.LineChart, HTMLStencilElement {
    }
    var HTMLLineChartElement: {
        prototype: HTMLLineChartElement;
        new (): HTMLLineChartElement;
    };
    interface HTMLParallelPlotElement extends Components.ParallelPlot, HTMLStencilElement {
    }
    var HTMLParallelPlotElement: {
        prototype: HTMLParallelPlotElement;
        new (): HTMLParallelPlotElement;
    };
    interface HTMLPieChartElement extends Components.PieChart, HTMLStencilElement {
    }
    var HTMLPieChartElement: {
        prototype: HTMLPieChartElement;
        new (): HTMLPieChartElement;
    };
    interface HTMLScatterPlotElement extends Components.ScatterPlot, HTMLStencilElement {
    }
    var HTMLScatterPlotElement: {
        prototype: HTMLScatterPlotElement;
        new (): HTMLScatterPlotElement;
    };
    interface HTMLStackedBarChartElement extends Components.StackedBarChart, HTMLStencilElement {
    }
    var HTMLStackedBarChartElement: {
        prototype: HTMLStackedBarChartElement;
        new (): HTMLStackedBarChartElement;
    };
    interface HTMLWorldMapElement extends Components.WorldMap, HTMLStencilElement {
    }
    var HTMLWorldMapElement: {
        prototype: HTMLWorldMapElement;
        new (): HTMLWorldMapElement;
    };
    interface HTMLElementTagNameMap {
        "alluvial-diagram": HTMLAlluvialDiagramElement;
        "bar-chart": HTMLBarChartElement;
        "circle-packing": HTMLCirclePackingElement;
        "clustered-bar-chart": HTMLClusteredBarChartElement;
        "data-table": HTMLDataTableElement;
        "dumbbell-plot": HTMLDumbbellPlotElement;
        "heat-map": HTMLHeatMapElement;
        "keyboard-instructions": HTMLKeyboardInstructionsElement;
        "line-chart": HTMLLineChartElement;
        "parallel-plot": HTMLParallelPlotElement;
        "pie-chart": HTMLPieChartElement;
        "scatter-plot": HTMLScatterPlotElement;
        "stacked-bar-chart": HTMLStackedBarChartElement;
        "world-map": HTMLWorldMapElement;
    }
}
declare namespace LocalJSX {
    interface AlluvialDiagram {
        "accessibility"?: IAccessibilityType;
        "animationConfig"?: IAnimationConfig;
        "annotations"?: object[];
        "clickHighlight"?: object[];
        "clickStyle"?: IClickStyleType;
        "colorPalette"?: string;
        "colors"?: string[];
        "cursor"?: string;
        "dataLabel"?: IDataLabelType;
        "groupAccessor"?: string;
        "height"?: number;
        "highestHeadingLevel"?: string | number;
        "hoverHighlight"?: object;
        "hoverOpacity"?: number;
        "hoverStyle"?: IHoverStyleType;
        "interactionKeys"?: string[];
        "linkConfig"?: ILinkConfigType;
        "linkData"?: object[];
        "mainTitle"?: string;
        "margin"?: IBoxModelType;
        "nodeConfig"?: INodeConfigType;
        "nodeData"?: object[];
        "nodeIDAccessor"?: string;
        "onClickEvent"?: (event: CustomEvent<any>) => void;
        "onDrawEndEvent"?: (event: CustomEvent<any>) => void;
        "onDrawStartEvent"?: (event: CustomEvent<any>) => void;
        "onHoverEvent"?: (event: CustomEvent<any>) => void;
        "onInitialLoadEvent"?: (event: CustomEvent<any>) => void;
        "onMouseOutEvent"?: (event: CustomEvent<any>) => void;
        "onTransitionEndEvent"?: (event: CustomEvent<any>) => void;
        "padding"?: IBoxModelType;
        "showTooltip"?: boolean;
        "sourceAccessor"?: string;
        "subTitle"?: string;
        "suppressEvents"?: boolean;
        "targetAccessor"?: string;
        "tooltipLabel"?: ITooltipLabelType;
        "uniqueID"?: string;
        "unitTest"?: boolean;
        "valueAccessor"?: string;
        "width"?: number;
    }
    interface BarChart {
        "accessibility"?: IAccessibilityType;
        "animationConfig"?: IAnimationConfig;
        "annotations"?: object[];
        "barIntervalRatio"?: number;
        "clickHighlight"?: object[];
        "clickStyle"?: IClickStyleType;
        "colorPalette"?: string;
        "colors"?: string[];
        "cursor"?: string;
        "data"?: object[];
        "dataLabel"?: IDataLabelType;
        "groupAccessor"?: string;
        "height"?: number;
        "highestHeadingLevel"?: string | number;
        "hoverHighlight"?: object;
        "hoverOpacity"?: number;
        "hoverStyle"?: IHoverStyleType;
        "interactionKeys"?: string[];
        "layout"?: string;
        "legend"?: ILegendType;
        "mainTitle"?: string;
        "margin"?: IBoxModelType;
        "maxValueOverride"?: number;
        "minValueOverride"?: number;
        "onClickEvent"?: (event: CustomEvent<any>) => void;
        "onDrawEndEvent"?: (event: CustomEvent<any>) => void;
        "onDrawStartEvent"?: (event: CustomEvent<any>) => void;
        "onHoverEvent"?: (event: CustomEvent<any>) => void;
        "onInitialLoadEvent"?: (event: CustomEvent<any>) => void;
        "onMouseOutEvent"?: (event: CustomEvent<any>) => void;
        "onTransitionEndEvent"?: (event: CustomEvent<any>) => void;
        "ordinalAccessor"?: string;
        "padding"?: IBoxModelType;
        "referenceLines"?: object[];
        "referenceStyle"?: IReferenceStyleType;
        "roundedCorner"?: number;
        "showTooltip"?: boolean;
        "sortOrder"?: string;
        "subTitle"?: string;
        "suppressEvents"?: boolean;
        "tooltipLabel"?: ITooltipLabelType;
        "uniqueID"?: string;
        "unitTest"?: boolean;
        "valueAccessor"?: string;
        "width"?: number;
        "wrapLabel"?: boolean;
        "xAxis"?: IAxisType;
        "yAxis"?: IAxisType;
    }
    interface CirclePacking {
        "accessibility"?: IAccessibilityType;
        "animationConfig"?: IAnimationConfig;
        "annotations"?: object[];
        "circlePadding"?: number;
        "clickHighlight"?: object[];
        "clickStyle"?: IClickStyleType;
        "colorPalette"?: string;
        "colors"?: string[];
        "cursor"?: string;
        "data"?: any;
        "dataDepth"?: number;
        "dataLabel"?: IDataLabelType;
        "displayDepth"?: number;
        "height"?: number;
        "highestHeadingLevel"?: string | number;
        "hoverHighlight"?: object;
        "hoverOpacity"?: number;
        "hoverStyle"?: IHoverStyleType;
        "interactionKeys"?: string[];
        "mainTitle"?: string;
        "margin"?: IBoxModelType;
        "nodeAccessor"?: string;
        "onClickEvent"?: (event: CustomEvent<any>) => void;
        "onDrawEndEvent"?: (event: CustomEvent<any>) => void;
        "onDrawStartEvent"?: (event: CustomEvent<any>) => void;
        "onHoverEvent"?: (event: CustomEvent<any>) => void;
        "onInitialLoadEvent"?: (event: CustomEvent<any>) => void;
        "onMouseOutEvent"?: (event: CustomEvent<any>) => void;
        "onTransitionEndEvent"?: (event: CustomEvent<any>) => void;
        "padding"?: IBoxModelType;
        "parentAccessor"?: string;
        "showTooltip"?: boolean;
        "sizeAccessor"?: string;
        "subTitle"?: string;
        "suppressEvents"?: boolean;
        "tooltipLabel"?: ITooltipLabelType;
        "uniqueID"?: any;
        "width"?: number;
        "zoomToNode"?: object;
    }
    interface ClusteredBarChart {
        "accessibility"?: IAccessibilityType;
        "animationConfig"?: IAnimationConfig;
        "annotations"?: object[];
        "barIntervalRatio"?: number;
        "clickHighlight"?: object[];
        "clickStyle"?: IClickStyleType;
        "colorPalette"?: string;
        "colors"?: string[];
        "cursor"?: string;
        "data"?: any;
        "dataLabel"?: IDataLabelType;
        "groupAccessor"?: string;
        "groupIntervalRatio"?: number;
        "height"?: number;
        "highestHeadingLevel"?: string | number;
        "hoverHighlight"?: object;
        "hoverOpacity"?: number;
        "hoverStyle"?: IHoverStyleType;
        "interactionKeys"?: string[];
        "layout"?: string;
        "legend"?: ILegendType;
        "mainTitle"?: string;
        "margin"?: IBoxModelType;
        "maxValueOverride"?: number;
        "minValueOverride"?: number;
        "onClickEvent"?: (event: CustomEvent<any>) => void;
        "onDrawEndEvent"?: (event: CustomEvent<any>) => void;
        "onDrawStartEvent"?: (event: CustomEvent<any>) => void;
        "onHoverEvent"?: (event: CustomEvent<any>) => void;
        "onInitialLoadEvent"?: (event: CustomEvent<any>) => void;
        "onMouseOutEvent"?: (event: CustomEvent<any>) => void;
        "onTransitionEndEvent"?: (event: CustomEvent<any>) => void;
        "ordinalAccessor"?: string;
        "padding"?: IBoxModelType;
        "referenceLines"?: object[];
        "referenceStyle"?: IReferenceStyleType;
        "reverseOrder"?: boolean;
        "roundedCorner"?: number;
        "showTooltip"?: boolean;
        "subTitle"?: string;
        "suppressEvents"?: boolean;
        "tooltipLabel"?: ITooltipLabelType;
        "uniqueID"?: any;
        "unitTest"?: boolean;
        "valueAccessor"?: string;
        "width"?: number;
        "wrapLabel"?: boolean;
        "xAxis"?: IAxisType;
        "yAxis"?: IAxisType;
    }
    interface DataTable {
        "data"?: object[];
        "hideDataTable"?: boolean;
        "isCompact"?: boolean;
        "margin"?: IBoxModelType;
        "padding"?: IBoxModelType;
        "secondaryData"?: object[];
        "secondaryTableColumns"?: string[];
        "tableColumns"?: string[];
        "uniqueID"?: string;
        "unitTest"?: boolean;
    }
    interface DumbbellPlot {
        "accessibility"?: IAccessibilityType;
        "animationConfig"?: IAnimationConfig;
        "annotations"?: object[];
        "barStyle"?: IBarStyleType;
        "clickHighlight"?: object[];
        "clickStyle"?: IClickStyleType;
        "colorPalette"?: string;
        "colors"?: string[];
        "cursor"?: string;
        "data"?: object[];
        "dataLabel"?: IDataLabelType;
        "differenceLabel"?: IDifferenceLabelType;
        "focusMarker"?: IFocusStyleType;
        "height"?: number;
        "highestHeadingLevel"?: string | number;
        "hoverHighlight"?: object;
        "hoverOpacity"?: number;
        "hoverStyle"?: IHoverStyleType;
        "interactionKeys"?: string[];
        "layout"?: string;
        "legend"?: ILegendType;
        "mainTitle"?: string;
        "margin"?: IBoxModelType;
        "marker"?: IMarkerStyleType;
        "maxValueOverride"?: number;
        "minValueOverride"?: number;
        "onClickEvent"?: (event: CustomEvent<any>) => void;
        "onDrawEndEvent"?: (event: CustomEvent<any>) => void;
        "onDrawStartEvent"?: (event: CustomEvent<any>) => void;
        "onHoverEvent"?: (event: CustomEvent<any>) => void;
        "onInitialLoadEvent"?: (event: CustomEvent<any>) => void;
        "onMouseOutEvent"?: (event: CustomEvent<any>) => void;
        "onTransitionEndEvent"?: (event: CustomEvent<any>) => void;
        "ordinalAccessor"?: string;
        "padding"?: IBoxModelType;
        "referenceLines"?: object[];
        "referenceStyle"?: IReferenceStyleType;
        "seriesAccessor"?: string;
        "seriesLabel"?: ISeriesLabelType;
        "showBaselineX"?: boolean;
        "showBaselineY"?: boolean;
        "showTooltip"?: boolean;
        "sortOrder"?: string;
        "subTitle"?: string;
        "suppressEvents"?: boolean;
        "tooltipLabel"?: ITooltipLabelType;
        "uniqueID"?: string;
        "unitTest"?: boolean;
        "valueAccessor"?: string;
        "width"?: number;
        "wrapLabel"?: boolean;
        "xAxis"?: IAxisType;
        "yAxis"?: IAxisType;
    }
    interface HeatMap {
        "accessibility"?: IAccessibilityType;
        "animationConfig"?: IAnimationConfig;
        "annotations"?: object[];
        "clickHighlight"?: object[];
        "clickStyle"?: IClickStyleType;
        "colorPalette"?: string;
        "colorSteps"?: number;
        "colors"?: string[];
        "cursor"?: string;
        "data"?: object[];
        "dataLabel"?: IDataLabelType;
        "height"?: number;
        "hideAxisPath"?: boolean;
        "highestHeadingLevel"?: string | number;
        "hoverHighlight"?: object;
        "hoverOpacity"?: number;
        "hoverStyle"?: IHoverStyleType;
        "interactionKeys"?: string[];
        "legend"?: ILegendType;
        "mainTitle"?: string;
        "margin"?: IBoxModelType;
        "maxValueOverride"?: number;
        "minValueOverride"?: number;
        "onClickEvent"?: (event: CustomEvent<any>) => void;
        "onDrawEndEvent"?: (event: CustomEvent<any>) => void;
        "onDrawStartEvent"?: (event: CustomEvent<any>) => void;
        "onHoverEvent"?: (event: CustomEvent<any>) => void;
        "onInitialLoadEvent"?: (event: CustomEvent<any>) => void;
        "onMouseOutEvent"?: (event: CustomEvent<any>) => void;
        "onTransitionEndEvent"?: (event: CustomEvent<any>) => void;
        "padding"?: IBoxModelType;
        "shape"?: string;
        "showTooltip"?: boolean;
        "strokeWidth"?: number;
        "subTitle"?: string;
        "suppressEvents"?: boolean;
        "tooltipLabel"?: ITooltipLabelType;
        "uniqueID"?: string;
        "unitTest"?: boolean;
        "valueAccessor"?: string;
        "width"?: number;
        "wrapLabel"?: boolean;
        "xAccessor"?: string;
        "xAxis"?: IAxisType;
        "xKeyOrder"?: string[];
        "yAccessor"?: string;
        "yAxis"?: IAxisType;
        "yKeyOrder"?: string[];
    }
    interface KeyboardInstructions {
        "chartTag"?: string;
        "cousinActionOverride"?: string;
        "cousinResultOverride"?: string;
        "disabled"?: boolean;
        "geomType"?: string;
        "groupName"?: string;
        "hasCousinNavigation"?: boolean;
        "isInteractive"?: boolean;
        "uniqueID"?: string;
        "unitTest"?: boolean;
        "width"?: number | string;
    }
    interface LineChart {
        "accessibility"?: IAccessibilityType;
        "animationConfig"?: IAnimationConfig;
        "annotations"?: object[];
        "clickHighlight"?: object[];
        "clickStyle"?: IClickStyleType;
        "colorPalette"?: string;
        "colors"?: string[];
        "cursor"?: string;
        "data"?: object[];
        "dataLabel"?: IDataLabelType;
        "dotRadius"?: number;
        "height"?: number;
        "highestHeadingLevel"?: string | number;
        "hoverHighlight"?: object;
        "hoverOpacity"?: number;
        "hoverStyle"?: IHoverStyleType;
        "interactionKeys"?: string[];
        "legend"?: ILegendType;
        "mainTitle"?: string;
        "margin"?: IBoxModelType;
        "maxValueOverride"?: number;
        "minValueOverride"?: number;
        "onClickEvent"?: (event: CustomEvent<any>) => void;
        "onDrawEndEvent"?: (event: CustomEvent<any>) => void;
        "onDrawStartEvent"?: (event: CustomEvent<any>) => void;
        "onHoverEvent"?: (event: CustomEvent<any>) => void;
        "onInitialLoadEvent"?: (event: CustomEvent<any>) => void;
        "onMouseOutEvent"?: (event: CustomEvent<any>) => void;
        "onTransitionEndEvent"?: (event: CustomEvent<any>) => void;
        "ordinalAccessor"?: string;
        "padding"?: IBoxModelType;
        "referenceLines"?: object[];
        "referenceStyle"?: IReferenceStyleType;
        "secondaryLines"?: ISecondaryLinesType;
        "seriesAccessor"?: string;
        "seriesLabel"?: ISeriesLabelType;
        "showBaselineX"?: boolean;
        "showDots"?: boolean;
        "showTooltip"?: boolean;
        "strokeWidth"?: number;
        "subTitle"?: string;
        "suppressEvents"?: boolean;
        "tooltipLabel"?: ITooltipLabelType;
        "uniqueID"?: string;
        "unitTest"?: boolean;
        "valueAccessor"?: string;
        "width"?: number;
        "wrapLabel"?: boolean;
        "xAxis"?: IAxisType;
        "yAxis"?: IAxisType;
    }
    interface ParallelPlot {
        "accessibility"?: IAccessibilityType;
        "animationConfig"?: IAnimationConfig;
        "annotations"?: object[];
        "clickHighlight"?: object[];
        "clickStyle"?: IClickStyleType;
        "colorPalette"?: string;
        "colors"?: string[];
        "cursor"?: string;
        "data"?: object[];
        "dataLabel"?: IDataLabelType;
        "dotRadius"?: number;
        "height"?: number;
        "highestHeadingLevel"?: string | number;
        "hoverHighlight"?: object;
        "hoverOpacity"?: number;
        "hoverStyle"?: IHoverStyleType;
        "interactionKeys"?: string[];
        "legend"?: ILegendType;
        "mainTitle"?: string;
        "margin"?: IBoxModelType;
        "maxValueOverride"?: number;
        "minValueOverride"?: number;
        "onClickEvent"?: (event: CustomEvent<any>) => void;
        "onDrawEndEvent"?: (event: CustomEvent<any>) => void;
        "onDrawStartEvent"?: (event: CustomEvent<any>) => void;
        "onHoverEvent"?: (event: CustomEvent<any>) => void;
        "onInitialLoadEvent"?: (event: CustomEvent<any>) => void;
        "onMouseOutEvent"?: (event: CustomEvent<any>) => void;
        "onTransitionEndEvent"?: (event: CustomEvent<any>) => void;
        "ordinalAccessor"?: string;
        "padding"?: IBoxModelType;
        "referenceLines"?: object[];
        "referenceStyle"?: IReferenceStyleType;
        "secondaryLines"?: ISecondaryLinesType;
        "seriesAccessor"?: string;
        "seriesLabel"?: ISeriesLabelType;
        "showBaselineX"?: boolean;
        "showDots"?: boolean;
        "showTooltip"?: boolean;
        "strokeWidth"?: number;
        "subTitle"?: string;
        "suppressEvents"?: boolean;
        "tooltipLabel"?: ITooltipLabelType;
        "uniqueID"?: string;
        "unitTest"?: boolean;
        "valueAccessor"?: string;
        "width"?: number;
        "wrapLabel"?: boolean;
        "xAxis"?: IAxisType;
        "yAxis"?: IAxisType;
    }
    interface PieChart {
        "accessibility"?: IAccessibilityType;
        "animationConfig"?: IAnimationConfig;
        "annotations"?: object[];
        "centerSubTitle"?: string;
        "centerTitle"?: string;
        "clickHighlight"?: object[];
        "clickStyle"?: IClickStyleType;
        "colorPalette"?: string;
        "colors"?: string[];
        "cursor"?: string;
        "data"?: object[];
        "dataLabel"?: IDataLabelType;
        "height"?: number;
        "highestHeadingLevel"?: string | number;
        "hoverHighlight"?: object;
        "hoverOpacity"?: number;
        "hoverStyle"?: IHoverStyleType;
        "innerRatio"?: number;
        "interactionKeys"?: string[];
        "labelOffset"?: number;
        "mainTitle"?: string;
        "margin"?: IBoxModelType;
        "onClickEvent"?: (event: CustomEvent<any>) => void;
        "onDrawEndEvent"?: (event: CustomEvent<any>) => void;
        "onDrawStartEvent"?: (event: CustomEvent<any>) => void;
        "onHoverEvent"?: (event: CustomEvent<any>) => void;
        "onInitialLoadEvent"?: (event: CustomEvent<any>) => void;
        "onMouseOutEvent"?: (event: CustomEvent<any>) => void;
        "onTransitionEndEvent"?: (event: CustomEvent<any>) => void;
        "ordinalAccessor"?: string;
        "padding"?: IBoxModelType;
        "referenceData"?: object[];
        "referenceStyle"?: IReferenceStyleType;
        "showEdgeLine"?: boolean;
        "showLabelNote"?: boolean;
        "showPercentage"?: boolean;
        "showTooltip"?: boolean;
        "sortOrder"?: string;
        "subTitle"?: string;
        "suppressEvents"?: boolean;
        "tooltipLabel"?: ITooltipLabelType;
        "uniqueID"?: string;
        "unitTest"?: boolean;
        "valueAccessor"?: string;
        "width"?: number;
    }
    interface ScatterPlot {
        "accessibility"?: IAccessibilityType;
        "animationConfig"?: IAnimationConfig;
        "annotations"?: object[];
        "clickHighlight"?: object[];
        "clickStyle"?: IClickStyleType;
        "colorPalette"?: string;
        "colors"?: string[];
        "cursor"?: string;
        "data"?: object[];
        "dataLabel"?: IDataLabelType;
        "dotOpacity"?: number;
        "dotRadius"?: number;
        "dotSymbols"?: string[];
        "fitLineStyle"?: IReferenceStyleType;
        "groupAccessor"?: string;
        "height"?: number;
        "highestHeadingLevel"?: string | number;
        "hoverHighlight"?: object;
        "hoverOpacity"?: number;
        "hoverStyle"?: IHoverStyleType;
        "interactionKeys"?: string[];
        "legend"?: ILegendType;
        "mainTitle"?: string;
        "margin"?: IBoxModelType;
        "onClickEvent"?: (event: CustomEvent<any>) => void;
        "onDrawEndEvent"?: (event: CustomEvent<any>) => void;
        "onDrawStartEvent"?: (event: CustomEvent<any>) => void;
        "onHoverEvent"?: (event: CustomEvent<any>) => void;
        "onInitialLoadEvent"?: (event: CustomEvent<any>) => void;
        "onMouseOutEvent"?: (event: CustomEvent<any>) => void;
        "onTransitionEndEvent"?: (event: CustomEvent<any>) => void;
        "padding"?: IBoxModelType;
        "referenceLines"?: object[];
        "referenceStyle"?: IReferenceStyleType;
        "showBaselineX"?: boolean;
        "showBaselineY"?: boolean;
        "showFitLine"?: boolean;
        "showTooltip"?: boolean;
        "sizeConfig"?: any;
        "subTitle"?: string;
        "suppressEvents"?: boolean;
        "tooltipLabel"?: ITooltipLabelType;
        "uniqueID"?: string;
        "unitTest"?: boolean;
        "width"?: number;
        "xAccessor"?: string;
        "xAxis"?: IAxisType;
        "xMaxValueOverride"?: number;
        "xMinValueOverride"?: number;
        "yAccessor"?: string;
        "yAxis"?: IAxisType;
        "yMaxValueOverride"?: number;
        "yMinValueOverride"?: number;
    }
    interface StackedBarChart {
        "accessibility"?: IAccessibilityType;
        "animationConfig"?: IAnimationConfig;
        "annotations"?: object[];
        "barIntervalRatio"?: number;
        "clickHighlight"?: object[];
        "clickStyle"?: IClickStyleType;
        "colorPalette"?: string;
        "colors"?: string[];
        "cursor"?: string;
        "data"?: object[];
        "dataLabel"?: IDataLabelType;
        "groupAccessor"?: string;
        "height"?: number;
        "highestHeadingLevel"?: string | number;
        "hoverHighlight"?: object;
        "hoverOpacity"?: number;
        "hoverStyle"?: IHoverStyleType;
        "interactionKeys"?: string[];
        "layout"?: string;
        "legend"?: ILegendType;
        "mainTitle"?: string;
        "margin"?: IBoxModelType;
        "maxValueOverride"?: number;
        "minValueOverride"?: number;
        "normalized"?: boolean;
        "onClickEvent"?: (event: CustomEvent<any>) => void;
        "onDrawEndEvent"?: (event: CustomEvent<any>) => void;
        "onDrawStartEvent"?: (event: CustomEvent<any>) => void;
        "onHoverEvent"?: (event: CustomEvent<any>) => void;
        "onInitialLoadEvent"?: (event: CustomEvent<any>) => void;
        "onMouseOutEvent"?: (event: CustomEvent<any>) => void;
        "onTransitionEndEvent"?: (event: CustomEvent<any>) => void;
        "ordinalAccessor"?: string;
        "padding"?: IBoxModelType;
        "referenceLines"?: object[];
        "referenceStyle"?: IReferenceStyleType;
        "roundedCorner"?: number;
        "showTooltip"?: boolean;
        "showTotalValue"?: boolean;
        "showZeroLabels"?: boolean;
        "sortOrder"?: string;
        "subTitle"?: string;
        "suppressEvents"?: boolean;
        "tooltipLabel"?: ITooltipLabelType;
        "uniqueID"?: string;
        "unitTest"?: boolean;
        "valueAccessor"?: string;
        "width"?: number;
        "wrapLabel"?: boolean;
        "xAxis"?: IAxisType;
        "yAxis"?: IAxisType;
    }
    interface WorldMap {
        "accessibility"?: IAccessibilityType;
        "animationConfig"?: IAnimationConfig;
        "annotations"?: object[];
        "clickHighlight"?: object[];
        "clickStyle"?: IClickStyleType;
        "colorPalette"?: string;
        "colorSteps"?: number;
        "colors"?: string[];
        "countryStyle"?: ICountryStyleType;
        "cursor"?: string;
        "data"?: object[];
        "dataLabel"?: IDataLabelType;
        "groupAccessor"?: string;
        "height"?: number;
        "highestHeadingLevel"?: string | number;
        "hoverHighlight"?: object;
        "hoverOpacity"?: number;
        "hoverStyle"?: IHoverStyleType;
        "interactionKeys"?: string[];
        "joinAccessor"?: string;
        "joinNameAccessor"?: string;
        "latitudeAccessor"?: string;
        "legend"?: ILegendType;
        "longitudeAccessor"?: string;
        "mainTitle"?: string;
        "mapProjection"?: string;
        "mapScaleZoom"?: number;
        "margin"?: IBoxModelType;
        "markerAccessor"?: string;
        "markerNameAccessor"?: string;
        "markerStyle"?: IMapMarkerStyleType;
        "maxValueOverride"?: number;
        "minValueOverride"?: number;
        "onClickEvent"?: (event: CustomEvent<any>) => void;
        "onDrawEndEvent"?: (event: CustomEvent<any>) => void;
        "onDrawStartEvent"?: (event: CustomEvent<any>) => void;
        "onHoverEvent"?: (event: CustomEvent<any>) => void;
        "onInitialLoadEvent"?: (event: CustomEvent<any>) => void;
        "onMouseOutEvent"?: (event: CustomEvent<any>) => void;
        "onTransitionEndEvent"?: (event: CustomEvent<any>) => void;
        "padding"?: IBoxModelType;
        "quality"?: string;
        "showGridlines"?: boolean;
        "showTooltip"?: boolean;
        "sortOrder"?: string;
        "subTitle"?: string;
        "suppressEvents"?: boolean;
        "tooltipLabel"?: ITooltipLabelType;
        "uniqueID"?: string;
        "unitTest"?: boolean;
        "valueAccessor"?: string;
        "width"?: number;
    }
    interface IntrinsicElements {
        "alluvial-diagram": AlluvialDiagram;
        "bar-chart": BarChart;
        "circle-packing": CirclePacking;
        "clustered-bar-chart": ClusteredBarChart;
        "data-table": DataTable;
        "dumbbell-plot": DumbbellPlot;
        "heat-map": HeatMap;
        "keyboard-instructions": KeyboardInstructions;
        "line-chart": LineChart;
        "parallel-plot": ParallelPlot;
        "pie-chart": PieChart;
        "scatter-plot": ScatterPlot;
        "stacked-bar-chart": StackedBarChart;
        "world-map": WorldMap;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "alluvial-diagram": LocalJSX.AlluvialDiagram & JSXBase.HTMLAttributes<HTMLAlluvialDiagramElement>;
            "bar-chart": LocalJSX.BarChart & JSXBase.HTMLAttributes<HTMLBarChartElement>;
            "circle-packing": LocalJSX.CirclePacking & JSXBase.HTMLAttributes<HTMLCirclePackingElement>;
            "clustered-bar-chart": LocalJSX.ClusteredBarChart & JSXBase.HTMLAttributes<HTMLClusteredBarChartElement>;
            "data-table": LocalJSX.DataTable & JSXBase.HTMLAttributes<HTMLDataTableElement>;
            "dumbbell-plot": LocalJSX.DumbbellPlot & JSXBase.HTMLAttributes<HTMLDumbbellPlotElement>;
            "heat-map": LocalJSX.HeatMap & JSXBase.HTMLAttributes<HTMLHeatMapElement>;
            "keyboard-instructions": LocalJSX.KeyboardInstructions & JSXBase.HTMLAttributes<HTMLKeyboardInstructionsElement>;
            "line-chart": LocalJSX.LineChart & JSXBase.HTMLAttributes<HTMLLineChartElement>;
            "parallel-plot": LocalJSX.ParallelPlot & JSXBase.HTMLAttributes<HTMLParallelPlotElement>;
            "pie-chart": LocalJSX.PieChart & JSXBase.HTMLAttributes<HTMLPieChartElement>;
            "scatter-plot": LocalJSX.ScatterPlot & JSXBase.HTMLAttributes<HTMLScatterPlotElement>;
            "stacked-bar-chart": LocalJSX.StackedBarChart & JSXBase.HTMLAttributes<HTMLStackedBarChartElement>;
            "world-map": LocalJSX.WorldMap & JSXBase.HTMLAttributes<HTMLWorldMapElement>;
        }
    }
}
