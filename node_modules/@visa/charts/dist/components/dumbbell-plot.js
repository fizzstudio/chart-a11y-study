import { p as proxyCustomElement, H, c as createEvent, h } from './p-0f92e1a5.js';
import { m as max } from './p-cbe185fc.js';
import { m as min } from './p-b0dcbe24.js';
import { p as point } from './p-4680a6b6.js';
import { n as nest, l as linear } from './p-8c5fc147.js';
import { m as millisecond, s as second, a as minute, b as scaleTime } from './p-f86ba58c.js';
import { v as visaChartsUtils_umd } from './p-1c8435c5.js';
import { v as v4 } from './p-22484f68.js';
import { d as defineCustomElement$3, s as select, e as event } from './p-5c69174f.js';
import { d as defineCustomElement$2 } from './p-ae2cf0a5.js';
import { h as hour, d as day, s as sunday, m as month, y as year } from './p-4d338ee8.js';
import { c as circleIn } from './p-209ccfff.js';

/**
 * Copyright (c) 2020, 2021 Visa, Inc.
 *
 * This source code is licensed under the MIT license
 * https://github.com/visa/visa-chart-components/blob/master/LICENSE
 *
 **/
const { propDefaultValues } = visaChartsUtils_umd;
class DumbbellPlotDefaultValues {
}
DumbbellPlotDefaultValues.mainTitle = 'Dumbbell Plot Title';
DumbbellPlotDefaultValues.subTitle = "This is the dumbbell plot's subtitle";
DumbbellPlotDefaultValues.height = 300;
DumbbellPlotDefaultValues.width = 650;
DumbbellPlotDefaultValues.margin = {
  top: 300 * 0.01,
  bottom: 300 * 0.01,
  right: 650 * 0.01,
  left: 650 * 0.01
};
DumbbellPlotDefaultValues.padding = {
  top: 20,
  bottom: 50,
  right: 50,
  left: 50
};
DumbbellPlotDefaultValues.ordinalAccessor = 'date';
DumbbellPlotDefaultValues.valueAccessor = 'value';
DumbbellPlotDefaultValues.seriesAccessor = 'category';
// dumbbell specific props
DumbbellPlotDefaultValues.focusMarker = {
  key: '',
  sizeFromBar: 12
};
DumbbellPlotDefaultValues.marker = {
  visible: true,
  type: 'dot',
  sizeFromBar: 8
};
DumbbellPlotDefaultValues.barStyle = {
  opacity: 1,
  width: 1,
  colorRule: 'default'
};
DumbbellPlotDefaultValues.differenceLabel = {
  visible: false,
  placement: 'left',
  calculation: 'difference',
  format: '0[.][0][0]a',
  collisionHideOnly: false
};
DumbbellPlotDefaultValues.layout = propDefaultValues.layout;
DumbbellPlotDefaultValues.accessibility = propDefaultValues.accessibility;
DumbbellPlotDefaultValues.animationConfig = propDefaultValues.animationConfig;
DumbbellPlotDefaultValues.highestHeadingLevel = propDefaultValues.highestHeadingLevel;
DumbbellPlotDefaultValues.sortOrder = propDefaultValues.sortOrder;
DumbbellPlotDefaultValues.xAxis = propDefaultValues.xAxisDate;
DumbbellPlotDefaultValues.yAxis = propDefaultValues.yAxis;
DumbbellPlotDefaultValues.showBaselineX = propDefaultValues.showBaselineFalse;
DumbbellPlotDefaultValues.showBaselineY = propDefaultValues.showBaselineFalse;
DumbbellPlotDefaultValues.wrapLabel = propDefaultValues.wrapLabel;
DumbbellPlotDefaultValues.colorPalette = propDefaultValues.colorPaletteCategorical;
DumbbellPlotDefaultValues.hoverStyle = propDefaultValues.hoverStyle;
DumbbellPlotDefaultValues.clickStyle = propDefaultValues.clickStyle;
DumbbellPlotDefaultValues.referenceStyle = propDefaultValues.referenceStyle;
DumbbellPlotDefaultValues.cursor = propDefaultValues.cursor;
DumbbellPlotDefaultValues.roundedCorner = propDefaultValues.roundedCorner;
DumbbellPlotDefaultValues.barIntervalRatio = propDefaultValues.barIntervalRatio;
DumbbellPlotDefaultValues.hoverOpacity = propDefaultValues.hoverOpacity;
DumbbellPlotDefaultValues.dataLabel = propDefaultValues.dataLabelEnds;
DumbbellPlotDefaultValues.legend = propDefaultValues.hiddenLegend;
DumbbellPlotDefaultValues.tooltipLabel = propDefaultValues.tooltipLabel;
DumbbellPlotDefaultValues.showTooltip = propDefaultValues.showTooltip;
DumbbellPlotDefaultValues.suppressEvents = propDefaultValues.suppressEvents;
DumbbellPlotDefaultValues.referenceLines = propDefaultValues.referenceLines;
DumbbellPlotDefaultValues.annotations = propDefaultValues.annotations;
DumbbellPlotDefaultValues.clickHighlight = propDefaultValues.clickHighlight;
DumbbellPlotDefaultValues.seriesLabel = propDefaultValues.seriesLabel;

const dumbbellPlotCss = ".o-layout{width:100%;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap}.o-layout--chart{width:100%}.is--vertical .o-layout--chart{width:90%}dumbbell-plot{cursor:default}dumbbell-plot .screen-reader-info{position:absolute;left:-9999px;top:auto;width:1px;height:1px;overflow:hidden}dumbbell-plot .data-table-link{color:#767676;text-decoration:none;font-size:12px;margin-left:5%}dumbbell-plot .hidden{display:none}dumbbell-plot .axis{font-size:12px}dumbbell-plot .axis text{fill:#767676}dumbbell-plot .axis-label{text-anchor:middle;font:1rem sans-serif}dumbbell-plot .axis path{stroke:#767676}dumbbell-plot .grid line{stroke:#767676;stroke-opacity:0.6;shape-rendering:crispEdges;stroke-dasharray:4, 4}dumbbell-plot .grid path{stroke-width:0;stroke:#767676}dumbbell-plot .dumbbell-group{-webkit-transition:opacity 0.5s linear;transition:opacity 0.5s linear}dumbbell-plot .dumbbell-group__inactive{opacity:0}dumbbell-plot .dumbbell-group .dot{stroke:#ffffff}dumbbell-plot .dumbbell-group .dumbbell-series-label{font-size:1em}dumbbell-plot .dumbbell-legend{font-size:1em;display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row;-ms-flex-pack:start;justify-content:flex-start}dumbbell-plot .dumbbell-legend .legend{display:-ms-flexbox;display:flex;-ms-flex-direction:row;flex-direction:row;-ms-flex-pack:start;justify-content:flex-start}dumbbell-plot .annotations{pointer-events:none}dumbbell-plot .annotations .handle{pointer-events:all}";

const { getAccessibleStrokes, ensureTextContrast, createTextStrokeFilter, createUrl, initializeDescriptionRoot, initializeElementAccess, setElementFocusHandler, setElementAccessID, setAccessibilityController, hideNonessentialGroups, setAccessTitle, setAccessSubtitle, setAccessLongDescription, setAccessExecutiveSummary, setAccessPurpose, setAccessContext, setAccessStatistics, setAccessChartCounts, setAccessXAxis, setAccessYAxis, setAccessStructure, setAccessAnnotation, retainAccessFocus, checkAccessFocus, setElementInteractionAccessState, setAccessibilityDescriptionWidth, drawTooltip, annotate, chartAccessors, checkInteraction, checkClicked, checkHovered, convertVisaColor, drawAxis, drawGrid, drawLegend, setLegendInteractionState, formatDataLabel, getColors, getLicenses, getPadding, getScopedData, initTooltipStyle, overrideTitleTooltip, placeDataLabels, scopeDataKeys, visaColors, transitionEndAll, validateAccessibilityProps, findTagLevel, prepareRenderChange, roundTo, getTextWidth, resolveLabelCollision } = visaChartsUtils_umd;
const DumbbellPlot$1 = /*@__PURE__*/ proxyCustomElement(class extends H {
  constructor() {
    super();
    this.__registerHost();
    this.clickEvent = createEvent(this, "clickEvent", 7);
    this.hoverEvent = createEvent(this, "hoverEvent", 7);
    this.mouseOutEvent = createEvent(this, "mouseOutEvent", 7);
    this.initialLoadEvent = createEvent(this, "initialLoadEvent", 7);
    this.drawStartEvent = createEvent(this, "drawStartEvent", 7);
    this.drawEndEvent = createEvent(this, "drawEndEvent", 7);
    this.transitionEndEvent = createEvent(this, "transitionEndEvent", 7);
    // Chart Attributes (1/7)
    this.mainTitle = DumbbellPlotDefaultValues.mainTitle;
    this.subTitle = DumbbellPlotDefaultValues.subTitle;
    this.height = DumbbellPlotDefaultValues.height;
    this.width = DumbbellPlotDefaultValues.width;
    this.margin = DumbbellPlotDefaultValues.margin;
    this.padding = DumbbellPlotDefaultValues.padding;
    this.highestHeadingLevel = DumbbellPlotDefaultValues.highestHeadingLevel;
    this.ordinalAccessor = DumbbellPlotDefaultValues.ordinalAccessor;
    this.valueAccessor = DumbbellPlotDefaultValues.valueAccessor;
    this.seriesAccessor = DumbbellPlotDefaultValues.seriesAccessor;
    this.sortOrder = DumbbellPlotDefaultValues.sortOrder;
    // Axis (3/7)
    this.xAxis = DumbbellPlotDefaultValues.xAxis;
    this.yAxis = DumbbellPlotDefaultValues.yAxis;
    this.wrapLabel = DumbbellPlotDefaultValues.wrapLabel;
    this.layout = DumbbellPlotDefaultValues.layout;
    this.showBaselineX = DumbbellPlotDefaultValues.showBaselineX;
    this.showBaselineY = DumbbellPlotDefaultValues.showBaselineY;
    // Color & Shape (4/7)
    this.colorPalette = DumbbellPlotDefaultValues.colorPalette;
    this.hoverStyle = DumbbellPlotDefaultValues.hoverStyle;
    this.hoverOpacity = DumbbellPlotDefaultValues.hoverOpacity;
    this.animationConfig = DumbbellPlotDefaultValues.animationConfig;
    this.clickStyle = DumbbellPlotDefaultValues.clickStyle;
    this.referenceStyle = DumbbellPlotDefaultValues.referenceStyle;
    this.cursor = DumbbellPlotDefaultValues.cursor;
    this.focusMarker = DumbbellPlotDefaultValues.focusMarker;
    this.marker = DumbbellPlotDefaultValues.marker;
    this.barStyle = DumbbellPlotDefaultValues.barStyle;
    // Data label (5/7)
    this.dataLabel = DumbbellPlotDefaultValues.dataLabel;
    this.seriesLabel = DumbbellPlotDefaultValues.seriesLabel;
    this.differenceLabel = DumbbellPlotDefaultValues.differenceLabel;
    this.showTooltip = DumbbellPlotDefaultValues.showTooltip;
    this.tooltipLabel = DumbbellPlotDefaultValues.tooltipLabel;
    this.accessibility = DumbbellPlotDefaultValues.accessibility;
    this.legend = DumbbellPlotDefaultValues.legend;
    this.annotations = DumbbellPlotDefaultValues.annotations;
    this.referenceLines = DumbbellPlotDefaultValues.referenceLines;
    // Interactivity (7/7)
    this.suppressEvents = DumbbellPlotDefaultValues.suppressEvents;
    this.clickHighlight = DumbbellPlotDefaultValues.clickHighlight;
    // Testing & Debug (8/7)
    this.unitTest = false;
    this.shouldValidateAccessibility = true;
    this.updated = true;
    this.time = {
      timemillisecond: millisecond,
      timesecond: second,
      timeminute: minute,
      timehour: hour,
      timeday: day,
      timeweek: sunday,
      timemonth: month,
      timeyear: year
    };
    this.shouldUpdateLayout = false;
    this.shouldValidate = false;
    // shouldUpdateAccessibility: boolean = false;
    this.shouldUpdateAnnotations = false;
    this.shouldUpdateReferenceLines = false;
    this.shouldResetRoot = false;
    this.shouldUpdateXAxis = false;
    this.shouldUpdateXGrid = false;
    this.shouldUpdateYAxis = false;
    this.shouldUpdateYGrid = false;
    this.shouldUpdateScales = false;
    this.shouldUpdateBaseline = false;
    this.shouldCheckValueAxis = false;
    this.shouldCheckLabelAxis = false;
    this.shouldSetColors = false;
    this.shouldUpdateLegend = false;
    this.shouldSetGlobalSelections = false;
    this.shouldSetSeriesSelections = false;
    this.shouldSetTestingAttributes = false;
    this.shouldUpdateData = false;
    this.shouldEnterUpdateExit = false;
    this.shouldEnterUpdateExitMarkers = false;
    this.shouldUpdateMarkerOpacity = false;
    this.shouldUpdateGeometries = false;
    this.shouldUpdateSeriesLabels = false;
    this.shouldUpdateDifferenceLabels = false;
    this.shouldUpdateLabels = false;
    this.shouldValidateInteractionKeys = false;
    this.shouldUpdateTableData = false;
    this.shouldValidateDataLabelPlacement = false;
    this.shouldValidateDataLabelAccessor = false;
    this.shouldAddStrokeUnder = false;
    this.shouldUpdateBaselineX = false;
    this.shouldUpdateBaselineY = false;
    this.shouldUpdateLegendData = false;
    this.shouldUpdateMarkerIDs = false;
    this.shouldValidateLayout = false;
    this.shouldValidateSeriesLabelPlacement = false;
    this.shouldValidateDiffLabelPlacement = false;
    this.shouldBindInteractivity = false;
    this.shouldBindLegendInteractivity = false;
    this.shouldBindSeriesInteractivity = false;
    this.shouldUpdateCursor = false;
    this.shouldSetLegendCursor = false;
    this.shouldSetSeriesCursor = false;
    this.shouldSetLabelOpacity = false;
    this.shouldSetSeriesLabelOpacity = false;
    this.shouldSetDifferenceLabelOpacity = false;
    this.shouldSetSelectionClass = false;
    this.shouldDrawInteractionState = false;
    this.shouldRenderMarkerGroup = false;
    this.shouldUpdateBarStyle = false;
    this.shouldUpdateMarkerSize = false;
    this.shouldUpdateDiffLabelColor = false;
    this.shouldUpdateMarkerStyle = false;
    this.shouldDrawMarkerGeometries = false;
    this.shouldUpdateMarkerData = false;
    this.shouldUpdateSeriesData = false;
    this.shouldUpdateDescriptionWrapper = false;
    this.shouldSetChartAccessibilityTitle = false;
    this.shouldSetChartAccessibilitySubtitle = false;
    this.shouldSetChartAccessibilityLongDescription = false;
    this.shouldSetChartAccessibilityExecutiveSummary = false;
    this.shouldSetChartAccessibilityStatisticalNotes = false;
    this.shouldSetChartAccessibilityStructureNotes = false;
    this.shouldSetParentSVGAccessibility = false;
    this.shouldSetGeometryAccessibilityAttributes = false;
    this.shouldSetGeometryAriaLabels = false;
    this.shouldSetGroupAccessibilityAttributes = false;
    this.shouldSetGroupAccessibilityLabel = false;
    this.shouldSetChartAccessibilityPurpose = false;
    this.shouldSetChartAccessibilityContext = false;
    this.shouldRedrawWrapper = false;
    this.shouldSetTagLevels = false;
    this.shouldSetChartAccessibilityCount = false;
    this.shouldSetYAxisAccessibility = false;
    this.shouldSetXAxisAccessibility = false;
    this.shouldSetAnnotationAccessibility = false;
    this.topLevel = 'h2';
    this.bottomLevel = 'p';
    this.strokes = {};
    this.handleMarkerColors = (d, i, n) => {
      const rawColor = this.rawColors[d.referenceIndex] || this.rawColors[0];
      const strokeColor = i < 2 && this.clickHighlight.length
        ? this.clickStyle.color || rawColor
        : i < 4
          ? rawColor
          : this.hoverStyle.color || rawColor;
      const baseColor = this.colorArr[d.referenceIndex] || this.colorArr[0];
      const fillColor = i < 2 && this.clickHighlight.length
        ? this.clickStyle.color || baseColor
        : i < 4
          ? baseColor
          : this.hoverStyle.color || baseColor;
      select(n[i]).attr('fill', fillColor);
      return !this.accessibility.hideStrokes ? this.strokes[strokeColor.toLowerCase()] : fillColor;
    };
    this.handleSeriesLabelColors = (d, i) => {
      let hovered;
      let clicked;
      if (this.seriesInteraction) {
        hovered = checkHovered(d, this.hoverHighlight, this.innerInteractionKeys);
        clicked = checkClicked(d, this.clickHighlight, this.innerInteractionKeys);
      }
      const baseColor = this.rawColors[i] || this.rawColors[0];
      const fillColor = this.seriesInteraction
        ? clicked && this.clickHighlight.length
          ? this.clickStyle.color || baseColor
          : hovered && this.hoverHighlight
            ? this.hoverStyle.color || baseColor
            : baseColor
        : baseColor;
      return this.textColors[fillColor.toLowerCase()];
    };
    this.handleLabelColors = (d, i) => {
      const hovered = checkHovered(d, this.hoverHighlight, this.innerInteractionKeys);
      const clicked = checkClicked(d, this.clickHighlight, this.innerInteractionKeys);
      const baseColor = this.rawColors[i] || this.rawColors[0];
      const fillColor = clicked && this.clickHighlight.length
        ? this.clickStyle.color || baseColor
        : hovered && this.hoverHighlight
          ? this.hoverStyle.color || baseColor
          : baseColor;
      return this.textColors[fillColor.toLowerCase()];
    };
    this.handleBarColors = (d, i, n) => {
      d.focusMarker = false;
      if (d.values[0][this.seriesAccessor] === this.focusMarker.key) {
        d.focusMarker = 0;
      }
      else if (d.values[1][this.seriesAccessor] === this.focusMarker.key) {
        d.focusMarker = 1;
      }
      const clicked = checkClicked(d.values[0], this.clickHighlight, this.innerInteractionKeys) &&
        checkClicked(d.values[1], this.clickHighlight, this.innerInteractionKeys);
      const hovered = checkHovered(d.values[0], this.hoverHighlight, this.innerInteractionKeys) &&
        checkHovered(d.values[1], this.hoverHighlight, this.innerInteractionKeys);
      const rawColor = this.barStyle.colorRule === 'focus' && (d.focusMarker || d.focusMarker === 0)
        ? this.rawColors[d.focusMarker]
        : this.barStyle.colorRule === 'greaterValue'
          ? this.rawColors[d.greaterIndex]
          : this.rawColors[2];
      const strokeColor = clicked && this.clickHighlight.length
        ? this.clickStyle.color || rawColor
        : hovered && this.hoverHighlight
          ? this.hoverStyle.color || rawColor
          : rawColor;
      const baseColor = this.barStyle.colorRule === 'focus' && (d.focusMarker || d.focusMarker === 0)
        ? this.colorArr[d.focusMarker]
        : this.barStyle.colorRule === 'greaterValue'
          ? this.colorArr[d.greaterIndex]
          : this.colorArr[2];
      const fillColor = clicked && this.clickHighlight.length
        ? this.clickStyle.color || baseColor
        : hovered && this.hoverHighlight
          ? this.hoverStyle.color || baseColor
          : baseColor;
      select(n[i]).attr('fill', fillColor);
      return !this.accessibility.hideStrokes ? this.strokes[strokeColor.toLowerCase()] : fillColor;
    };
    this.handleBarOpacity = (d, i, n) => {
      const first = checkInteraction(d.values[0], 1, 0, this.hoverHighlight, this.clickHighlight, this.innerInteractionKeys);
      const second = checkInteraction(d.values[1], 1, 0, this.hoverHighlight, this.clickHighlight, this.innerInteractionKeys);
      const opacity = first && second ? this.barStyle.opacity : this.hoverOpacity;
      select(n[i]).attr('stroke-opacity', opacity);
      return opacity;
    };
    this.setBarSize = (d, i, n) => {
      const clicked = checkClicked(d.values[0], this.clickHighlight, this.innerInteractionKeys) &&
        checkClicked(d.values[1], this.clickHighlight, this.innerInteractionKeys);
      const hovered = checkHovered(d.values[0], this.hoverHighlight, this.innerInteractionKeys) &&
        checkHovered(d.values[1], this.hoverHighlight, this.innerInteractionKeys);
      const barSize = this.dumbbellInteraction
        ? clicked
          ? parseFloat(this.clickStyle.strokeWidth + '') || this.barStyle.width
          : hovered
            ? parseFloat(this.hoverStyle.strokeWidth + '') || this.barStyle.width
            : this.barStyle.width
        : this.barStyle.width;
      const centerX1 = this.x(d.values[0][this.xAccessor]);
      const centerY1 = this.y(d.values[0][this.yAccessor]);
      const centerX2 = this.x(d.values[1][this.xAccessor]);
      const centerY2 = this.y(d.values[1][this.yAccessor]);
      const ymod = this.isVertical ? (centerY1 > centerY2 ? 0.001 : -0.001) : 0;
      const xmod = !this.isVertical ? (centerX1 > centerX2 ? 0.001 : -0.001) : 0;
      const widthMod = this.isVertical ? barSize / 2 : 0;
      const heightMod = !this.isVertical ? barSize / 2 : 0;
      select(n[i])
        .attr('data-barSize', barSize)
        .attr('data-centerX1', d => this.x(d.values[0][this.xAccessor]))
        .attr('data-centerY1', d => this.y(d.values[0][this.yAccessor]))
        .attr('data-centerX2', d => this.x(d.values[1][this.xAccessor]))
        .attr('data-centerY2', d => this.y(d.values[1][this.yAccessor]));
      return `M ${centerX1 + xmod} ${centerY1 + ymod} L ${centerX1} ${centerY1} L ${centerX1 + widthMod} ${centerY1 +
        heightMod} L ${centerX2 + widthMod} ${centerY2 + heightMod} L ${centerX2} ${centerY2} L ${centerX2 -
        widthMod} ${centerY2 - heightMod} L ${centerX1 - widthMod} ${centerY1 -
        heightMod} L ${centerX1} ${centerY1} L ${centerX1 + widthMod} ${centerY1 + heightMod} L ${centerX2 +
        widthMod} ${centerY2 + heightMod} L ${centerX2} ${centerY2} L ${centerX2 - xmod} ${centerY2 - ymod}`;
    };
    this.setDiffLabelColor = d => {
      d.focusMarker = false;
      if (d.values[0][this.seriesAccessor] === this.focusMarker.key) {
        d.focusMarker = 0;
      }
      else if (d.values[1][this.seriesAccessor] === this.focusMarker.key) {
        d.focusMarker = 1;
      }
      const baseColor = this.barStyle.colorRule === 'focus' && (d.focusMarker || d.focusMarker === 0)
        ? this.rawColors[d.focusMarker]
        : this.barStyle.colorRule === 'greaterValue'
          ? this.rawColors[d.greaterIndex]
          : this.rawColors[2];
      let hovered;
      let clicked;
      if (this.dumbbellInteraction) {
        clicked =
          checkClicked(d.values[0], this.clickHighlight, this.innerInteractionKeys) &&
            checkClicked(d.values[1], this.clickHighlight, this.innerInteractionKeys);
        hovered =
          checkHovered(d.values[0], this.hoverHighlight, this.innerInteractionKeys) &&
            checkHovered(d.values[1], this.hoverHighlight, this.innerInteractionKeys);
      }
      const fillColor = this.dumbbellInteraction
        ? clicked && this.clickHighlight.length
          ? this.clickStyle.color || baseColor
          : hovered && this.hoverHighlight
            ? this.hoverStyle.color || baseColor
            : baseColor
        : baseColor;
      return this.textColors[fillColor.toLowerCase()];
    };
  }
  mainTitleWatcher(_newData, _oldData) {
    this.shouldValidate = true;
    this.shouldUpdateDescriptionWrapper = true;
    this.shouldSetChartAccessibilityTitle = true;
    this.shouldSetParentSVGAccessibility = true;
  }
  subTitleWatcher(_newData, _oldData) {
    this.shouldSetChartAccessibilitySubtitle = true;
    this.shouldSetParentSVGAccessibility = true;
  }
  dimensionWatcher(_newVal, _oldVal) {
    this.shouldUpdateLayout = true;
    this.shouldUpdateScales = true;
    this.shouldResetRoot = true;
    this.shouldUpdateGeometries = true;
    this.shouldUpdateXAxis = true;
    this.shouldUpdateYAxis = true;
    this.shouldUpdateXGrid = true;
    this.shouldUpdateYGrid = true;
    this.shouldUpdateLabels = true;
    this.shouldUpdateSeriesLabels = true;
    this.shouldUpdateDifferenceLabels = true;
    this.shouldUpdateLegend = true;
    this.shouldUpdateReferenceLines = true;
    this.shouldUpdateBaselineX = true;
    this.shouldUpdateBaselineY = true;
    this.shouldUpdateAnnotations = true;
  }
  dataWatcher(_newData, _oldData) {
    this.updated = true;
    this.shouldUpdateData = true;
    this.shouldUpdateMarkerData = true;
    this.shouldUpdateSeriesData = true;
    this.shouldSetGlobalSelections = true;
    this.shouldSetTestingAttributes = true;
    this.shouldEnterUpdateExit = true;
    this.shouldEnterUpdateExitMarkers = true;
    this.shouldUpdateMarkerSize = true;
    this.shouldUpdateMarkerIDs = true;
    this.shouldUpdateLegendData = true;
    this.shouldUpdateTableData = true;
    this.shouldUpdateScales = true;
    this.shouldValidate = true;
    this.shouldUpdateGeometries = true;
    this.shouldUpdateXAxis = true;
    this.shouldSetXAxisAccessibility = true;
    this.shouldUpdateYAxis = true;
    this.shouldSetYAxisAccessibility = true;
    this.shouldUpdateXGrid = true;
    this.shouldUpdateYGrid = true;
    this.shouldSetLabelOpacity = true;
    this.shouldUpdateLabels = true;
    this.shouldUpdateSeriesLabels = true;
    this.shouldUpdateDifferenceLabels = true;
    this.shouldUpdateLegend = true;
    this.shouldUpdateReferenceLines = true;
    this.shouldUpdateBaselineX = true;
    this.shouldUpdateBaselineY = true;
    this.shouldUpdateAnnotations = true;
    this.shouldSetGeometryAccessibilityAttributes = true;
    this.shouldSetGeometryAriaLabels = true;
    this.shouldUpdateBarStyle = true;
    this.shouldSetColors = true;
  }
  idWatcher(newID, _oldID) {
    console.error('Change detected in prop uniqueID from value ' +
      _oldID +
      ' to value ' +
      newID +
      '. This prop cannot be changed after component has loaded.');
    // this.chartID = newID || 'dumbbell-plot-' + uuid();
    // this.dumbbellPlotEl.id = this.chartID;
    // this.shouldValidate = true;
    // this.shouldUpdateDescriptionWrapper = true;
    // this.shouldSetParentSVGAccessibility = true;
    // this.shouldUpdateLegend = true;
    // this.shouldAddStrokeUnder = true;
    // this.shouldUpdateMarkerIDs = true;
  }
  headingWatcher(_newVal, _oldVal) {
    this.shouldRedrawWrapper = true;
    this.shouldSetTagLevels = true;
    this.shouldSetChartAccessibilityCount = true;
    this.shouldSetYAxisAccessibility = true;
    this.shouldSetXAxisAccessibility = true;
    this.shouldSetAnnotationAccessibility = true;
    this.shouldUpdateDescriptionWrapper = true;
    this.shouldSetChartAccessibilityTitle = true;
    this.shouldSetChartAccessibilitySubtitle = true;
    this.shouldSetChartAccessibilityLongDescription = true;
    this.shouldSetChartAccessibilityContext = true;
    this.shouldSetChartAccessibilityExecutiveSummary = true;
    this.shouldSetChartAccessibilityPurpose = true;
    this.shouldSetChartAccessibilityStatisticalNotes = true;
    this.shouldSetChartAccessibilityStructureNotes = true;
  }
  ordinalAccessorWatcher(_newVal, _oldVal) {
    this.shouldUpdateData = true;
    this.shouldUpdateMarkerData = true;
    this.shouldUpdateSeriesData = true;
    this.shouldUpdateTableData = true;
    this.shouldUpdateScales = true;
    this.shouldSetGlobalSelections = true;
    this.shouldUpdateGeometries = true;
    this.shouldEnterUpdateExit = true;
    this.shouldEnterUpdateExitMarkers = true;
    this.shouldUpdateMarkerSize = true;
    this.shouldDrawInteractionState = true;
    this.shouldSetLabelOpacity = true;
    this.shouldSetSeriesLabelOpacity = true;
    this.shouldSetDifferenceLabelOpacity = true;
    this.shouldCheckLabelAxis = true;
    // this.shouldUpdateLabels = true;
    this.shouldUpdateSeriesLabels = true;
    this.shouldUpdateDifferenceLabels = true;
    this.shouldUpdateReferenceLines = true;
    this.shouldUpdateBaselineX = true;
    this.shouldUpdateBaselineY = true;
    this.shouldUpdateAnnotations = true;
    this.shouldSetGeometryAriaLabels = true;
    if (!(this.interactionKeys && this.interactionKeys.length)) {
      this.shouldValidateInteractionKeys = true;
      this.shouldSetSelectionClass = true;
    }
  }
  valueAccessorWatcher(_newVal, _oldVal) {
    this.shouldUpdateTableData = true;
    this.shouldUpdateData = true;
    this.shouldUpdateMarkerData = true;
    this.shouldUpdateSeriesData = true;
    this.shouldSetGlobalSelections = true;
    this.shouldUpdateScales = true;
    this.shouldUpdateGeometries = true;
    this.shouldDrawInteractionState = true;
    this.shouldEnterUpdateExit = true;
    this.shouldEnterUpdateExitMarkers = true;
    this.shouldUpdateMarkerSize = true;
    this.shouldSetLabelOpacity = true;
    this.shouldSetSeriesLabelOpacity = true;
    this.shouldCheckValueAxis = true;
    this.shouldValidateDataLabelAccessor = true;
    // this.shouldUpdateLabels = true;
    this.shouldUpdateSeriesLabels = true;
    this.shouldUpdateDifferenceLabels = true;
    this.shouldUpdateReferenceLines = true;
    this.shouldUpdateBaselineX = true;
    this.shouldUpdateBaselineY = true;
    this.shouldUpdateAnnotations = true;
    this.shouldSetGeometryAriaLabels = true;
  }
  seriesAccessorWatcher(_newVal, _oldVal) {
    this.shouldUpdateTableData = true;
    this.shouldUpdateData = true;
    this.shouldSetGlobalSelections = true;
    this.shouldUpdateMarkerData = true;
    this.shouldUpdateSeriesData = true;
    this.shouldUpdateLegendData = true;
    this.shouldDrawInteractionState = true;
    this.shouldEnterUpdateExit = true;
    this.shouldEnterUpdateExitMarkers = true;
    this.shouldUpdateMarkerSize = true;
    this.shouldUpdateSeriesLabels = true;
    // this.shouldUpdateLabels = true;
    this.shouldUpdateDifferenceLabels = true;
    this.shouldAddStrokeUnder = true;
    this.shouldSetLabelOpacity = true;
    this.shouldSetSeriesLabelOpacity = true;
    this.shouldUpdateLegend = true;
    this.shouldSetGeometryAriaLabels = true;
    this.shouldUpdateTableData = true;
    if (!(this.interactionKeys && this.interactionKeys.length)) {
      this.shouldValidateInteractionKeys = true;
      this.shouldSetSelectionClass = true;
    }
  }
  sortWatcher(_newVal, _oldVal) {
    this.updated = true;
    this.shouldUpdateData = true;
    this.shouldUpdateMarkerData = true;
    this.shouldUpdateSeriesData = true;
    this.shouldSetGlobalSelections = true;
    this.shouldSetTestingAttributes = true;
    this.shouldEnterUpdateExit = true;
    this.shouldEnterUpdateExitMarkers = true;
    this.shouldUpdateTableData = true;
    this.shouldUpdateScales = true;
    this.shouldUpdateGeometries = true;
    this.shouldUpdateLabels = true;
    this.shouldUpdateSeriesLabels = true;
    this.shouldUpdateDifferenceLabels = true;
    this.shouldAddStrokeUnder = true;
    this.shouldUpdateAnnotations = true;
    this.shouldSetGeometryAccessibilityAttributes = true;
    this.shouldSetGeometryAriaLabels = true;
  }
  xAxisWatcher(_newVal, _oldVal) {
    const newGridVal = _newVal && _newVal.gridVisible;
    const oldGridVal = _oldVal && _oldVal.gridVisible;
    const newTickInterval = _newVal && _newVal.tickInterval ? _newVal.tickInterval : 0;
    const oldTickInterval = _oldVal && _oldVal.tickInterval ? _oldVal.tickInterval : 0;
    const newFormatVal = _newVal && _newVal.format ? _newVal.format : false;
    const oldFormatVal = _oldVal && _oldVal.format ? _oldVal.format : false;
    const newUnitVal = _newVal && _newVal.unit ? _newVal.unit : false;
    const oldUnitVal = _oldVal && _oldVal.unit ? _oldVal.unit : false;
    if (newGridVal !== oldGridVal || newTickInterval !== oldTickInterval) {
      this.shouldUpdateXGrid = true;
    }
    if (newFormatVal !== oldFormatVal || newUnitVal !== oldUnitVal) {
      this.shouldUpdateScales = true;
      if (newUnitVal !== oldUnitVal) {
        this.shouldUpdateGeometries = true;
        this.shouldUpdateLabels = true;
        this.shouldUpdateSeriesLabels = true;
        this.shouldUpdateDifferenceLabels = true;
        this.shouldUpdateReferenceLines = true;
        this.shouldUpdateAnnotations = true;
      }
    }
    this.shouldUpdateXAxis = true;
    this.shouldSetXAxisAccessibility = true;
  }
  yAxisWatcher(_newVal, _oldVal) {
    const newGridVal = _newVal && _newVal.gridVisible;
    const oldGridVal = _oldVal && _oldVal.gridVisible;
    const newTickInterval = _newVal && _newVal.tickInterval ? _newVal.tickInterval : 0;
    const oldTickInterval = _oldVal && _oldVal.tickInterval ? _oldVal.tickInterval : 0;
    if (newGridVal !== oldGridVal || newTickInterval !== oldTickInterval) {
      this.shouldUpdateYGrid = true;
    }
    this.shouldUpdateYAxis = true;
    this.shouldSetYAxisAccessibility = true;
  }
  wrapLabelWatcher(_newVal, _oldVal) {
    this.shouldCheckLabelAxis = true;
  }
  layoutWatcher(_newVal, _oldVal) {
    this.shouldValidateLayout = true;
    this.shouldValidateDataLabelPlacement = true;
    this.shouldValidateSeriesLabelPlacement = true;
    this.shouldUpdateSeriesData = true;
    this.shouldValidateDiffLabelPlacement = true;
    this.shouldUpdateScales = true;
    this.shouldResetRoot = true;
    this.shouldUpdateGeometries = true;
    this.shouldUpdateXAxis = true;
    this.shouldUpdateYAxis = true;
    this.shouldUpdateXGrid = true;
    this.shouldUpdateYGrid = true;
    this.shouldUpdateLabels = true;
    this.shouldUpdateSeriesLabels = true;
    this.shouldUpdateDifferenceLabels = true;
    this.shouldAddStrokeUnder = true;
    this.shouldUpdateLegend = true;
    this.shouldUpdateReferenceLines = true;
    this.shouldUpdateBaselineX = true;
    this.shouldUpdateBaselineY = true;
    this.shouldUpdateAnnotations = true;
    this.shouldSetGeometryAccessibilityAttributes = true;
  }
  showBaselineXWatcher(_newVal, _oldVal) {
    this.shouldUpdateBaselineX = true;
  }
  showBaselineYWatcher(_newVal, _oldVal) {
    this.shouldUpdateBaselineY = true;
  }
  paletteWatcher(_newVal, _oldVal) {
    this.shouldUpdateMarkerIDs = true;
    this.shouldSetColors = true;
    this.shouldUpdateBarStyle = true;
    this.shouldUpdateMarkerStyle = true;
    this.shouldUpdateLegend = true;
    this.shouldUpdateLabels = true;
    this.shouldUpdateSeriesLabels = true;
    this.shouldUpdateDiffLabelColor = true;
  }
  hoverStyleWatcher(_newVal, _oldVal) {
    this.shouldUpdateMarkerIDs = true;
    this.shouldUpdateBarStyle = true;
    this.shouldUpdateMarkerSize = true;
    this.shouldDrawInteractionState = true;
    this.shouldSetSeriesLabelOpacity = true;
  }
  clickStyleWatcher(_newVal, _oldVal) {
    this.shouldUpdateMarkerIDs = true;
    this.shouldUpdateBarStyle = true;
    this.shouldUpdateMarkerSize = true;
    this.shouldDrawInteractionState = true;
    this.shouldSetSeriesLabelOpacity = true;
  }
  hoverOpacityWatcher(_newVal, _oldVal) {
    this.shouldDrawInteractionState = true;
    this.shouldSetLabelOpacity = true;
    this.shouldSetSeriesLabelOpacity = true;
    this.shouldSetDifferenceLabelOpacity = true;
  }
  cursorWatcher(_newVal, _oldVal) {
    this.shouldUpdateCursor = true;
    this.shouldSetLegendCursor = true;
    this.shouldSetSeriesCursor = true;
  }
  focusMarkerWatcher(_newVal, _oldVal) {
    this.shouldDrawMarkerGeometries = true;
    this.shouldSetGlobalSelections = true;
    this.shouldSetTestingAttributes = true;
    this.shouldUpdateMarkerIDs = true;
    this.shouldUpdateData = true;
    this.shouldUpdateMarkerData = true;
    this.shouldUpdateSeriesData = true;
    this.shouldUpdateLabels = true;
    const newSizeVal = _newVal && _newVal.sizeFromBar ? _newVal.sizeFromBar : 0;
    const oldSizeVal = _oldVal && _oldVal.sizeFromBar ? _oldVal.sizeFromBar : 0;
    if (newSizeVal !== oldSizeVal) {
      this.shouldUpdateMarkerSize = true;
    }
    const newKey = _newVal && _newVal.key ? _newVal.key : false;
    const oldKey = _oldVal && _oldVal.key ? _oldVal.key : false;
    if (newKey !== oldKey) {
      this.shouldUpdateDiffLabelColor = true;
      this.shouldUpdateMarkerSize = true;
      this.shouldUpdateBarStyle = true;
    }
  }
  markerWatcher(_newVal, _oldVal) {
    const newVisVal = _newVal && _newVal.visible;
    const oldVisVal = _oldVal && _oldVal.visible;
    if (newVisVal !== oldVisVal) {
      this.shouldUpdateMarkerOpacity = true;
    }
    const newTypeVal = _newVal && _newVal.type ? _newVal.type : false;
    const oldTypeVal = _oldVal && _oldVal.type ? _oldVal.type : false;
    if (newTypeVal !== oldTypeVal) {
      this.shouldRenderMarkerGroup = true;
      this.shouldEnterUpdateExitMarkers = true;
    }
    this.shouldSetGlobalSelections = true;
    this.shouldSetTestingAttributes = true;
    this.shouldUpdateMarkerIDs = true;
    this.shouldUpdateMarkerData = true;
    this.shouldUpdateSeriesData = true;
    this.shouldUpdateData = true;
    this.shouldUpdateLabels = true;
    const newSizeVal = _newVal && _newVal.sizeFromBar ? _newVal.sizeFromBar : 0;
    const oldSizeVal = _oldVal && _oldVal.sizeFromBar ? _oldVal.sizeFromBar : 0;
    if (newSizeVal !== oldSizeVal) {
      this.shouldUpdateMarkerSize = true;
    }
  }
  barStyleWatcher(_newVal, _oldVal) {
    this.shouldUpdateMarkerIDs = true;
    this.shouldUpdateBarStyle = true;
    this.shouldUpdateMarkerSize = true;
    this.shouldUpdateDiffLabelColor = true;
    this.shouldDrawInteractionState = true;
    const newSizeVal = _newVal && _newVal.width ? _newVal.width : 0;
    const oldSizeVal = _oldVal && _oldVal.width ? _oldVal.width : 0;
    if (newSizeVal !== oldSizeVal) {
      this.shouldDrawInteractionState = true;
      this.shouldUpdateMarkerData = true;
      this.shouldUpdateData = true;
      this.shouldUpdateMarkerSize = true;
      this.shouldUpdateGeometries = true;
      this.shouldUpdateLabels = true;
      this.shouldUpdateDifferenceLabels = true;
      this.shouldUpdateSeriesLabels = true;
    }
  }
  dataLabelWatcher(_newVal, _oldVal) {
    this.shouldUpdateLabels = true;
    this.shouldUpdateTableData = true;
    const newPlacementVal = _newVal && _newVal.placement ? _newVal.placement : false;
    const oldPlacementVal = _oldVal && _oldVal.placement ? _oldVal.placement : false;
    const newVisibleVal = _newVal && _newVal.visible;
    const oldVisibleVal = _oldVal && _oldVal.visible;
    const newAccessor = _newVal && _newVal.labelAccessor ? _newVal.labelAccessor : false;
    const oldAccessor = _oldVal && _oldVal.labelAccessor ? _oldVal.labelAccessor : false;
    if (newVisibleVal !== oldVisibleVal) {
      this.shouldSetLabelOpacity = true;
    }
    if (newPlacementVal !== oldPlacementVal) {
      this.shouldValidateDataLabelPlacement = true;
      // this.shouldCheckLabelColor = true;
    }
    if (newAccessor !== oldAccessor) {
      this.shouldValidateDataLabelAccessor = true;
    }
  }
  seriesLabelWatcher(_newVal, _oldVal) {
    this.shouldValidateSeriesLabelPlacement = true;
    this.shouldUpdateSeriesLabels = true;
    this.shouldAddStrokeUnder = true;
    this.shouldUpdateTableData = true;
    const newVisibleVal = _newVal && _newVal.visible;
    const oldVisibleVal = _oldVal && _oldVal.visible;
    if (newVisibleVal !== oldVisibleVal) {
      this.shouldSetSeriesLabelOpacity = true;
    }
    const newPlacementVal = _newVal && _newVal.placement ? _newVal.placement : false;
    const oldPlacementVal = _oldVal && _oldVal.placement ? _oldVal.placement : false;
    if (newPlacementVal !== oldPlacementVal) {
      this.shouldUpdateSeriesData = true;
      this.shouldSetSeriesSelections = true;
    }
  }
  differenceLabelWatcher(_newVal, _oldVal) {
    this.shouldUpdateDifferenceLabels = true;
    this.shouldUpdateDiffLabelColor = true;
    this.shouldAddStrokeUnder = true;
    this.shouldUpdateTableData = true;
    const newVisibleVal = _newVal && _newVal.visible;
    const oldVisibleVal = _oldVal && _oldVal.visible;
    if (newVisibleVal !== oldVisibleVal) {
      this.shouldSetDifferenceLabelOpacity = true;
    }
    const newPlacementVal = _newVal && _newVal.placement ? _newVal.placement : false;
    const oldPlacementVal = _oldVal && _oldVal.placement ? _oldVal.placement : false;
    if (newPlacementVal !== oldPlacementVal) {
      this.shouldValidateDiffLabelPlacement = true;
    }
  }
  showTooltipWatcher(_newVal, _oldVal) {
    this.shouldDrawInteractionState = true;
  }
  tooltipLabelWatcher(_newVal, _oldVal) {
    this.shouldUpdateTableData = true;
  }
  accessibilityWatcher(_newVal, _oldVal) {
    this.shouldValidate = true;
    const newTitle = _newVal && _newVal.title ? _newVal.title : false;
    const oldTitle = _oldVal && _oldVal.title ? _oldVal.title : false;
    if (newTitle !== oldTitle) {
      this.shouldUpdateDescriptionWrapper = true;
      this.shouldSetChartAccessibilityTitle = true;
      this.shouldSetParentSVGAccessibility = true;
    }
    const newExecutiveSummary = _newVal && _newVal.executiveSummary ? _newVal.executiveSummary : false;
    const oldExecutiveSummary = _oldVal && _oldVal.executiveSummary ? _oldVal.executiveSummary : false;
    if (newExecutiveSummary !== oldExecutiveSummary) {
      this.shouldSetChartAccessibilityExecutiveSummary = true;
    }
    const newPurpose = _newVal && _newVal.purpose ? _newVal.purpose : false;
    const oldPurpose = _oldVal && _oldVal.purpose ? _oldVal.purpose : false;
    if (newPurpose !== oldPurpose) {
      this.shouldSetChartAccessibilityPurpose = true;
    }
    const newLongDescription = _newVal && _newVal.longDescription ? _newVal.longDescription : false;
    const oldLongDescription = _oldVal && _oldVal.longDescription ? _oldVal.longDescription : false;
    if (newLongDescription !== oldLongDescription) {
      this.shouldSetChartAccessibilityLongDescription = true;
    }
    const newContext = _newVal && _newVal.contextExplanation ? _newVal.contextExplanation : false;
    const oldContext = _oldVal && _oldVal.contextExplanation ? _oldVal.contextExplanation : false;
    if (newContext !== oldContext) {
      this.shouldSetChartAccessibilityContext = true;
    }
    const newStatisticalNotes = _newVal && _newVal.statisticalNotes ? _newVal.statisticalNotes : false;
    const oldStatisticalNotes = _oldVal && _oldVal.statisticalNotes ? _oldVal.statisticalNotes : false;
    if (newStatisticalNotes !== oldStatisticalNotes) {
      this.shouldSetChartAccessibilityStatisticalNotes = true;
    }
    const newStructureNotes = _newVal && _newVal.structureNotes ? _newVal.structureNotes : false;
    const oldStructureNotes = _oldVal && _oldVal.structureNotes ? _oldVal.structureNotes : false;
    if (newStructureNotes !== oldStructureNotes) {
      this.shouldSetChartAccessibilityStructureNotes = true;
    }
    const newincludeDataKeyNames = _newVal && _newVal.includeDataKeyNames;
    const oldincludeDataKeyNames = _oldVal && _oldVal.includeDataKeyNames;
    const newElementDescriptionAccessor = _newVal && _newVal.elementDescriptionAccessor ? _newVal.elementDescriptionAccessor : false;
    const oldElementDescriptionAccessor = _oldVal && _oldVal.elementDescriptionAccessor ? _oldVal.elementDescriptionAccessor : false;
    if (newincludeDataKeyNames !== oldincludeDataKeyNames ||
      newElementDescriptionAccessor !== oldElementDescriptionAccessor) {
      if (newincludeDataKeyNames !== oldincludeDataKeyNames) {
        // this one is tricky because it needs to run after the lifecycle
        // AND it could run in the off-chance this prop is changed
        this.shouldSetGroupAccessibilityLabel = true;
      }
      this.shouldSetGeometryAriaLabels = true;
      this.shouldSetParentSVGAccessibility = true;
    }
    const newStrokes = _newVal && _newVal.hideStrokes ? _newVal.hideStrokes : false;
    const oldStrokes = _oldVal && _oldVal.hideStrokes ? _oldVal.hideStrokes : false;
    if (newStrokes !== oldStrokes) {
      this.shouldUpdateBarStyle = true;
      this.shouldUpdateMarkerStyle = true;
      this.shouldAddStrokeUnder = true;
      this.shouldUpdateLegend = true;
    }
    const newKeyNav = _newVal && _newVal.keyboardNavConfig && _newVal.keyboardNavConfig.disabled
      ? _newVal.keyboardNavConfig.disabled
      : false;
    const oldKeyNav = _oldVal && _oldVal.keyboardNavConfig && _oldVal.keyboardNavConfig.disabled
      ? _oldVal.keyboardNavConfig.disabled
      : false;
    const newInterface = _newVal && _newVal.elementsAreInterface ? _newVal.elementsAreInterface : false;
    const oldInterface = _oldVal && _oldVal.elementsAreInterface ? _oldVal.elementsAreInterface : false;
    if (newKeyNav !== oldKeyNav || newInterface !== oldInterface) {
      this.shouldSetGeometryAriaLabels = true;
      this.shouldSetParentSVGAccessibility = true;
      this.shouldUpdateDescriptionWrapper = true;
      this.shouldRedrawWrapper = true;
      this.shouldSetChartAccessibilityTitle = true;
      this.shouldSetChartAccessibilitySubtitle = true;
      this.shouldSetChartAccessibilityLongDescription = true;
      this.shouldSetChartAccessibilityContext = true;
      this.shouldSetChartAccessibilityExecutiveSummary = true;
      this.shouldSetChartAccessibilityPurpose = true;
      this.shouldSetChartAccessibilityStatisticalNotes = true;
      this.shouldSetChartAccessibilityStructureNotes = true;
    }
    if (newInterface !== oldInterface) {
      this.shouldSetSelectionClass = true;
    }
  }
  legendWatcher(_newVal, _oldVal) {
    this.shouldUpdateLegend = true;
    const newInteractiveVal = _newVal && _newVal.interactive;
    const oldInteractiveVal = _oldVal && _oldVal.interactive;
    if (newInteractiveVal !== oldInteractiveVal) {
      this.shouldBindLegendInteractivity = true;
      this.shouldSetLegendCursor = true;
    }
  }
  annotationsWatcher(_newVal, _oldVal) {
    this.shouldValidate = true;
    this.shouldUpdateAnnotations = true;
    this.shouldSetAnnotationAccessibility = true;
  }
  valueOverrideWatcher(_newVal, _oldVal) {
    this.shouldUpdateScales = true;
    this.shouldUpdateGeometries = true;
    this.shouldCheckValueAxis = true;
    this.shouldUpdateLabels = true;
    this.shouldUpdateSeriesLabels = true;
    this.shouldUpdateDifferenceLabels = true;
    this.shouldUpdateReferenceLines = true;
    this.shouldUpdateBaselineX = true;
    this.shouldUpdateBaselineY = true;
    this.shouldUpdateAnnotations = true;
  }
  referenceWatcher(_newVal, _oldVal) {
    this.shouldUpdateReferenceLines = true;
  }
  suppressWatcher(_newVal, _oldVal) {
    this.shouldBindInteractivity = true;
    this.shouldBindLegendInteractivity = true;
    this.shouldBindSeriesInteractivity = true;
    this.shouldUpdateCursor = true;
    this.shouldSetLegendCursor = true;
    this.shouldSetSeriesCursor = true;
    this.shouldSetGeometryAriaLabels = true;
    this.shouldSetParentSVGAccessibility = true;
    this.shouldUpdateDescriptionWrapper = true;
    this.shouldRedrawWrapper = true;
    this.shouldValidate = true;
    this.shouldSetChartAccessibilityTitle = true;
    this.shouldSetChartAccessibilitySubtitle = true;
    this.shouldSetChartAccessibilityLongDescription = true;
    this.shouldSetChartAccessibilityContext = true;
    this.shouldSetChartAccessibilityExecutiveSummary = true;
    this.shouldSetChartAccessibilityPurpose = true;
    this.shouldSetChartAccessibilityStatisticalNotes = true;
    this.shouldSetChartAccessibilityStructureNotes = true;
  }
  hoverWatcher(_newVal, _oldVal) {
    this.shouldUpdateMarkerIDs = true;
    this.shouldDrawInteractionState = true;
    this.shouldUpdateMarkerSize = true;
    this.shouldUpdateMarkerStyle = true;
    this.shouldSetLabelOpacity = true;
    this.shouldSetSeriesLabelOpacity = true;
    this.shouldSetDifferenceLabelOpacity = true;
    this.shouldUpdateData = true;
    // this.shouldUpdateLabels = true;
    this.shouldUpdateMarkerData = true;
    this.shouldSetGlobalSelections = true;
  }
  clickWatcher(_newVal, _oldVal) {
    this.shouldUpdateMarkerIDs = true;
    this.shouldDrawInteractionState = true;
    this.shouldUpdateMarkerSize = true;
    this.shouldUpdateMarkerStyle = true;
    this.shouldSetLabelOpacity = true;
    this.shouldSetSelectionClass = true;
    this.shouldSetSeriesLabelOpacity = true;
    this.shouldSetDifferenceLabelOpacity = true;
    this.shouldUpdateData = true;
    // this.shouldUpdateLabels = true;
    this.shouldUpdateMarkerData = true;
    this.shouldSetGlobalSelections = true;
  }
  interactionWatcher(_newVal, _oldVal) {
    this.shouldValidateInteractionKeys = true;
    this.shouldUpdateMarkerSize = true;
    this.shouldDrawInteractionState = true;
    this.shouldUpdateMarkerStyle = true;
    this.shouldSetLabelOpacity = true;
    this.shouldSetSeriesLabelOpacity = true;
    this.shouldSetDifferenceLabelOpacity = true;
    this.shouldSetSelectionClass = true;
    this.shouldSetGeometryAriaLabels = true;
    this.shouldUpdateTableData = true;
    this.shouldUpdateData = true;
    // this.shouldUpdateLabels = true;
    this.shouldUpdateMarkerData = true;
    this.shouldSetGlobalSelections = true;
    // if the new value is the seriesAccessor rebind the legend
    // should also compare this to old val to be even more efficient
    const newValSeriesCheck = _newVal && _newVal.length === 1 ? _newVal[0] === this.seriesAccessor : false;
    const oldValSeriesCheck = _oldVal && _oldVal.length === 1 ? _oldVal[0] === this.seriesAccessor : false;
    if (newValSeriesCheck !== oldValSeriesCheck) {
      this.shouldBindSeriesInteractivity = true; // this has to be added to handle updates to series labels
      this.shouldSetSeriesCursor = true;
      this.shouldBindLegendInteractivity = true;
      this.shouldSetLegendCursor = true;
    }
  }
  unitTestWatcher(_newVal, _oldVal) {
    this.shouldSetTestingAttributes = true;
  }
  componentWillLoad() {
    const chartID = this.uniqueID || 'dumbbell-plot-' + v4();
    this.initialLoadEvent.emit({ chartID: chartID });
    // contrary to componentWillUpdate, this method appears safe to use for
    // any calculations we need. Keeping them here reduces future refactor,
    // since componentWillUpdate should eventually mirror this method
    return new Promise(resolve => {
      this.duration = 0;
      this.chartID = chartID;
      this.dumbbellPlotEl.id = this.chartID;
      this.setTagLevels();
      this.checkIfSafari();
      this.validateLayout();
      this.validateDataLabelPlacement();
      this.validateSeriesLabelPlacement();
      this.validateDiffLabelPlacement();
      this.validateInteractionKeys();
      this.prepareData();
      this.prepareMarkerData();
      this.prepareSeriesData();
      this.prepareLegendData();
      this.setLayoutData();
      this.prepareScales();
      this.validateDataLabelAccessor();
      this.setTableData();
      this.shouldValidateAccessibilityProps();
      this.setColors();
      resolve('component will load');
    });
  }
  componentWillUpdate() {
    // NEVER put items in this method (until stencil bug is resolved)
    // All items that belong here are currently at the top of componentDidUpdate
    // see: https://github.com/ionic-team/stencil/issues/2061#issuecomment-578282178
    return new Promise(resolve => {
      resolve('component will update');
    });
  }
  componentDidLoad() {
    return new Promise(resolve => {
      this.defaults = true;
      this.shouldValidateAccessibilityProps();
      this.renderRootElements();
      this.setTooltipInitialStyle();
      this.setChartDescriptionWrapper();
      this.setChartAccessibilityTitle();
      this.setChartAccessibilitySubtitle();
      this.setChartAccessibilityLongDescription();
      this.setChartAccessibilityExecutiveSummary();
      this.setChartAccessibilityPurpose();
      this.setChartAccessibilityContext();
      this.setChartAccessibilityStatisticalNotes();
      this.setChartAccessibilityStructureNotes();
      this.setParentSVGAccessibility();
      this.reSetRoot();
      this.drawXGrid();
      this.drawYGrid();
      this.renderMarkerGroup();
      this.setGlobalSelections();
      this.setTestingAttributes();
      this.enterMarkerGeometries();
      this.updateMarkerGeometries();
      this.exitMarkerGeometries();
      this.updateMarkerSize();
      this.enterDumbbells();
      this.updateDumbbells();
      this.exitDumbbells();
      this.enterSeriesLabels();
      this.updateSeriesLabels();
      this.exitSeriesLabels();
      this.enterDataLabels();
      this.updateDataLabels();
      this.exitDataLabels();
      this.enterDifferenceLabels();
      this.updateDifferenceLabels();
      this.exitDifferenceLabels();
      this.updateMarkerIds();
      this.drawDumbbells();
      this.updateInteractionState();
      this.setChartCountAccessibility();
      this.setGeometryAccessibilityAttributes();
      this.setGeometryAriaLabels();
      // this.updateBarStyle();
      this.drawLegendElements();
      this.drawDataLabels();
      this.drawSeriesLabels();
      this.drawDifferenceLabels();
      this.addStrokeUnder();
      this.drawReferenceLines();
      this.setSelectedClass();
      this.setLabelOpacity();
      // this.updateCursor();
      // this.bindInteractivity();
      this.bindLegendInteractivity();
      // this.bindSeriesInteractivity();
      this.setLegendCursor();
      // this.setSeriesCursor();
      this.drawAnnotations();
      this.setAnnotationAccessibility();
      this.drawXAxis();
      this.setXAxisAccessibility();
      this.drawYAxis();
      this.setYAxisAccessibility();
      this.drawBaselineX();
      this.drawBaselineY();
      this.onChangeHandler();
      // we want to hide all child <g> of this.root BUT we want to make sure not to hide the
      // parent<g> that contains our geometries! In a subGroup chart (like stacked bars),
      // we want to pass the PARENT of all the <g>s that contain bars
      hideNonessentialGroups(this.root.node(), this.dumbbellG.node());
      this.setGroupAccessibilityAttributes();
      this.setGroupAccessibilityID();
      this.defaults = false;
      resolve('component did load');
    });
  }
  componentDidUpdate() {
    return new Promise(resolve => {
      this.duration = !this.animationConfig || !this.animationConfig.disabled ? 750 : 0;
      if (this.shouldUpdateDescriptionWrapper) {
        this.setChartDescriptionWrapper();
        this.shouldUpdateDescriptionWrapper = false;
      }
      if (this.shouldSetChartAccessibilityCount) {
        this.setChartCountAccessibility();
        this.shouldSetChartAccessibilityCount = false;
      }
      if (this.shouldSetChartAccessibilityTitle) {
        this.setChartAccessibilityTitle();
        this.shouldSetChartAccessibilityTitle = false;
      }
      if (this.shouldSetChartAccessibilitySubtitle) {
        this.setChartAccessibilitySubtitle();
        this.shouldSetChartAccessibilitySubtitle = false;
      }
      if (this.shouldSetChartAccessibilityLongDescription) {
        this.setChartAccessibilityLongDescription();
        this.shouldSetChartAccessibilityLongDescription = false;
      }
      if (this.shouldSetChartAccessibilityExecutiveSummary) {
        this.setChartAccessibilityExecutiveSummary();
        this.shouldSetChartAccessibilityExecutiveSummary = false;
      }
      if (this.shouldSetChartAccessibilityPurpose) {
        this.setChartAccessibilityPurpose();
        this.shouldSetChartAccessibilityPurpose = false;
      }
      if (this.shouldSetChartAccessibilityContext) {
        this.setChartAccessibilityContext();
        this.shouldSetChartAccessibilityContext = false;
      }
      if (this.shouldSetChartAccessibilityStatisticalNotes) {
        this.setChartAccessibilityStatisticalNotes();
        this.shouldSetChartAccessibilityStatisticalNotes = false;
      }
      if (this.shouldSetChartAccessibilityStructureNotes) {
        this.setChartAccessibilityStructureNotes();
        this.shouldSetChartAccessibilityStructureNotes = false;
      }
      if (this.shouldSetParentSVGAccessibility) {
        this.setParentSVGAccessibility();
        this.shouldSetParentSVGAccessibility = false;
      }
      if (this.shouldResetRoot) {
        this.reSetRoot();
        this.shouldResetRoot = false;
      }
      if (this.shouldRenderMarkerGroup) {
        this.renderMarkerGroup();
        this.shouldRenderMarkerGroup = false;
      }
      if (this.shouldSetGlobalSelections) {
        this.setGlobalSelections();
        this.shouldSetGlobalSelections = false;
      }
      if (this.shouldSetSeriesSelections) {
        this.setSeriesSelections();
        this.shouldSetSeriesSelections = false;
      }
      if (this.shouldSetTestingAttributes) {
        this.setTestingAttributes();
        this.shouldSetTestingAttributes = false;
      }
      if (this.shouldUpdateXGrid) {
        this.drawXGrid();
        this.shouldUpdateXGrid = false;
      }
      if (this.shouldUpdateYGrid) {
        this.drawYGrid();
        this.shouldUpdateYGrid = false;
      }
      if (this.shouldEnterUpdateExitMarkers) {
        this.enterMarkerGeometries();
        this.updateMarkerGeometries();
        this.exitMarkerGeometries();
        this.shouldEnterUpdateExitMarkers = false;
        this.shouldUpdateMarkerOpacity = false;
      }
      if (this.shouldUpdateMarkerOpacity) {
        this.updateMarkerGeometries();
        this.shouldUpdateMarkerOpacity = false;
      }
      if (this.shouldEnterUpdateExit) {
        this.enterDumbbells();
        this.updateDumbbells();
        this.exitDumbbells();
        this.enterSeriesLabels();
        this.updateSeriesLabels();
        this.exitSeriesLabels();
        this.enterDataLabels();
        this.updateDataLabels();
        this.exitDataLabels();
        this.enterDifferenceLabels();
        this.updateDifferenceLabels();
        this.exitDifferenceLabels();
        this.shouldEnterUpdateExit = false;
      }
      if (this.shouldUpdateMarkerIDs) {
        this.updateMarkerIds();
        this.shouldUpdateMarkerIDs = false;
      }
      if (this.shouldUpdateGeometries) {
        this.drawDumbbells();
        this.shouldUpdateGeometries = false;
      }
      if (this.shouldUpdateBarStyle) {
        this.updateBarStyle();
        this.shouldUpdateBarStyle = false;
      }
      if (this.shouldUpdateMarkerStyle) {
        this.updateMarkerStyle();
        this.shouldUpdateMarkerStyle = false;
      }
      if (this.shouldUpdateMarkerSize) {
        this.updateMarkerSize();
        this.shouldUpdateMarkerSize = false;
      }
      if (this.shouldDrawMarkerGeometries) {
        this.drawMarkerGeometries();
        this.shouldDrawMarkerGeometries = false;
      }
      if (this.shouldSetGeometryAccessibilityAttributes) {
        this.setGeometryAccessibilityAttributes();
        this.shouldSetGeometryAccessibilityAttributes = false;
      }
      if (this.shouldSetGeometryAriaLabels) {
        this.setGeometryAriaLabels();
        this.shouldSetGeometryAriaLabels = false;
      }
      if (this.shouldSetGroupAccessibilityLabel) {
        this.setGroupAccessibilityID();
        this.shouldSetGroupAccessibilityLabel = false;
      }
      if (this.shouldUpdateLegend) {
        this.drawLegendElements();
        this.shouldUpdateLegend = false;
      }
      if (this.shouldUpdateLabels) {
        this.drawDataLabels();
        this.shouldUpdateLabels = false;
      }
      if (this.shouldUpdateSeriesLabels) {
        this.drawSeriesLabels();
        this.shouldUpdateSeriesLabels = false;
      }
      if (this.shouldUpdateDifferenceLabels) {
        this.drawDifferenceLabels();
        this.shouldUpdateDifferenceLabels = false;
      }
      if (this.shouldAddStrokeUnder) {
        this.addStrokeUnder();
        this.shouldAddStrokeUnder = false;
      }
      if (this.shouldUpdateReferenceLines) {
        this.drawReferenceLines();
        this.shouldUpdateReferenceLines = false;
      }
      if (this.shouldSetLabelOpacity) {
        this.setLabelOpacity();
        this.shouldSetLabelOpacity = false;
      }
      if (this.shouldSetSeriesLabelOpacity) {
        this.setSeriesLabelOpacity();
        this.shouldSetSeriesLabelOpacity = false;
      }
      if (this.shouldSetDifferenceLabelOpacity) {
        this.setDifferenceLabelOpacity();
        this.shouldSetDifferenceLabelOpacity = false;
      }
      if (this.shouldUpdateDiffLabelColor) {
        this.updateDiffLabelColor();
        this.shouldUpdateDiffLabelColor = false;
      }
      if (this.shouldDrawInteractionState) {
        this.updateInteractionState();
        this.shouldDrawInteractionState = false;
      }
      if (this.shouldSetSelectionClass) {
        this.setSelectedClass();
        this.shouldSetSelectionClass = false;
      }
      if (this.shouldBindLegendInteractivity) {
        this.bindLegendInteractivity();
        this.shouldBindLegendInteractivity = false;
      }
      if (this.shouldBindSeriesInteractivity) {
        this.bindSeriesInteractivity();
        this.shouldBindSeriesInteractivity = false;
      }
      if (this.shouldSetLegendCursor) {
        this.setLegendCursor();
        this.shouldSetLegendCursor = false;
      }
      if (this.shouldSetSeriesCursor) {
        this.setSeriesCursor();
        this.shouldSetSeriesCursor = false;
      }
      if (this.shouldUpdateCursor) {
        this.updateCursor();
        this.shouldUpdateCursor = false;
      }
      if (this.shouldBindInteractivity) {
        this.bindInteractivity();
        this.shouldBindInteractivity = false;
      }
      if (this.shouldUpdateAnnotations) {
        this.drawAnnotations();
        this.shouldUpdateAnnotations = false;
      }
      if (this.shouldSetAnnotationAccessibility) {
        this.setAnnotationAccessibility();
        this.shouldSetAnnotationAccessibility = false;
      }
      if (this.shouldUpdateXAxis) {
        this.drawXAxis();
        this.shouldUpdateXAxis = false;
      }
      if (this.shouldSetXAxisAccessibility) {
        this.setXAxisAccessibility();
        this.shouldSetXAxisAccessibility = false;
      }
      if (this.shouldUpdateYAxis) {
        this.drawYAxis();
        this.shouldUpdateYAxis = false;
      }
      if (this.shouldSetYAxisAccessibility) {
        this.setYAxisAccessibility();
        this.shouldSetYAxisAccessibility = false;
      }
      if (this.shouldUpdateBaselineX) {
        this.drawBaselineX();
        this.shouldUpdateBaseline = false;
      }
      if (this.shouldUpdateBaselineY) {
        this.drawBaselineY();
        this.shouldUpdateBaseline = false;
      }
      this.onChangeHandler();
      resolve('component did update');
    }).then(() => this.drawEndEvent.emit({ chartID: this.chartID }));
  }
  shouldValidateAccessibilityProps() {
    if (this.shouldValidateAccessibility && !this.accessibility.disableValidation) {
      this.shouldValidateAccessibility = false;
      validateAccessibilityProps(this.chartID, Object.assign({}, this.accessibility), {
        annotations: this.annotations,
        data: this.data,
        uniqueID: this.uniqueID,
        context: {
          mainTitle: this.mainTitle,
          onClickEvent: this.suppressEvents ? undefined : this.clickEvent.emit
        }
      });
    }
  }
  validateInteractionKeys() {
    this.innerInteractionKeys =
      this.interactionKeys && this.interactionKeys.length ? this.interactionKeys : [this.ordinalAccessor];
    this.seriesInteraction =
      this.innerInteractionKeys.length === 1 && this.innerInteractionKeys[0] === this.seriesAccessor;
    this.dumbbellInteraction =
      this.innerInteractionKeys.length === 1 && this.innerInteractionKeys[0] === this.ordinalAccessor;
  }
  validateDataLabelAccessor() {
    this.innerLabelAccessor = this.dataLabel.labelAccessor ? this.dataLabel.labelAccessor : this.valueAccessor;
  }
  validateLayout() {
    this.layoutOverride = !this.layout || this.data[0][this.ordinalAccessor] instanceof Date ? 'vertical' : this.layout;
    this.isVertical = this.layoutOverride === 'vertical';
  }
  validateDataLabelPlacement() {
    this.placement = this.dataLabel.placement;
    // this.layoutOverride = !this.layout || this.data[0][this.ordinalAccessor] instanceof Date ? 'vertical' : this.layout;
    if (this.isVertical) {
      if (this.placement !== 'left' && this.placement !== 'right' && this.placement !== 'auto') {
        this.placement = 'ends';
      }
    }
    else {
      if (this.placement !== 'top' && this.placement !== 'bottom' && this.placement !== 'auto') {
        this.placement = 'ends';
      }
    }
  }
  validateSeriesLabelPlacement() {
    this.seriesLabelDetails = Object.assign({}, this.seriesLabel);
    if (!this.seriesLabelDetails.placement) {
      this.seriesLabelDetails.placement = this.isVertical ? 'right' : 'top';
    }
    if (this.isVertical &&
      (this.seriesLabelDetails.placement !== 'right' &&
        this.seriesLabelDetails.placement !== 'left' &&
        this.seriesLabelDetails.placement !== 'auto')) {
      this.seriesLabelDetails.placement = 'right';
    }
    else if (!this.isVertical &&
      (this.seriesLabelDetails.placement !== 'top' &&
        this.seriesLabelDetails.placement !== 'bottom' &&
        this.seriesLabelDetails.placement !== 'auto')) {
      this.seriesLabelDetails.placement = 'top';
    }
    if (!this.seriesLabelDetails.label || !this.seriesLabelDetails.label.length) {
      this.seriesLabelDetails.label = '';
    }
  }
  validateDiffLabelPlacement() {
    this.diffLabelDetails = Object.assign({}, this.differenceLabel);
    if (!this.diffLabelDetails.placement) {
      this.diffLabelDetails.placement = this.isVertical ? 'left' : 'top';
    }
    if (this.isVertical &&
      (this.diffLabelDetails.placement !== 'right' &&
        this.diffLabelDetails.placement !== 'left' &&
        this.diffLabelDetails.placement !== 'auto')) {
      this.diffLabelDetails.placement = 'left';
    }
    else if (!this.isVertical &&
      (this.diffLabelDetails.placement !== 'top' &&
        this.diffLabelDetails.placement !== 'bottom' &&
        this.diffLabelDetails.placement !== 'auto')) {
      this.diffLabelDetails.placement = 'top';
    }
  }
  checkIfSafari() {
    this.url = createUrl();
  }
  setColors() {
    this.colors = this.colors ? convertVisaColor(this.colors) : '';
    this.rawColors = this.colors || getColors(this.colorPalette, 3);
    this.colorArr = this.rawColors;
    this.textColors = {};
    this.strokes = {};
    this.rawColors.forEach(color => {
      if (!this.accessibility.hideStrokes) {
        const strokes = getAccessibleStrokes(color);
        const adjusted = strokes.length === 2 ? strokes[1] : strokes[0];
        this.strokes[color.toLowerCase()] = adjusted;
      }
      this.textColors[color.toLowerCase()] = ensureTextContrast(color, '#ffffff', 4.5);
    });
    if (this.hoverStyle && this.hoverStyle.color) {
      if (!this.accessibility.hideStrokes) {
        const strokes = getAccessibleStrokes(this.hoverStyle.color);
        const adjusted = strokes.length === 2 ? strokes[1] : strokes[0];
        this.strokes[this.hoverStyle.color.toLowerCase()] = adjusted;
      }
      this.textColors[this.hoverStyle.color.toLowerCase()] = ensureTextContrast(this.hoverStyle.color, '#ffffff', 4.5);
    }
    if (this.clickStyle && this.clickStyle.color) {
      if (!this.accessibility.hideStrokes) {
        const strokes = getAccessibleStrokes(this.clickStyle.color);
        const adjusted = strokes.length === 2 ? strokes[1] : strokes[0];
        this.strokes[this.clickStyle.color.toLowerCase()] = adjusted;
      }
      this.textColors[this.clickStyle.color.toLowerCase()] = ensureTextContrast(this.clickStyle.color, '#ffffff', 4.5);
    }
  }
  // eventually we might use textures for dumbbell, but unfortunately marker elements scale their interior fill
  // this causes markers to have terrible looking textures at larger sizes! Unfortunate.
  // setTextures() {
  //   // dumbbell will only ever need 3 colors, but this ensures that in some weird circumstances where colors array has
  //   // more than 6 colors passed into it, the textures function won't throw any errors, since it maxes out at 6 textures.
  //   const colorsArray = !(this.colorArr.length > 6) ? this.colorArr : this.colorArr.slice(0,6);
  //   if (!this.accessibility.hideTextures) {
  //     this.colorArr = convertColorsToTextures({
  //       colors: colorsArray,
  //       rootSVG: this.svg.node(),
  //       id: this.chartID,
  //       scheme: 'categorical'
  //     });
  //   } else {
  //     this.colorArr = this.rawColors
  //   }
  // }
  setLayoutData() {
    this.padding = typeof this.padding === 'string' ? getPadding(this.padding) : this.padding;
    this.innerHeight = this.height - this.margin.top - this.margin.bottom;
    this.innerWidth = this.width - this.margin.left - this.margin.right;
    this.innerPaddedHeight = this.innerHeight - this.padding.top - this.padding.bottom;
    this.innerPaddedWidth = this.innerWidth - this.padding.left - this.padding.right;
  }
  setTableData() {
    // generate scoped and formatted data for data-table component
    const keys = scopeDataKeys(this, chartAccessors, 'dumbbell-plot');
    this.tableData = getScopedData(this.data, keys);
    this.tableColumns = Object.keys(keys);
  }
  prepareData() {
    const nested = nest()
      .key(d => d[this.ordinalAccessor])
      .entries(this.data);
    nested.forEach(parent => {
      parent.focusMarker = false;
      parent.greaterIndex = 1;
      let firstMarker = 'marker';
      let secondMarker = 'marker';
      if (parent.values[0][this.seriesAccessor] === this.focusMarker.key) {
        parent.focusMarker = 0;
        firstMarker = 'focusMarker';
      }
      else if (parent.values[1][this.seriesAccessor] === this.focusMarker.key) {
        parent.focusMarker = 1;
        secondMarker = 'focusMarker';
      }
      const bar0Width = checkClicked(parent.values[0], this.clickHighlight, this.innerInteractionKeys)
        ? parseFloat(this.clickStyle.strokeWidth + '') || this.barStyle.width
        : checkHovered(parent.values[0], this.hoverHighlight, this.innerInteractionKeys)
          ? parseFloat(this.hoverStyle.strokeWidth + '') || this.barStyle.width
          : this.barStyle.width;
      // : this.barStyle.width;
      const bar1Width = checkClicked(parent.values[1], this.clickHighlight, this.innerInteractionKeys)
        ? parseFloat(this.clickStyle.strokeWidth + '') || this.barStyle.width
        : checkHovered(parent.values[1], this.hoverHighlight, this.innerInteractionKeys)
          ? parseFloat(this.hoverStyle.strokeWidth + '') || this.barStyle.width
          : this.barStyle.width;
      // : this.barStyle.width;
      parent.values[0].offset =
        parent.focusMarker !== 0 && !this.marker.visible
          ? 1
          : this.marker.type === 'dot'
            ? (this[firstMarker].sizeFromBar * (bar0Width + 1)) / 2
            : this.marker.type === 'stroke'
              ? (this[firstMarker].sizeFromBar * (bar0Width + 1)) / 5
              : !parent.focusMarker
                ? (this[firstMarker].sizeFromBar * (bar0Width + 1)) / 2
                : (this[firstMarker].sizeFromBar * (bar0Width + 1)) / 5;
      parent.values[1].offset =
        parent.focusMarker !== 1 && !this.marker.visible
          ? -1
          : this.marker.type === 'dot'
            ? -(this[secondMarker].sizeFromBar * (bar1Width + 1)) / 2
            : this.marker.type === 'stroke'
              ? -(this[secondMarker].sizeFromBar * (bar1Width + 1)) / 5
              : parent.focusMarker
                ? -(this[secondMarker].sizeFromBar * (bar1Width + 1)) / 2
                : -(this[secondMarker].sizeFromBar * (bar1Width + 1)) / 5;
      if (parent.values[0][this.valueAccessor] >= parent.values[1][this.valueAccessor]) {
        parent.greaterIndex = 0;
        parent.values[0].offset = -parent.values[0].offset;
        parent.values[1].offset = -parent.values[1].offset;
      }
    });
    const prepareMessage = d => {
      const hash = {
        absoluteDiff: 'Absolute Difference ',
        difference: 'Difference '
      };
      const calculation = this.differenceLabel && this.differenceLabel.calculation && hash[this.differenceLabel.calculation]
        ? this.differenceLabel.calculation
        : 'difference';
      const format = this.differenceLabel && this.differenceLabel.format && this.differenceLabel.visible
        ? this.differenceLabel.format
        : this.differenceLabel && this.dataLabel.format && this.dataLabel.visible
          ? this.dataLabel.format
          : '0[.][0][0]a';
      return hash[calculation] + formatDataLabel(d, calculation, format);
    };
    this.nest = nested.sort((a, b) => {
      a.difference = a.values[0][this.valueAccessor] - a.values[1][this.valueAccessor];
      b.difference = b.values[0][this.valueAccessor] - b.values[1][this.valueAccessor];
      a.absoluteDiff = Math.abs(a.difference);
      b.absoluteDiff = Math.abs(b.difference);
      a.middle = (a.values[0][this.valueAccessor] + a.values[1][this.valueAccessor]) / 2;
      b.middle = (b.values[0][this.valueAccessor] + b.values[1][this.valueAccessor]) / 2;
      a.message = prepareMessage(a);
      b.message = prepareMessage(b);
      const focusIndex = a.focusMarker !== false ? a.focusMarker : 0;
      return a.values[0][this.ordinalAccessor] instanceof Date
        ? 0
        : this.sortOrder === 'asc' || this.sortOrder === 'diffAsc'
          ? a.difference - b.difference
          : this.sortOrder === 'desc' || this.sortOrder === 'diffDesc'
            ? b.difference - a.difference
            : this.sortOrder === 'focusAsc'
              ? a.values[focusIndex][this.valueAccessor] - b.values[focusIndex][this.valueAccessor]
              : this.sortOrder === 'focusDesc'
                ? b.values[focusIndex][this.valueAccessor] - a.values[focusIndex][this.valueAccessor]
                : this.sortOrder === 'absoluteDiffAsc'
                  ? a.absoluteDiff - b.absoluteDiff
                  : this.sortOrder === 'absoluteDiffDesc'
                    ? b.absoluteDiff - a.absoluteDiff
                    : 0;
    });
    // this.map = nest()
    // .key(d => d[this.ordinalAccessor])
    // .map(this.data);
  }
  prepareMarkerData() {
    this.markerData = [];
    const first = {
      focus: false,
      label: this.nest[0].values[0][this.seriesAccessor]
    };
    const second = {
      focus: false,
      label: this.nest[0].values[1][this.seriesAccessor]
    };
    if (this.nest[0].focusMarker) {
      second.focus = true;
    }
    else if (this.nest[0].focusMarker === 0) {
      first.focus = true;
    }
    // if (!this.isVertical) {
    //   first.value = this.nest[0].values[0][this.valueAccessor];
    //   second.value = this.nest[0].values[1][this.valueAccessor];
    // }
    const third = Object.assign(Object.assign({}, first), { limitOpacity: true });
    const fourth = Object.assign(Object.assign({}, second), { limitOpacity: true });
    const fifth = Object.assign({}, first);
    const sixth = Object.assign({}, second);
    this.markerData.push(first);
    this.markerData.push(second);
    this.markerData.push(third);
    this.markerData.push(fourth);
    this.markerData.push(fifth);
    this.markerData.push(sixth);
    let i = 0;
    this.markerData.forEach(d => {
      d.index = i;
      d.referenceIndex = i < 2 ? i : i < 4 ? i - 2 : i - 4;
      i++;
    });
  }
  prepareSeriesData() {
    const isAuto = this.seriesLabelDetails.placement === 'auto';
    const checkString = this.isVertical ? 'right' : 'top';
    const isStandard = isAuto ? true : this.seriesLabelDetails.placement.includes(checkString);
    const first = {
      label: this.nest[0].values[0][this.seriesAccessor],
      [this.seriesAccessor]: this.nest[0].values[0][this.seriesAccessor],
      value: isStandard
        ? this.nest[this.nest.length - 1].values[0][this.valueAccessor]
        : this.nest[0].values[0][this.valueAccessor]
    };
    const second = {
      label: this.nest[0].values[1][this.seriesAccessor],
      [this.seriesAccessor]: this.nest[0].values[1][this.seriesAccessor],
      value: isStandard
        ? this.nest[this.nest.length - 1].values[1][this.valueAccessor]
        : this.nest[0].values[1][this.valueAccessor]
    };
    this.seriesData = [first, second];
  }
  prepareLegendData() {
    const first = {
      label: this.nest[0].values[0][this.seriesAccessor],
      [this.seriesAccessor]: this.nest[0].values[0][this.seriesAccessor]
    };
    const second = {
      label: this.nest[0].values[1][this.seriesAccessor],
      [this.seriesAccessor]: this.nest[0].values[1][this.seriesAccessor]
    };
    this.legendData = [first, second];
    this.ordinalLabel = this.legendData.map(d => {
      return d.label;
    });
  }
  prepareScales() {
    const minValue = min(this.data, d => parseFloat(d[this.valueAccessor]));
    const maxValue = max(this.data, d => parseFloat(d[this.valueAccessor]));
    if (this.isVertical) {
      this.xAccessor = this.ordinalAccessor;
      this.yAccessor = this.valueAccessor;
      this.y = linear()
        .domain([
        this.minValueOverride || this.minValueOverride === 0
          ? this.minValueOverride
          : minValue - (maxValue - minValue) * 0.15,
        this.maxValueOverride || this.maxValueOverride === 0
          ? this.maxValueOverride
          : maxValue + (maxValue - minValue) * 0.15
      ])
        .range([this.innerPaddedHeight, 0]);
      // set xAxis scale : date
      if (this.data[0][this.ordinalAccessor] instanceof Date) {
        const maxDate = max(this.data, d => d[this.ordinalAccessor]);
        const minDate = min(this.data, d => d[this.ordinalAccessor]);
        this.x = scaleTime()
          .domain([minDate, maxDate])
          .range([0, this.innerPaddedWidth]);
        if (this.xAxis.unit) {
          const timeTool = this.time['time' + this.xAxis.unit];
          this.x.domain([timeTool.offset(minDate, -1), timeTool.offset(maxDate, +1)]);
        }
      }
      else {
        // set xAxis scale : ordinal value
        this.x = point()
          .domain(this.nest.map(d => d.key))
          .padding(0.5)
          .range([0, this.innerPaddedWidth]);
      }
    }
    else if (!this.isVertical) {
      this.xAccessor = this.valueAccessor;
      this.yAccessor = this.ordinalAccessor;
      this.x = linear()
        .domain([
        this.minValueOverride || this.minValueOverride === 0
          ? this.minValueOverride
          : minValue - (maxValue - minValue) * 0.15,
        this.maxValueOverride || this.maxValueOverride === 0
          ? this.maxValueOverride
          : maxValue + (maxValue - minValue) * 0.15
      ])
        .range([0, this.innerPaddedWidth]);
      this.y = point()
        .domain(this.nest.map(d => d.key))
        .padding(0.5)
        .range([this.innerPaddedHeight, 0]);
    }
  }
  addStrokeUnder() {
    const filter = createTextStrokeFilter({
      root: this.svg.node(),
      id: this.chartID,
      color: '#ffffff'
    });
    this.seriesLabelWrapper.selectAll('text').attr('filter', !this.accessibility.hideStrokes ? filter : null);
    this.diffLabelWrapper.attr('filter', !this.accessibility.hideStrokes ? filter : null);
    this.labels.attr('filter', !this.accessibility.hideStrokes ? filter : null);
    this.labels.attr('filter', !this.accessibility.hideStrokes ? filter : null);
    this.dumbbellG.attr('filter', !this.accessibility.hideStrokes ? filter : null);
  }
  // reset graph size based on window size
  renderRootElements() {
    this.svg = select(this.dumbbellPlotEl)
      .select('.visa-viz-d3-dumbbell-container')
      .append('svg')
      .attr('width', this.width)
      .attr('height', this.height)
      .attr('viewBox', '0 0 ' + this.width + ' ' + this.height);
    this.root = this.svg.append('g').attr('id', 'visa-viz-margin-container-g-' + this.chartID);
    this.rootG = this.root.append('g').attr('id', 'visa-viz-padding-container-g-' + this.chartID);
    this.defs = this.rootG.append('defs');
    this.baselineG = this.rootG.append('g').attr('class', 'baseline-group');
    this.gridG = this.rootG.append('g').attr('class', 'gridline-group');
    this.dumbbellG = this.rootG.append('g').attr('class', 'dumbbell-group');
    this.seriesLabelWrapper = this.rootG.select('.dumbbell-series-wrapper');
    this.seriesLabelWrapper = this.rootG.append('g').attr('class', 'dumbbell-series-wrapper');
    this.diffLabelWrapper = this.rootG.select('.dumbbell-diff-label-wrapper');
    this.diffLabelWrapper = this.rootG.append('g').attr('class', 'dumbbell-diff-label-wrapper');
    this.legendG = select(this.dumbbellPlotEl)
      .select('.dumbbell-legend')
      .append('svg');
    this.tooltipG = select(this.dumbbellPlotEl).select('.dumbbell-tooltip');
    this.labels = this.rootG.append('g').attr('class', 'dumbbell-dataLabel-group');
    this.references = this.rootG.append('g').attr('class', 'dumbbell-reference-line-group');
  }
  renderMarkerGroup() {
    this.markerG = this.defs.select('.' + this.marker.type + 'markers');
    if (!this.markerG.node()) {
      this.defs.selectAll('g').remove();
      this.markerG = this.defs.append('g').attr('class', this.marker.type + 'markers');
    }
  }
  setSeriesSelections() {
    const dataBoundToSeriesLabel = this.seriesLabelWrapper
      .selectAll('.dumbbell-series-label')
      .data(this.seriesData, d => d.label);
    this.enterSeriesLabel = dataBoundToSeriesLabel.enter().append('text');
    this.exitSeriesLabel = dataBoundToSeriesLabel.exit();
    this.updateSeriesLabel = dataBoundToSeriesLabel.merge(this.enterSeriesLabel);
  }
  setGlobalSelections() {
    const dataBoundToGeometries = this.dumbbellG.selectAll('.dumbbell-plot').data(this.nest, d => d.key);
    this.enter = dataBoundToGeometries.enter().append('path');
    this.exit = dataBoundToGeometries.exit();
    this.update = dataBoundToGeometries.merge(this.enter);
    this.exitSize = this.exit.size();
    this.enterSize = this.enter.size();
    // const dataBoundToMarkers = this.markerG.selectAll('marker').data(this.markerData, (d, i) => {
    //   d.referenceIndex = i < 2 ? i : i < 4 ? i - 2 : i - 4;
    //   const basicId = this.generateId(d, i);
    //   this['marker' + i] = basicId;
    //   d.id = basicId;
    //   return d.label + i;
    // });
    const dataBoundToMarkers = this.markerG.selectAll('marker').data(this.markerData, (d, i) => {
      return d.label + i;
    });
    this.enterMarkers = dataBoundToMarkers.enter().append('marker');
    this.exitMarkers = dataBoundToMarkers.exit();
    this.updateMarkers = dataBoundToMarkers.merge(this.enterMarkers);
    this.setSeriesSelections();
    const dataBountToDiffLabel = this.diffLabelWrapper.selectAll('.dumbbell-diff-label').data(this.nest, d => d.key);
    this.enterDiffLabel = dataBountToDiffLabel.enter().append('text');
    this.exitDiffLabel = dataBountToDiffLabel.exit();
    this.updateDiffLabel = dataBountToDiffLabel.merge(this.enterDiffLabel);
    const dataBoundToLabels = this.labels.selectAll('g').data(this.nest, d => d.key);
    this.enterLabels = dataBoundToLabels.enter().append('g');
    this.exitLabels = dataBoundToLabels.exit();
    this.updateLabels = dataBoundToLabels.merge(this.enterLabels);
    const dataBoundToLabelChildren = this.updateLabels
      .selectAll('.dumbbell-dataLabel')
      .data(d => [d.values[0], d.values[1]], d => d[this.seriesAccessor]);
    this.enterLabelChildren = dataBoundToLabelChildren.enter().append('text');
    this.exitLabelChildren = dataBoundToLabelChildren.exit();
    this.updateLabelChildren = dataBoundToLabelChildren.merge(this.enterLabelChildren);
  }
  setTestingAttributes() {
    if (this.unitTest) {
      select(this.dumbbellPlotEl)
        .select('.visa-viz-d3-dumbbell-container')
        .attr('data-testid', 'chart-container');
      select(this.dumbbellPlotEl)
        .select('.dumbbell-main-title')
        .attr('data-testid', 'main-title');
      select(this.dumbbellPlotEl)
        .select('.dumbbell-sub-title')
        .attr('data-testid', 'sub-title');
      this.svg.attr('data-testid', 'root-svg');
      this.root.attr('data-testid', 'margin-container');
      this.rootG.attr('data-testid', 'padding-container');
      this.legendG.attr('data-testid', 'legend-container');
      this.tooltipG.attr('data-testid', 'tooltip-container');
      this.dumbbellG.attr('data-testid', 'dumbbell-group');
      this.baselineG.attr('data-testid', 'baseline-group');
      this.references.attr('data-testid', 'reference-line-group');
      this.updateLabels.attr('data-testid', 'dataLabel-wrapper');
      this.updateLabelChildren
        .attr('data-testid', 'dataLabel')
        .attr('data-id', d => `label-${d[this.ordinalAccessor]}-${d[this.seriesAccessor]}`);
      this.updateDiffLabel.attr('data-testid', 'difference-label').attr('data-id', d => `difference-label-${d.key}`);
      this.updateSeriesLabel.attr('data-testid', 'series-label');
      this.updateMarkers.attr('data-testid', 'marker'); // .attr('data-id', d => `marker-${d[this.ordinalAccessor]}-${d[this.seriesAccessor]}`);
      this.update.attr('data-testid', 'line').attr('data-id', d => `line-${d.key}`);
    }
    else {
      select(this.dumbbellPlotEl)
        .select('.visa-viz-d3-dumbbell-container')
        .attr('data-testid', null);
      select(this.dumbbellPlotEl)
        .select('.dumbbell-main-title')
        .attr('data-testid', null);
      select(this.dumbbellPlotEl)
        .select('.dumbbell-sub-title')
        .attr('data-testid', null);
      this.svg.attr('data-testid', null);
      this.root.attr('data-testid', null);
      this.rootG.attr('data-testid', null);
      this.legendG.attr('data-testid', null);
      this.tooltipG.attr('data-testid', null);
      this.dumbbellG.attr('data-testid', null);
      this.baselineG.attr('data-testid', null);
      this.references.attr('data-testid', null);
      this.updateLabels.attr('data-testid', null);
      this.updateLabelChildren.attr('data-testid', null).attr('data-id', null);
      this.updateDiffLabel.attr('data-testid', null).attr('data-id', null);
      this.updateSeriesLabel.attr('data-testid', null);
      this.updateMarkers.attr('data-testid', null); // .attr('data-id', null);
      this.update.attr('data-testid', null).attr('data-id', null);
    }
  }
  reSetRoot() {
    const changeSvg = prepareRenderChange({
      selection: this.svg,
      duration: this.duration,
      namespace: 'root_reset',
      easing: circleIn
    });
    changeSvg
      .attr('width', this.width)
      .attr('height', this.height)
      .attr('viewBox', '0 0 ' + this.width + ' ' + this.height);
    const changeRoot = prepareRenderChange({
      selection: this.root,
      duration: this.duration,
      namespace: 'root_reset',
      easing: circleIn
    });
    changeRoot.attr('transform', `translate(${this.margin.left}, ${this.margin.top})`);
    const changeRootG = prepareRenderChange({
      selection: this.rootG,
      duration: this.duration,
      namespace: 'root_reset',
      easing: circleIn
    });
    changeRootG.attr('transform', `translate(${this.padding.left}, ${this.padding.top})`);
    setAccessibilityDescriptionWidth(this.chartID, this.width);
  }
  drawXAxis() {
    const bandWidth = (this.innerPaddedWidth / this.nest.length) * 0.7;
    drawAxis({
      root: this.rootG,
      height: this.innerPaddedHeight,
      width: this.innerPaddedWidth,
      axisScale: this.x,
      left: false,
      wrapLabel: this.wrapLabel ? bandWidth : '',
      dateFormat: this.xAxis.format,
      format: this.xAxis.format,
      tickInterval: this.xAxis.tickInterval,
      label: this.xAxis.label,
      padding: this.padding,
      hide: !this.xAxis.visible,
      duration: this.duration
    });
  }
  drawYAxis() {
    drawAxis({
      root: this.rootG,
      height: this.innerPaddedHeight,
      width: this.innerPaddedWidth,
      axisScale: this.y,
      left: true,
      wrapLabel: this.wrapLabel ? 100 : '',
      format: this.yAxis.format,
      tickInterval: this.yAxis.tickInterval,
      label: this.yAxis.label,
      padding: this.padding,
      hide: !this.yAxis.visible,
      duration: this.duration
    });
  }
  setXAxisAccessibility() {
    setAccessXAxis({
      rootEle: this.dumbbellPlotEl,
      hasXAxis: this.xAxis ? this.xAxis.visible : false,
      xAxis: this.x ? this.x : false,
      xAxisLabel: this.xAxis.label ? this.xAxis.label : '' // this is optional for some charts, if hasXAxis is always false
    });
  }
  setYAxisAccessibility() {
    setAccessYAxis({
      rootEle: this.dumbbellPlotEl,
      hasYAxis: this.yAxis ? this.yAxis.visible : false,
      yAxis: this.y ? this.y : false,
      yAxisLabel: this.yAxis.label ? this.yAxis.label : '' // this is optional for some charts, if hasXAxis is always false
    });
  }
  drawBaselineX() {
    drawAxis({
      root: this.baselineG,
      height: this.innerPaddedHeight,
      width: this.innerPaddedWidth,
      axisScale: this.y,
      left: true,
      padding: this.padding,
      markOffset: this.x(0),
      hide: !this.isVertical ? !this.showBaselineY : true,
      duration: this.duration
    });
  }
  drawBaselineY() {
    drawAxis({
      root: this.baselineG,
      height: this.innerPaddedHeight,
      width: this.innerPaddedWidth,
      axisScale: this.x,
      left: false,
      padding: this.padding,
      markOffset: this.y(0),
      hide: this.isVertical ? !this.showBaselineX : true,
      duration: this.duration
    });
  }
  // dashed line grid for chart
  drawXGrid() {
    drawGrid(this.gridG, this.innerPaddedHeight, this.innerPaddedWidth, this.x, false, !this.xAxis.gridVisible, this.xAxis.tickInterval, this.duration);
  }
  drawYGrid() {
    drawGrid(this.gridG, this.innerPaddedHeight, this.innerPaddedWidth, this.y, true, !this.yAxis.gridVisible, this.yAxis.tickInterval, this.duration);
  }
  enterMarkerGeometries() {
    this.enterMarkers
      .attr('orient', 'auto')
      .attr('markerUnits', 'userSpaceOnUse')
      .attr('id', d => this.generateId(d, d.index))
      .attr('class', 'marker-' + this.marker.type)
      .attr('stroke', this.handleMarkerColors);
    if (this.marker.type === 'dot') {
      this.enterMarkers.append('circle').attr('r', 5);
    }
    else if (this.marker.type === 'stroke') {
      this.enterMarkers.append('path');
    }
    else if (this.marker.type === 'arrow') {
      this.enterMarkers.append('path');
    }
    this.updateMarkerSize(this.enterMarkers);
  }
  updateMarkerGeometries() {
    this.updateMarkers.interrupt();
    this.updateMarkers.attr('opacity', d => {
      return (this.marker.visible || d.focus) && !d.limitOpacity
        ? 1
        : this.marker.visible || d.focus
          ? this.hoverOpacity
          : 0;
    });
  }
  updateMarkerStyle() {
    this.updateMarkers.attr('stroke', this.handleMarkerColors);
  }
  exitMarkerGeometries() {
    this.exitMarkers
      .transition('exit')
      .duration(this.duration)
      .ease(circleIn)
      .remove();
  }
  // geometry based on data
  enterDumbbells() {
    this.enter.interrupt();
    this.enter
      .attr('class', 'dumbbell-plot')
      .attr('d', d => {
      const centerX1 = this.x(d.values[0][this.xAccessor]);
      const centerY1 = this.y(d.values[0][this.yAccessor]);
      const centerX2 = this.x(d.values[1][this.xAccessor]);
      const centerY2 = this.y(d.values[1][this.yAccessor]);
      const ymod = this.isVertical ? (centerY1 > centerY2 ? 0.001 : -0.001) : 0;
      const xmod = !this.isVertical ? (centerX1 > centerX2 ? 0.001 : -0.001) : 0;
      return `M ${centerX1 + xmod} ${centerY1 +
        ymod} L ${centerX1} ${centerY1} L ${centerX1} ${centerY1} L ${centerX2} ${centerY2} L ${centerX2} ${centerY2} L ${centerX2} ${centerY2} L ${centerX1} ${centerY1} L ${centerX1} ${centerY1} L ${centerX1} ${centerY1} L ${centerX2} ${centerY2} L ${centerX2} ${centerY2} L ${centerX2 -
        xmod} ${centerY2 - ymod}`;
    })
      .attr('cursor', !this.suppressEvents ? this.cursor : null)
      .attr('opacity', 0)
      .each((_d, i, n) => {
      initializeElementAccess(n[i]);
    })
      .on('click', !this.suppressEvents
      ? (d, i, n) => {
        if (d.values) {
          const node = n[i];
          const mouseEvent = event;
          const index = this.findMarkerIndex(d, node, mouseEvent);
          this.onClickHandler(d.values[index], n[i]);
        }
      }
      : null)
      .on('mouseover', !this.suppressEvents
      ? (d, i, n) => {
        let data = d;
        if (d.values) {
          const node = n[i];
          const mouseEvent = event;
          const index = this.findMarkerIndex(d, node, mouseEvent);
          overrideTitleTooltip(this.chartID, true);
          data = d.values[index];
          this.hoverEvent.emit({ data: data, target: n[i] });
        }
        this.showTooltip
          ? this.eventsTooltip({
            data: this.tooltipLabel.labelAccessor && this.tooltipLabel.labelAccessor.length ? data : d,
            evt: event,
            isToShow: true
          })
          : '';
      }
      : null)
      .on('mouseout', !this.suppressEvents ? () => this.onMouseOutHandler() : null)
      .attr('stroke', this.handleBarColors)
      .attr('fill-opacity', this.handleBarOpacity);
    this.update.order();
  }
  updateBarStyle() {
    this.update.attr('stroke', this.handleBarColors).attr('fill-opacity', this.handleBarOpacity);
  }
  updateMarkerSize(selection) {
    const markersToResize = selection || this.updateMarkers;
    markersToResize.each((d, i, n) => {
      const me = select(n[i]);
      const barSize = i < 2 && this.clickHighlight.length
        ? parseFloat(this.clickStyle.strokeWidth + '')
        : i < 4
          ? this.barStyle.width
          : parseFloat(this.hoverStyle.strokeWidth + '');
      const barMult = d.focus ? this.focusMarker.sizeFromBar : this.marker.sizeFromBar;
      const mult = this.marker.type === 'dot'
        ? 1
        : this.marker.type === 'stroke'
          ? 2
          : (d.focus && this.focusMarker.key) || (!this.focusMarker.key && d.referenceIndex === 0)
            ? 1
            : 2;
      const unit = barMult * mult * (barSize + 1);
      const strokeUnit = unit ? 10 / unit : 0;
      me.attr('viewBox', `0 0 ${10 + strokeUnit} ${10 + strokeUnit}`)
        .attr('refX', 5 + strokeUnit / 2)
        .attr('refY', 5 + strokeUnit / 2)
        .attr('stroke-width', strokeUnit)
        .attr('markerWidth', unit)
        .attr('markerHeight', unit);
      if (this.marker.type === 'dot') {
        me.select('circle')
          .attr('cx', 5 + strokeUnit / 2)
          .attr('cy', 5 + strokeUnit / 2);
      }
      else if (this.marker.type === 'stroke') {
        me.select('path').attr('d', `M 4.5 ${0 + strokeUnit / 2} L 4.5 ${10 + strokeUnit / 2} L 6 ${10 + strokeUnit / 2} L 6 ${0 +
          strokeUnit / 2} z`);
      }
      else if (this.marker.type === 'arrow') {
        me.select('path')
          .attr('transform', d.focus && this.focusMarker.key && d.referenceIndex === 1
          ? `rotate(180,${5 + strokeUnit / 2},${5 + strokeUnit / 2})`
          : null)
          .attr('d', (d.focus && this.focusMarker.key) || (!this.focusMarker.key && d.referenceIndex === 0)
          ? `M ${0 + strokeUnit / 2} ${5 + strokeUnit / 4} L ${10 + strokeUnit / 2} ${0 + strokeUnit / 2} L ${10 +
            strokeUnit / 2} ${10 + strokeUnit / 2} z`
          : `M 4.5 ${0 + strokeUnit / 2} L 4.5 ${10 + strokeUnit / 2} L 6 ${10 + strokeUnit / 2} L 6 ${0 +
            strokeUnit / 2} z`);
      }
    });
  }
  // unlike normal draw__ functions, this only runs if focusMarker changes
  drawMarkerGeometries() {
    this.updateMarkers.selectAll('.marker-' + this.marker.type).data(d => [d]); // data must be explicitly rebound to child elements (this normally only happens on enter)
    if (this.marker.type === 'arrow') {
      // Note: dot and stroke do not change "direction" (only size), and thus don't redraw
      this.updateMarkers.selectAll('path').attr('d', (d, i, n) => {
        const barSize = i < 2 && this.clickHighlight.length
          ? parseFloat(this.clickStyle.strokeWidth + '')
          : i < 4
            ? this.barStyle.width
            : parseFloat(this.hoverStyle.strokeWidth + '');
        const barMult = d.focus ? this.focusMarker.sizeFromBar : this.marker.sizeFromBar;
        const mult = this.marker.type === 'dot'
          ? 1
          : this.marker.type === 'stroke'
            ? 2
            : (d.focus && this.focusMarker.key) || (!this.focusMarker.key && d.referenceIndex === 0)
              ? 1
              : 2;
        const unit = barMult * mult * (barSize + 1);
        const strokeUnit = unit ? 10 / unit : 0;
        select(n[i]).attr('transform', d.focus && this.focusMarker.key && d.referenceIndex === 1
          ? `rotate(180,${5 + strokeUnit / 2},${5 + strokeUnit / 2})`
          : null);
        return (d.focus && this.focusMarker.key) || (!this.focusMarker.key && d.referenceIndex === 0)
          ? `M ${0 + strokeUnit / 2} ${5 + strokeUnit / 4} L ${10 + strokeUnit / 2} ${0 + strokeUnit / 2} L ${10 +
            strokeUnit / 2} ${10 + strokeUnit / 2} z`
          : `M 4.5 ${0 + strokeUnit / 2} L 4.5 ${10 + strokeUnit / 2} L 6 ${10 + strokeUnit / 2} L 6 ${0 +
            strokeUnit / 2} z`;
      });
    }
  }
  updateDumbbells() {
    this.update.interrupt();
    this.enter
      .transition('opacity')
      .duration(this.duration)
      .ease(circleIn)
      .attr('opacity', 1);
  }
  exitDumbbells() {
    this.exit.interrupt();
    this.exit
      .transition('exit')
      .ease(circleIn)
      .duration(this.duration / 2)
      .attr('opacity', 0)
      .attr('d', (_, i, n) => {
      const me = select(n[i]);
      const centerX1 = +me.attr('data-centerX1');
      const centerY1 = +me.attr('data-centerY1');
      const centerX2 = +me.attr('data-centerX2');
      const centerY2 = +me.attr('data-centerY2');
      const ymod = this.isVertical ? (centerY1 > centerY2 ? 0.001 : -0.001) : 0;
      const xmod = !this.isVertical ? (centerX1 > centerX2 ? 0.001 : -0.001) : 0;
      return `M ${centerX1 + xmod} ${centerY1 +
        ymod} L ${centerX1} ${centerY1} L ${centerX1} ${centerY1} L ${centerX2} ${centerY2} L ${centerX2} ${centerY2} L ${centerX2} ${centerY2} L ${centerX1} ${centerY1} L ${centerX1} ${centerY1} L ${centerX1} ${centerY1} L ${centerX2} ${centerY2} L ${centerX2} ${centerY2} L ${centerX2 -
        xmod} ${centerY2 - ymod}`;
    });
    // We use this.update instead of this.exit to ensure the functions at the end
    // of our lifecycle run, even though we are removing the exiting elements from
    // inside this transition's endAll.
    // (If we put this in this.exit, it will only run if elements exit.
    // We want this to run every lifecycle.)
    this.update
      .transition('accessibilityAfterExit')
      .duration(this.duration)
      .ease(circleIn)
      .call(transitionEndAll, () => {
      // before we exit geometries, we need to check if a focus exists or not
      const focusDidExist = checkAccessFocus(this.rootG.node());
      // then we must remove the exiting elements
      this.exit.remove();
      // then our util can count geometries
      this.setChartCountAccessibility();
      // our group's label should update with new counts too
      this.setGroupAccessibilityID();
      // since items exited, labels must receive updated values
      this.setGeometryAriaLabels();
      // and also make sure the user's focus isn't lost
      retainAccessFocus({
        parentGNode: this.rootG.node(),
        focusDidExist
        // recursive: true
      });
    });
  }
  drawDumbbells() {
    this.update
      .classed('moving', (d, i, n) => {
      const me = select(n[i]);
      const clicked = checkClicked(d.values[0], this.clickHighlight, this.innerInteractionKeys) &&
        checkClicked(d.values[1], this.clickHighlight, this.innerInteractionKeys);
      const hovered = checkHovered(d.values[0], this.hoverHighlight, this.innerInteractionKeys) &&
        checkHovered(d.values[1], this.hoverHighlight, this.innerInteractionKeys);
      const barSize = this.dumbbellInteraction
        ? clicked
          ? parseFloat(this.clickStyle.strokeWidth + '') || this.barStyle.width
          : hovered
            ? parseFloat(this.hoverStyle.strokeWidth + '') || this.barStyle.width
            : this.barStyle.width
        : this.barStyle.width;
      const centerX1 = this.x(d.values[0][this.xAccessor]);
      const centerY1 = this.y(d.values[0][this.yAccessor]);
      const centerX2 = this.x(d.values[1][this.xAccessor]);
      const centerY2 = this.y(d.values[1][this.yAccessor]);
      const oldBar = +me.attr('data-barSize');
      const oldX1 = +me.attr('data-centerX1');
      const oldY1 = +me.attr('data-centerY1');
      const oldX2 = +me.attr('data-centerX2');
      const oldY2 = +me.attr('data-centerY2');
      return (barSize !== oldBar || centerX1 !== oldX1 || centerY1 !== oldY1 || centerX2 !== oldX2 || centerY2 !== oldY2);
    })
      .attr('data-translate-x', this.margin.left + this.padding.left)
      .attr('data-translate-y', this.margin.top + this.padding.top)
      .attr('data-d', this.setBarSize)
      .transition('update')
      .ease(circleIn)
      .duration(this.duration)
      .attr('d', this.setBarSize)
      .call(transitionEndAll, () => {
      this.update.classed('moving', false);
      // we must make sure if geometries move, that our focus indicator does too
      retainAccessFocus({
        parentGNode: this.rootG.node()
        // focusDidExist // this only matters for exiting selections
        // recursive: true // this only matters for
      });
      // now we can emit the event that transitions are complete
      this.transitionEndEvent.emit({ chartID: this.chartID });
    });
  }
  updateMarkerIds() {
    this.updateMarkers.attr('id', d => this.generateId(d, d.index));
    this.update
      .attr('marker-start', d => {
      const check = checkInteraction(d.values[0], 1, 0, this.hoverHighlight, this.clickHighlight, this.innerInteractionKeys);
      const hovered = checkHovered(d.values[0], this.hoverHighlight, this.innerInteractionKeys);
      const clicked = checkClicked(d.values[0], this.clickHighlight, this.innerInteractionKeys);
      const marker = hovered && !clicked
        ? this.updateMarkers._groups[0][4].id
        : clicked || check
          ? this.updateMarkers._groups[0][0].id
          : this.updateMarkers._groups[0][2].id;
      return this.url + marker + ')';
    })
      .attr('marker-end', d => {
      const check = checkInteraction(d.values[1], 1, 0, this.hoverHighlight, this.clickHighlight, this.innerInteractionKeys);
      const hovered = checkHovered(d.values[1], this.hoverHighlight, this.innerInteractionKeys);
      const clicked = checkClicked(d.values[1], this.clickHighlight, this.innerInteractionKeys);
      const marker = hovered && !clicked
        ? this.updateMarkers._groups[0][5].id
        : clicked || check
          ? this.updateMarkers._groups[0][1].id
          : this.updateMarkers._groups[0][3].id;
      return this.url + marker + ')';
    });
  }
  updateInteractionState() {
    // we created an "opacity" transition namespace in update's transition
    // we override it here to instantly display opacity state (below)
    this.update.interrupt('opacity');
    // this.updateSeriesLabel.interrupt('opacity');
    // this.updateDiffLabel.interrupt('opacity');
    this.updateLabelChildren.interrupt('opacity');
    this.updateMarkers.interrupt();
    // we use this.update and this.labelCurrent from setGlobalSelection here
    // the lifecycle state does not matter (enter/update/exit)
    // since interaction state can happen at any time
    this.updateMarkers.attr('opacity', d => {
      return (this.marker.visible || d.focus) && !d.limitOpacity
        ? 1
        : this.marker.visible || d.focus
          ? this.hoverOpacity
          : 0;
    });
    this.update
      .attr('opacity', 1)
      .attr('stroke', this.handleBarColors)
      .attr('fill-opacity', this.handleBarOpacity)
      .each((_, i, n) => {
      const me = select(n[i]);
      if (!me.classed('moving')) {
        me.attr('d', this.setBarSize);
      }
    });
    // we have to make sure this call does not clash with shouldUpdateLabels in watchers
    this.drawDataLabels(true);
    if (this.seriesLabelDetails.visible &&
      (this.seriesLabelDetails.placement === 'auto' || this.seriesLabelDetails.collisionHideOnly)) {
      this.drawSeriesLabels(true);
    }
    if (this.diffLabelDetails.visible &&
      (this.diffLabelDetails.placement === 'auto' || this.diffLabelDetails.collisionHideOnly)) {
      this.drawDifferenceLabels(true);
    }
    retainAccessFocus({
      parentGNode: this.rootG.node()
    });
    setLegendInteractionState({
      root: this.legendG,
      uniqueID: this.chartID,
      interactionKeys: this.innerInteractionKeys,
      groupAccessor: this.seriesAccessor,
      hoverHighlight: this.hoverHighlight,
      clickHighlight: this.clickHighlight,
      hoverStyle: this.hoverStyle,
      clickStyle: this.clickStyle,
      hoverOpacity: this.hoverOpacity
    });
  }
  enterSeriesLabels() {
    this.enterSeriesLabel.interrupt();
    const isAuto = this.seriesLabelDetails.placement === 'auto';
    const checkString = this.isVertical ? 'right' : 'top';
    const isStandard = isAuto ? true : this.seriesLabelDetails.placement.includes(checkString);
    this.enterSeriesLabel
      .attr('opacity', d => {
      const seriesLabelOpacity = !this.seriesLabelDetails.visible ? 0 : 1;
      if (!this.seriesInteraction) {
        return seriesLabelOpacity;
      }
      else {
        return checkInteraction(d, seriesLabelOpacity, this.hoverOpacity, this.hoverHighlight, this.clickHighlight, this.innerInteractionKeys) < 1
          ? 0
          : Number.EPSILON;
      }
    })
      .attr('class', 'dumbbell-series-label')
      .attr('fill', this.handleSeriesLabelColors)
      .attr('cursor', !this.suppressEvents && this.seriesInteraction ? this.cursor : null)
      .on('click', !this.suppressEvents && this.seriesInteraction ? (d, i, n) => this.onClickHandler(d, n[i]) : null)
      .on('mouseover', !this.suppressEvents && this.seriesInteraction ? (d, i, n) => this.onHoverHandler(d, n[i], false) : null)
      .on('mouseout', !this.suppressEvents && this.seriesInteraction ? () => this.onMouseOutHandler() : null)
      .attr('text-anchor', this.isVertical && isStandard ? 'start' : this.isVertical ? 'end' : 'middle')
      .attr('x', d => (this.isVertical && isStandard ? this.innerPaddedWidth : !this.isVertical ? this.x(d.value) : 0))
      .attr('y', d => this.isVertical ? this.y(d.value) : !this.isVertical && !isStandard ? this.innerPaddedHeight : 0)
      .attr('dx', this.isVertical && isStandard ? '0.1em' : this.isVertical ? '-0.1em' : '0')
      .attr('dy', this.isVertical ? '0.3em' : '-0.1em');
  }
  updateSeriesLabels() {
    this.updateSeriesLabel.interrupt();
    this.updateSeriesLabel
      .transition('opacity_series_labels')
      .ease(circleIn)
      .duration(this.duration)
      .attr('opacity', d => {
      const seriesLabelOpacity = !this.seriesLabelDetails.visible ? 0 : 1;
      if (!this.seriesInteraction) {
        return seriesLabelOpacity;
      }
      else {
        return checkInteraction(d, seriesLabelOpacity, this.hoverOpacity, this.hoverHighlight, this.clickHighlight, this.innerInteractionKeys) < 1
          ? 0
          : 1;
      }
    });
  }
  exitSeriesLabels() {
    this.exitSeriesLabel
      .transition('exit_series_labels')
      .ease(circleIn)
      .duration(this.duration)
      .attr('opacity', 0)
      .remove();
  }
  drawSeriesLabels(interactionOverride) {
    const isAuto = this.seriesLabelDetails.placement === 'auto';
    const checkString = this.isVertical ? 'right' : 'top';
    const isStandard = isAuto ? true : this.seriesLabelDetails.placement.includes(checkString);
    const hideOnly = !isAuto && this.seriesLabelDetails.collisionHideOnly;
    const seriesLabelUpdate = this.updateSeriesLabel
      .text((d, i) => (this.seriesLabelDetails.label ? this.seriesLabelDetails.label[i] : d.label))
      .style('visibility', (_, i, n) => isAuto || this.seriesLabelDetails.collisionHideOnly ? select(n[i]).style('visibility') : null)
      .attr('fill', this.handleSeriesLabelColors)
      .attr('data-x', d => this.isVertical && isStandard ? this.innerPaddedWidth : !this.isVertical ? this.x(d.value) : 0)
      .attr('data-y', (d, i, n) => {
      const textElement = n[i];
      const style = getComputedStyle(textElement);
      const fontSize = parseFloat(style.fontSize);
      const textHeight = Math.max(fontSize - 1, 1); // clone.getBBox().height;
      return this.isVertical
        ? this.y(d.value) + 0.3 * textHeight // we need to account for dy here for series labels
        : !this.isVertical && !isStandard
          ? this.innerPaddedHeight
          : 0;
    })
      .attr('data-translate-x', this.margin.left + this.padding.left)
      .attr('data-translate-y', this.margin.top + this.padding.top)
      .attr('data-use-dx', hideOnly)
      .attr('data-use-dy', hideOnly)
      .attr('data-text-anchor', this.isVertical && isStandard ? 'start' : this.isVertical ? 'end' : 'middle')
      .attr('dx', this.isVertical && isStandard ? '0.1em' : this.isVertical ? '-0.1em' : '0')
      .attr('dy', this.isVertical ? '0.3em' : '-0.1em')
      .transition('update_series_labels')
      .ease(circleIn)
      .duration(() => {
      if (interactionOverride) {
        return 0;
      }
      return this.duration;
    });
    if (this.seriesLabelDetails.visible &&
      (this.seriesLabelDetails.placement === 'auto' || this.seriesLabelDetails.collisionHideOnly)) {
      // for series labels we are only going to check middle for now
      // const validPositions = hideOnly ? ['middle'] : this.isVertical ? ['right', 'middle', 'left'] : ['top', 'middle', 'bottom'];
      this.bitmaps = resolveLabelCollision({
        bitmaps: this.bitmaps,
        labelSelection: seriesLabelUpdate,
        avoidMarks: [],
        validPositions: ['middle'],
        offsets: [1],
        accessors: [this.seriesAccessor],
        size: [roundTo(this.width, 0), roundTo(this.height, 0)],
        hideOnly: this.seriesLabelDetails.visible &&
          this.seriesLabelDetails.collisionHideOnly &&
          this.seriesLabelDetails.placement !== 'auto'
      });
      // if we are in hide only we need to add attributes back
      if (hideOnly) {
        seriesLabelUpdate
          .attr('text-anchor', this.isVertical && isStandard ? 'start' : this.isVertical ? 'end' : 'middle')
          .attr('x', d => this.isVertical && isStandard ? this.innerPaddedWidth : !this.isVertical ? this.x(d.value) : 0)
          .attr('y', d => this.isVertical ? this.y(d.value) : !this.isVertical && !isStandard ? this.innerPaddedHeight : 0)
          .attr('dx', this.isVertical && isStandard ? '0.1em' : this.isVertical ? '-0.1em' : '0')
          .attr('dy', this.isVertical ? '0.3em' : '-0.1em');
      }
    }
    else {
      seriesLabelUpdate
        .attr('text-anchor', this.isVertical && isStandard ? 'start' : this.isVertical ? 'end' : 'middle')
        .attr('x', d => this.isVertical && isStandard ? this.innerPaddedWidth : !this.isVertical ? this.x(d.value) : 0)
        .attr('y', d => this.isVertical ? this.y(d.value) : !this.isVertical && !isStandard ? this.innerPaddedHeight : 0)
        .attr('dx', this.isVertical && isStandard ? '0.1em' : this.isVertical ? '-0.1em' : '0')
        .attr('dy', this.isVertical ? '0.3em' : '-0.1em');
    }
  }
  setSeriesLabelOpacity() {
    this.updateSeriesLabel.interrupt('opacity_series_labels');
    this.updateSeriesLabel.attr('opacity', d => {
      const seriesLabelOpacity = !this.seriesLabelDetails.visible ? 0 : 1;
      // check if interactionKeys includes seriesAccessor, if not then don't check seriesLabel for interaction
      if (!this.seriesInteraction) {
        return seriesLabelOpacity;
      }
      else {
        return checkInteraction(d, seriesLabelOpacity, this.hoverOpacity, this.hoverHighlight, this.clickHighlight, this.innerInteractionKeys) < 1
          ? 0
          : 1;
      }
    });
  }
  enterDifferenceLabels() {
    this.enterDiffLabel.interrupt();
    const checkString = this.isVertical ? 'left' : 'top';
    const isStandard = this.diffLabelDetails.placement.includes(checkString);
    this.enterDiffLabel
      .attr('class', 'dumbbell-diff-label')
      .attr('opacity', d => {
      const diffLabelOpacity = this.differenceLabel.visible ? 1 : 0;
      // check if interactionKeys includes seriesAccessor, if not then don't check seriesLabel for interaction
      if (!this.dumbbellInteraction) {
        return diffLabelOpacity;
      }
      else {
        return checkInteraction(d.values[0], diffLabelOpacity, this.hoverOpacity, this.hoverHighlight, this.clickHighlight, this.innerInteractionKeys) < 1
          ? 0
          : Number.EPSILON;
      }
    })
      .attr('fill', this.setDiffLabelColor)
      .attr('cursor', !this.suppressEvents && this.dumbbellInteraction ? this.cursor : null)
      .on('click', !this.suppressEvents && this.dumbbellInteraction && this.differenceLabel.visible
      ? (d, i, n) => this.onClickHandler(d, n[i])
      : null)
      .on('mouseover', !this.suppressEvents && this.dumbbellInteraction && this.differenceLabel.visible
      ? (d, i, n) => this.onHoverHandler(d, n[i], true)
      : null)
      .on('mouseout', !this.suppressEvents && this.dumbbellInteraction && this.differenceLabel.visible
      ? () => this.onMouseOutHandler()
      : null)
      .attr('x', d => (this.isVertical ? this.x(d.values[0][this.ordinalAccessor]) : this.x(d.middle)))
      .attr('y', d => !this.isVertical && isStandard
      ? this.y(d.key) - this.barStyle.width / 2 - 4
      : !this.isVertical
        ? this.y(d.key) + this.barStyle.width / 2 + 4
        : this.y(d.middle))
      .attr('dx', this.isVertical && isStandard
      ? -this.barStyle.width / 2 - 4
      : this.isVertical
        ? this.barStyle.width / 2 + 4
        : '0')
      .attr('dy', !this.isVertical && isStandard ? '0' : !this.isVertical ? '0.6em' : '0.3em');
  }
  updateDifferenceLabels() {
    this.updateDiffLabel.interrupt();
    this.updateDiffLabel
      .transition('opacity_diff_labels')
      .ease(circleIn)
      .duration(this.duration)
      .attr('opacity', d => {
      const diffLabelOpacity = this.differenceLabel.visible ? 1 : 0;
      // check if interactionKeys includes seriesAccessor, if not then don't check seriesLabel for interaction
      if (!this.dumbbellInteraction) {
        return diffLabelOpacity;
      }
      else {
        return checkInteraction(d.values[0], diffLabelOpacity, this.hoverOpacity, this.hoverHighlight, this.clickHighlight, this.innerInteractionKeys) < 1
          ? 0
          : 1;
      }
    });
  }
  exitDifferenceLabels() {
    this.exitDiffLabel
      .transition('exit_diff_label')
      .ease(circleIn)
      .duration(this.duration)
      .attr('opacity', 0)
      .remove();
  }
  drawDifferenceLabels(interactionOverride) {
    const isAuto = this.diffLabelDetails.placement === 'auto';
    const checkString = this.isVertical ? 'left' : 'top';
    const isStandard = isAuto ? true : this.diffLabelDetails.placement.includes(checkString);
    const hideOnly = !isAuto && this.differenceLabel.collisionHideOnly;
    const updatingDiffLabels = this.updateDiffLabel
      .text(d => formatDataLabel(d, this.differenceLabel.calculation, this.differenceLabel.format))
      .style('visibility', (_, i, n) => isAuto || this.differenceLabel.collisionHideOnly ? select(n[i]).style('visibility') : null)
      .attr('data-x', d => (this.isVertical ? this.x(d.values[0][this.ordinalAccessor]) : this.x(d.middle)))
      .attr('data-y', d => !this.isVertical && isStandard
      ? this.y(d.key) - this.barStyle.width / 2 - 4
      : !this.isVertical
        ? this.y(d.key) + this.barStyle.width / 2 + 4
        : this.y(d.middle))
      .attr('data-translate-x', this.margin.left + this.padding.left)
      .attr('data-translate-y', this.margin.top + this.padding.top)
      .attr('data-use-dx', hideOnly)
      .attr('data-use-dy', hideOnly)
      .attr('dx', this.isVertical && isStandard
      ? -this.barStyle.width / 2 - 4
      : this.isVertical
        ? this.barStyle.width / 2 + 4
        : '0')
      .attr('dy', !this.isVertical && isStandard ? '0' : !this.isVertical ? '0.6em' : '0.3em')
      // text-anchor adds a blip to the update of these labels, placement also seems ok without it
      .attr('text-anchor', (_, i, n) => isAuto && select(n[i]).attr('text-anchor')
      ? select(n[i]).attr('text-anchor')
      : this.isVertical && isStandard
        ? 'end'
        : this.isVertical
          ? 'start'
          : 'middle')
      .transition('update_diff_label')
      .ease(circleIn)
      .duration(() => {
      if (interactionOverride) {
        return 0;
      }
      return this.duration;
    });
    if (this.differenceLabel.visible &&
      (this.diffLabelDetails.placement === 'auto' || this.differenceLabel.collisionHideOnly)) {
      const validPositions = hideOnly ? ['middle'] : this.isVertical ? ['left', 'right'] : ['top', 'bottom'];
      const offsets = hideOnly
        ? [this.barStyle.width / 2 + 4]
        : [this.barStyle.width / 2 + 4, this.barStyle.width / 2 + 4];
      this.bitmaps = resolveLabelCollision({
        bitmaps: this.bitmaps,
        labelSelection: updatingDiffLabels,
        avoidMarks: [this.update],
        validPositions,
        offsets,
        accessors: ['key'],
        size: [roundTo(this.width, 0), roundTo(this.height, 0)],
        hideOnly: this.differenceLabel.visible &&
          this.differenceLabel.collisionHideOnly &&
          this.diffLabelDetails.placement !== 'auto'
      });
      // if we are in hide only we need to add attributes back
      if (hideOnly) {
        updatingDiffLabels
          .attr('x', d => (this.isVertical ? this.x(d.values[0][this.ordinalAccessor]) : this.x(d.middle)))
          .attr('y', d => !this.isVertical && isStandard
          ? this.y(d.key) - this.barStyle.width / 2 - 4
          : !this.isVertical
            ? this.y(d.key) + this.barStyle.width / 2 + 4
            : this.y(d.middle))
          .attr('dx', this.isVertical && isStandard
          ? -this.barStyle.width / 2 - 4
          : this.isVertical
            ? this.barStyle.width / 2 + 4
            : '0')
          .attr('dy', !this.isVertical && isStandard ? '0' : !this.isVertical ? '0.6em' : '0.3em')
          .attr('text-anchor', this.isVertical && isStandard ? 'end' : this.isVertical ? 'start' : 'middle');
      }
    }
    else {
      updatingDiffLabels
        .attr('x', d => (this.isVertical ? this.x(d.values[0][this.ordinalAccessor]) : this.x(d.middle)))
        .attr('y', d => !this.isVertical && isStandard
        ? this.y(d.key) - this.barStyle.width / 2 - 4
        : !this.isVertical
          ? this.y(d.key) + this.barStyle.width / 2 + 4
          : this.y(d.middle))
        .attr('dx', this.isVertical && isStandard
        ? -this.barStyle.width / 2 - 4
        : this.isVertical
          ? this.barStyle.width / 2 + 4
          : '0')
        .attr('dy', !this.isVertical && isStandard ? '0' : !this.isVertical ? '0.6em' : '0.3em')
        .attr('text-anchor', this.isVertical && isStandard ? 'end' : this.isVertical ? 'start' : 'middle');
    }
  }
  enterDataLabels() {
    this.enterLabels.interrupt();
    this.enterLabels
      .attr('class', 'dumbbell-label-wrapper')
      .attr('opacity', 0)
      .attr('fill', this.handleLabelColors);
    this.enterLabelChildren
      .attr('class', 'dumbbell-dataLabel')
      .attr('opacity', d => {
      return checkInteraction(d, 1, this.hoverOpacity, this.hoverHighlight, this.clickHighlight, this.innerInteractionKeys) < 1
        ? 0
        : Number.EPSILON;
    })
      .attr('fill', this.handleLabelColors)
      .attr('cursor', !this.suppressEvents && this.dataLabel.visible ? this.cursor : null)
      .on('click', !this.suppressEvents && this.dataLabel.visible ? (d, i, n) => this.onClickHandler(d, n[i]) : null)
      .on('mouseover', !this.suppressEvents && this.dataLabel.visible ? (d, i, n) => this.onHoverHandler(d, n[i], true) : null)
      .on('mouseout', !this.suppressEvents && this.dataLabel.visible ? () => this.onMouseOutHandler() : null);
    placeDataLabels({
      root: this.enterLabelChildren,
      xScale: this.x,
      yScale: this.y,
      ordinalAccessor: this.ordinalAccessor,
      valueAccessor: this.valueAccessor,
      placement: this.placement,
      chartType: 'dumbbell',
      layout: this.layoutOverride,
      labelOffset: this.markerData
    });
  }
  setDifferenceLabelOpacity() {
    this.updateDiffLabel.interrupt('opacity_diff_labels');
    this.updateDiffLabel.attr('opacity', d => {
      const diffLabelOpacity = this.differenceLabel.visible ? 1 : 0;
      // check if interactionKeys includes seriesAccessor, if not then don't check seriesLabel for interaction
      if (!this.dumbbellInteraction) {
        return diffLabelOpacity;
      }
      else {
        return checkInteraction(d.values[0], diffLabelOpacity, this.hoverOpacity, this.hoverHighlight, this.clickHighlight, this.innerInteractionKeys) < 1
          ? 0
          : 1;
      }
    });
  }
  updateDataLabels() {
    this.updateLabelChildren.classed('transitioning', true);
    this.updateLabels
      .transition('opacity')
      .ease(circleIn)
      .duration(this.duration)
      .attr('opacity', () => {
      const labelOpacity = !this.dataLabel.visible ? 0 : 1;
      return labelOpacity;
    })
      .call(transitionEndAll, () => {
      this.updateLabelChildren.classed('transitioning', false);
    });
  }
  exitDataLabels() {
    this.exitLabels.interrupt();
    this.exitLabels
      .selectAll('.dumbbell-dataLabel')
      .transition('exit')
      .ease(circleIn)
      .duration(this.duration / 2)
      .attr('opacity', 0)
      .call(transitionEndAll, () => {
      this.exitLabels.remove();
    });
    this.exitLabelChildren
      .transition('exit_dataLabel')
      .ease(circleIn)
      .duration(this.duration)
      .attr('opacity', 0)
      .remove();
  }
  drawDataLabels(interactionOverride) {
    const isAuto = this.placement === 'auto';
    const hideOnly = this.placement !== 'auto' && this.dataLabel.collisionHideOnly;
    this.updateLabelChildren.text(d => {
      return formatDataLabel(d, this.innerLabelAccessor, this.dataLabel.format);
    });
    const labelUpdate = this.updateLabelChildren
      .attr('fill', this.handleLabelColors)
      .style('visibility', (_, i, n) => isAuto || this.dataLabel.collisionHideOnly ? select(n[i]).style('visibility') : null)
      .attr('data-translate-x', this.margin.left + this.padding.left)
      .attr('data-translate-y', this.margin.top + this.padding.top)
      .attr('data-use-dx', hideOnly)
      .attr('data-use-dy', hideOnly)
      .attr('dx', d => (this.isVertical ? '0.0em' : d.offset >= 0 ? '-0.1em' : '0.1em'))
      .attr('dy', d => {
      return this.isVertical && d.offset >= 0 ? '0.9em' : this.isVertical ? '-0.3em' : '0.0em';
    })
      // .attr('data-x',d => this.isVertical ? this.x(d[this.ordinalAccessor]) : this.x(d[this.valueAccessor]) - d.offset)
      .attr('data-y', (d, i, n) => {
      const textElement = n[i];
      const style = getComputedStyle(textElement);
      const fontSize = parseFloat(style.fontSize);
      const textHeight = Math.max(fontSize - 1, 1); // clone.getBBox().height;
      const textWidth = getTextWidth(textElement.textContent, fontSize, true, style.fontFamily);
      const xAdjust = this.layoutOverride !== 'horizontal'
        ? 0
        : d.offset >= 0 // (offset >= 0 means right item)
          ? -textWidth / 2
          : textWidth / 2;
      const heightAdjust = // since we have some logic in util that assumes certain placements, we need to adjust for it here
       this.layoutOverride !== 'vertical'
        ? -textHeight / 2
        : d.offset >= 0 // (offset >= 0 means bottom item)
          ? textHeight / 2
          : -textHeight + -textHeight / 2;
      select(textElement).attr('data-x', d => (this.isVertical ? this.x(d[this.ordinalAccessor]) : this.x(d[this.valueAccessor]) - d.offset) + xAdjust);
      return this.isVertical
        ? this.y(d[this.valueAccessor]) + d.offset + heightAdjust // + d.offset // + heightAdjust
        : this.y(d[this.ordinalAccessor]) + heightAdjust;
    })
      .attr('data-offset', d => d.offset) // to be removed
      .transition('update_dataLabel')
      .ease(circleIn)
      .duration(() => {
      if (interactionOverride) {
        return 0;
      }
      return this.duration;
    });
    this.bitmaps = placeDataLabels({
      root: labelUpdate,
      xScale: this.x,
      yScale: this.y,
      ordinalAccessor: this.ordinalAccessor,
      valueAccessor: this.valueAccessor,
      placement: this.placement,
      chartType: 'dumbbell',
      layout: this.layoutOverride,
      labelOffset: this.markerData,
      avoidCollision: {
        runOccupancyBitmap: this.dataLabel.visible && this.placement === 'auto',
        labelSelection: labelUpdate,
        avoidMarks: [this.update],
        validPositions: ['middle'],
        offsets: [1],
        accessors: [this.ordinalAccessor, this.seriesAccessor, 'key'],
        size: [roundTo(this.width, 0), roundTo(this.height, 0)],
        boundsScope: 'centroid',
        hideOnly: this.dataLabel.visible && this.dataLabel.collisionHideOnly
      }
    });
  }
  updateDiffLabelColor() {
    this.updateDiffLabel.attr('fill', this.setDiffLabelColor);
  }
  setLabelOpacity() {
    this.updateLabels.attr('opacity', this.dataLabel.visible ? 1 : 0);
    this.updateLabelChildren.attr('opacity', d => {
      return checkInteraction(d, 1, this.hoverOpacity, this.hoverHighlight, this.clickHighlight, this.innerInteractionKeys) < 1
        ? 0
        : 1;
    });
  }
  updateMarkerOpacity() {
    this.updateMarkers.interrupt();
    this.updateMarkers.attr('opacity', d => {
      return (this.marker.visible || d.focus) && !d.limitOpacity
        ? 1
        : this.marker.visible || d.focus
          ? this.hoverOpacity
          : 0;
    });
  }
  drawReferenceLines() {
    const currentReferences = this.references.selectAll('g').data(this.referenceLines, d => d.label);
    const enterReferences = currentReferences
      .enter()
      .append('g')
      .attr('class', '.dumbbell-reference')
      .attr('opacity', 1);
    const enterLines = enterReferences.append('line');
    enterLines
      // .attr('id', (_, i) => 'reference-line-' + i)
      .attr('class', 'dumbbell-reference-line')
      .attr('data-testid', this.unitTest ? 'reference-line' : null)
      .attr('opacity', 0);
    const enterLabels = enterReferences.append('text');
    enterLabels
      // .attr('id', (_, i) => 'reference-line-' + i + '-label')
      .attr('class', 'dumbbell-reference-line-label')
      .attr('opacity', 0);
    const mergeReferences = currentReferences.merge(enterReferences);
    const mergeLines = mergeReferences
      .selectAll('.dumbbell-reference-line')
      .data(d => [d])
      .transition('merge')
      .ease(circleIn)
      .duration(this.duration);
    const mergeLabels = mergeReferences
      .selectAll('.dumbbell-reference-line-label')
      .data(d => [d])
      .transition('merge')
      .ease(circleIn)
      .duration(this.duration)
      .text(d => d.label);
    const exitReferences = currentReferences.exit();
    exitReferences
      .transition('exit')
      .ease(circleIn)
      .duration(this.duration)
      .attr('opacity', 0)
      .remove();
    enterReferences.attr('transform', d => {
      const scale = !this.isVertical ? 'x' : 'y';
      return 'translate(0,' + this[scale](d.value) + ')';
    });
    mergeReferences
      .transition('merge')
      .ease(circleIn)
      .duration(this.duration)
      .attr('transform', d => {
      const scale = !this.isVertical ? 'x' : 'y';
      return 'translate(0,' + this[scale](d.value) + ')';
    });
    enterLines
      .attr('x1', 0)
      .attr('y1', 0)
      .attr('y2', 0)
      .attr('x2', this.innerPaddedWidth);
    enterLabels
      .attr('text-anchor', d => ((d.labelPlacementHorizontal || 'right') === 'right' ? 'start' : 'end'))
      .attr('x', d => ((d.labelPlacementHorizontal || 'right') === 'right' ? this.innerPaddedWidth : 0))
      .attr('y', 0)
      .attr('dx', d => ((d.labelPlacementHorizontal || 'right') === 'right' ? '0.1em' : '-0.1em'))
      .attr('dy', '0.3em');
    mergeLines
      .attr('x1', 0)
      .attr('y1', 0)
      .attr('y2', 0)
      .attr('x2', this.innerPaddedWidth);
    mergeLabels
      .attr('text-anchor', d => ((d.labelPlacementHorizontal || 'right') === 'right' ? 'start' : 'end'))
      .attr('x', d => ((d.labelPlacementHorizontal || 'right') === 'right' ? this.innerPaddedWidth : 0))
      .attr('y', 0)
      .attr('dx', d => ((d.labelPlacementHorizontal || 'right') === 'right' ? '0.1em' : '-0.1em'))
      .attr('dy', '0.3em');
    mergeLines
      .style('stroke', visaColors[this.referenceStyle.color] || this.referenceStyle.color)
      .style('stroke-width', this.referenceStyle.strokeWidth)
      .attr('stroke-dasharray', this.referenceStyle.dashed ? this.referenceStyle.dashed : '')
      .attr('opacity', this.referenceStyle.opacity);
    mergeLabels.style('fill', visaColors[this.referenceStyle.color] || this.referenceStyle.color).attr('opacity', 1);
  }
  setSelectedClass() {
    this.update.classed('highlight', (d, i, n) => {
      const first = checkInteraction(d.values[0], 1, 0, {}, this.clickHighlight, this.innerInteractionKeys);
      const second = checkInteraction(d.values[1], 1, 0, {}, this.clickHighlight, this.innerInteractionKeys);
      let selected = first || second;
      selected = this.clickHighlight && this.clickHighlight.length ? selected : false;
      const selectable = this.accessibility.elementsAreInterface;
      setElementInteractionAccessState(n[i], selected, selectable);
      return selected;
    });
  }
  drawAnnotations() {
    annotate({
      source: this.rootG.node(),
      data: this.annotations,
      xScale: this.x,
      xAccessor: this.layoutOverride !== 'horizontal' ? this.ordinalAccessor : this.valueAccessor,
      yScale: this.y,
      yAccessor: this.layoutOverride !== 'horizontal' ? this.valueAccessor : this.ordinalAccessor,
      width: this.width,
      height: this.height,
      padding: this.padding,
      margin: this.margin,
      bitmaps: this.bitmaps
    });
  }
  setAnnotationAccessibility() {
    setAccessAnnotation(this.dumbbellPlotEl, this.annotations);
  }
  // new accessibility functions added here
  setTagLevels() {
    this.topLevel = findTagLevel(this.highestHeadingLevel);
    this.bottomLevel = findTagLevel(this.highestHeadingLevel, 3);
  }
  setChartDescriptionWrapper() {
    initializeDescriptionRoot({
      rootEle: this.dumbbellPlotEl,
      title: this.accessibility.title || this.mainTitle,
      chartTag: 'dumbbell-plot',
      uniqueID: this.chartID,
      highestHeadingLevel: this.highestHeadingLevel,
      redraw: this.shouldRedrawWrapper,
      disableKeyNav: this.suppressEvents &&
        this.accessibility.elementsAreInterface === false &&
        this.accessibility.keyboardNavConfig &&
        this.accessibility.keyboardNavConfig.disabled
    });
    this.shouldRedrawWrapper = false;
  }
  setParentSVGAccessibility() {
    const keys = scopeDataKeys(this, chartAccessors, 'dumbbell-plot');
    delete keys[this.ordinalAccessor];
    setAccessibilityController({
      node: this.svg.node(),
      chartTag: 'dumbbell-plot',
      title: this.accessibility.title || this.mainTitle,
      description: this.subTitle,
      uniqueID: this.chartID,
      geomType: 'dumbbell',
      includeKeyNames: this.accessibility.includeDataKeyNames,
      dataKeys: keys,
      // groupAccessor: this.groupAccessor
      // groupName: 'node',
      groupKeys: ['message'],
      nested: 'values',
      disableKeyNav: this.suppressEvents &&
        this.accessibility.elementsAreInterface === false &&
        this.accessibility.keyboardNavConfig &&
        this.accessibility.keyboardNavConfig.disabled
      // recursive: true // bar chart does not include these
    });
  }
  setGeometryAccessibilityAttributes() {
    this.update.each((_d, i, n) => {
      initializeElementAccess(n[i]);
    });
  }
  setGeometryAriaLabels() {
    const keys = scopeDataKeys(this, chartAccessors, 'dumbbell-plot');
    delete keys[this.ordinalAccessor];
    this.update.each((_d, i, n) => {
      setElementFocusHandler({
        node: n[i],
        geomType: 'dumbbell',
        includeKeyNames: this.accessibility.includeDataKeyNames,
        dataKeys: keys,
        groupKeys: ['message'],
        nested: ['values'],
        uniqueID: this.chartID,
        disableKeyNav: this.suppressEvents &&
          this.accessibility.elementsAreInterface === false &&
          this.accessibility.keyboardNavConfig &&
          this.accessibility.keyboardNavConfig.disabled
      });
      setElementAccessID({
        node: n[i],
        uniqueID: this.chartID
      });
    });
  }
  setGroupAccessibilityAttributes() {
    // if a component's <g> elements can enter/exit, this will need to be called in the
    // lifecycle more than just initially, like how setGeometryAccessibilityAttributes works
    initializeElementAccess(this.dumbbellG.node());
  }
  setGroupAccessibilityID() {
    this.dumbbellG.each((_, i, n) => {
      setElementAccessID({
        node: n[i],
        uniqueID: this.chartID
      });
    });
  }
  setChartAccessibilityTitle() {
    setAccessTitle(this.dumbbellPlotEl, this.accessibility.title || this.mainTitle);
  }
  setChartAccessibilitySubtitle() {
    setAccessSubtitle(this.dumbbellPlotEl, this.subTitle);
  }
  setChartAccessibilityLongDescription() {
    setAccessLongDescription(this.dumbbellPlotEl, this.accessibility.longDescription);
  }
  setChartAccessibilityExecutiveSummary() {
    setAccessExecutiveSummary(this.dumbbellPlotEl, this.accessibility.executiveSummary);
  }
  setChartAccessibilityPurpose() {
    setAccessPurpose(this.dumbbellPlotEl, this.accessibility.purpose);
  }
  setChartAccessibilityContext() {
    setAccessContext(this.dumbbellPlotEl, this.accessibility.contextExplanation);
  }
  setChartAccessibilityStatisticalNotes() {
    setAccessStatistics(this.dumbbellPlotEl, this.accessibility.statisticalNotes);
  }
  setChartCountAccessibility() {
    setAccessChartCounts({
      rootEle: this.dumbbellPlotEl,
      parentGNode: this.dumbbellG.node(),
      chartTag: 'dumbbell-plot',
      geomType: 'dumbbell'
      // groupName: 'line', // bar chart doesn't use this, so it is omitted
      // recursive: true // bar chart doesn't use this, so it is omitted
    });
  }
  setChartAccessibilityStructureNotes() {
    setAccessStructure(this.dumbbellPlotEl, this.accessibility.structureNotes);
  }
  // new accessibility stuff ends here
  onChangeHandler() {
    if (this.accessibility && typeof this.accessibility.onChangeFunc === 'function') {
      const d = {
        updated: this.updated,
        added: this.enterSize,
        removed: this.exitSize
      };
      this.accessibility.onChangeFunc(d);
    }
    this.updated = false;
    this.enterSize = 0;
    this.exitSize = 0;
  }
  onClickHandler(d, n) {
    this.clickEvent.emit({ data: d, target: n });
  }
  onHoverHandler(d, n, hasTooltip) {
    overrideTitleTooltip(this.chartID, true);
    this.hoverEvent.emit({ data: d, target: n });
    if (this.showTooltip && hasTooltip) {
      this.eventsTooltip({ data: d, evt: event, isToShow: true });
    }
  }
  onMouseOutHandler() {
    overrideTitleTooltip(this.chartID, false);
    this.mouseOutEvent.emit();
    if (this.showTooltip) {
      this.eventsTooltip({ isToShow: false });
    }
  }
  // set initial style (instead of copying css class across the lib)
  setTooltipInitialStyle() {
    initTooltipStyle(this.tooltipG);
  }
  // tooltip
  eventsTooltip({ data, evt, isToShow }) {
    drawTooltip({
      root: this.tooltipG,
      data,
      event: evt,
      isToShow,
      tooltipLabel: this.tooltipLabel,
      xAxis: this.xAxis,
      yAxis: this.yAxis,
      dataLabel: this.dataLabel,
      ordinalAccessor: this.ordinalAccessor,
      valueAccessor: this.valueAccessor,
      groupAccessor: this.seriesAccessor,
      diffLabelDetails: this.diffLabelDetails,
      chartType: 'dumbbell'
    });
  }
  updateCursor() {
    this.update.attr('cursor', !this.suppressEvents ? this.cursor : null);
    this.updateDiffLabel.attr('cursor', !this.suppressEvents && this.dumbbellInteraction && this.differenceLabel.visible ? this.cursor : null);
    this.updateLabelChildren.attr('cursor', !this.suppressEvents && this.dataLabel.visible ? this.cursor : null);
  }
  drawLegendElements() {
    drawLegend({
      root: this.legendG,
      uniqueID: this.chartID,
      width: this.innerPaddedWidth,
      height: this.margin.top + 20,
      colorArr: this.colorArr,
      baseColorArr: !this.accessibility.hideStrokes ? this.rawColors : null,
      hideStrokes: this.accessibility.hideStrokes,
      margin: this.margin,
      padding: this.padding,
      duration: this.duration,
      type: 'bar',
      fontSize: 16,
      data: this.legendData,
      label: this.legend.labels || this.ordinalLabel,
      hide: !this.legend.visible,
      interactionKeys: this.innerInteractionKeys,
      groupAccessor: this.seriesAccessor,
      hoverHighlight: this.hoverHighlight,
      clickHighlight: this.clickHighlight,
      hoverStyle: this.hoverStyle,
      clickStyle: this.clickStyle,
      hoverOpacity: this.hoverOpacity
    });
  }
  bindLegendInteractivity() {
    select(this.dumbbellPlotEl)
      .selectAll('.legend')
      .on('click', this.legend.interactive && this.seriesInteraction && !this.suppressEvents
      ? (d, i, n) => this.onClickHandler(d, n[i])
      : null)
      .on('mouseover', this.legend.interactive && this.seriesInteraction && !this.suppressEvents
      ? (d, i, n) => this.onHoverHandler(d, n[i], false)
      : null)
      .on('mouseout', this.legend.interactive && this.seriesInteraction && !this.suppressEvents
      ? () => this.onMouseOutHandler()
      : null);
  }
  setLegendCursor() {
    select(this.dumbbellPlotEl)
      .selectAll('.legend')
      .style('cursor', this.legend.interactive && this.seriesInteraction && !this.suppressEvents ? this.cursor : null);
  }
  setSeriesCursor() {
    this.updateSeriesLabel.attr('cursor', !this.suppressEvents && this.seriesInteraction ? this.cursor : null);
  }
  bindSeriesInteractivity() {
    this.updateSeriesLabel
      .on('click', !this.suppressEvents && this.seriesInteraction ? (d, i, n) => this.onClickHandler(d, n[i]) : null)
      .on('mouseover', !this.suppressEvents && this.seriesInteraction ? (d, i, n) => this.onHoverHandler(d, n[i], false) : null)
      .on('mouseout', !this.suppressEvents && this.seriesInteraction ? () => this.onMouseOutHandler() : null);
  }
  bindInteractivity() {
    this.update
      .on('click', !this.suppressEvents
      ? (d, i, n) => {
        if (d.values) {
          const node = n[i];
          const mouseEvent = event;
          const index = this.findMarkerIndex(d, node, mouseEvent);
          this.onClickHandler(d.values[index], n[i]);
        }
      }
      : null)
      .on('mouseover', !this.suppressEvents
      ? (d, i, n) => {
        let data = d;
        if (d.values) {
          const node = n[i];
          const mouseEvent = event;
          const index = this.findMarkerIndex(d, node, mouseEvent);
          overrideTitleTooltip(this.chartID, true);
          data = d.values[index];
          this.hoverEvent.emit({ data: data, target: n[i] });
        }
        this.showTooltip
          ? this.eventsTooltip({
            data: this.tooltipLabel.labelAccessor && this.tooltipLabel.labelAccessor.length ? data : d,
            evt: event,
            isToShow: true
          })
          : '';
      }
      : null)
      .on('mouseout', !this.suppressEvents ? () => this.onMouseOutHandler() : null);
    this.updateLabelChildren
      .on('click', !this.suppressEvents && this.dataLabel.visible ? (d, i, n) => this.onClickHandler(d, n[i]) : null)
      .on('mouseover', !this.suppressEvents && this.dataLabel.visible ? (d, i, n) => this.onHoverHandler(d, n[i], true) : null)
      .on('mouseout', !this.suppressEvents && this.dataLabel.visible ? () => this.onMouseOutHandler() : null);
    this.updateDiffLabel
      .on('click', !this.suppressEvents && this.dumbbellInteraction && this.differenceLabel.visible
      ? (d, i, n) => this.onClickHandler(d, n[i])
      : null)
      .on('mouseover', !this.suppressEvents && this.dumbbellInteraction && this.differenceLabel.visible
      ? (d, i, n) => this.onHoverHandler(d, n[i], true)
      : null)
      .on('mouseout', !this.suppressEvents && this.dumbbellInteraction && this.differenceLabel.visible
      ? () => this.onMouseOutHandler()
      : null);
  }
  findMarkerIndex(data, node, mouseEvent) {
    const pos = this.isVertical ? this.findPosition(node, mouseEvent)[1] : this.findPosition(node, mouseEvent)[0];
    const a = this.isVertical ? 'Y' : 'X';
    const start = +select(node).attr('data-center' + a + '1');
    const end = +select(node).attr('data-center' + a + '2');
    const middle = (end - start) / 2 + start;
    const adjust = data.values[0][this.valueAccessor] >= data.values[1][this.valueAccessor] ? 0 : 1;
    return pos <= middle ? 0 + adjust : 1 - adjust;
  }
  findPosition(node, mouseEvent) {
    const svg = node.ownerSVGElement || node;
    let point = svg.createSVGPoint();
    point.x = mouseEvent.clientX;
    point.y = mouseEvent.clientY;
    point = point.matrixTransform(node.getScreenCTM().inverse());
    return [point.x, point.y];
  }
  generateId(d, i) {
    let mult = this.marker.type === 'dot'
      ? 1
      : this.marker.type === 'stroke'
        ? 2
        : (d.focus && this.focusMarker.key) || (!this.focusMarker.key && d.referenceIndex === 0)
          ? 1
          : 2;
    mult = d.focus ? this.focusMarker.sizeFromBar * mult : this.marker.sizeFromBar * mult;
    const opacity = this.marker.visible || d.focus ? 1 : 0;
    const fill = this.rawColors[d.referenceIndex][0] === '#'
      ? this.rawColors[d.referenceIndex].substring(1)
      : this.rawColors[d.referenceIndex];
    let barWidth = (i < 2 && this.clickHighlight.length
      ? this.clickStyle.strokeWidth
      : i < 4
        ? this.barStyle.width
        : this.hoverStyle.strokeWidth).toString();
    barWidth = '' + barWidth;
    barWidth = barWidth.replace(/\D/g, 'n');
    const basicId = 'marker-' + this.chartID + i + this.marker.type + mult + fill + barWidth + opacity;
    return basicId;
  }
  render() {
    this.drawStartEvent.emit({ chartID: this.chartID });
    // everything between this comment and the third should eventually
    // be moved into componentWillUpdate (if the stenicl bug is fixed)
    this.init();
    if (this.shouldSetTagLevels) {
      this.setTagLevels();
      this.shouldSetTagLevels = false;
    }
    if (this.shouldValidate) {
      this.shouldValidateAccessibilityProps();
      this.shouldValidate = false;
    }
    if (this.shouldValidateLayout) {
      this.validateLayout();
    }
    if (this.shouldValidateDataLabelPlacement) {
      this.validateDataLabelPlacement();
      this.shouldValidateDataLabelPlacement = false;
    }
    if (this.shouldValidateSeriesLabelPlacement) {
      this.validateSeriesLabelPlacement();
      this.shouldValidateSeriesLabelPlacement = false;
    }
    if (this.shouldValidateDiffLabelPlacement) {
      this.validateDiffLabelPlacement();
      this.shouldValidateDiffLabelPlacement = false;
    }
    if (this.shouldValidateDataLabelAccessor) {
      this.validateDataLabelAccessor();
      this.shouldValidateDataLabelAccessor = false;
    }
    if (this.shouldUpdateLayout) {
      this.setLayoutData();
      this.shouldUpdateLayout = false;
    }
    if (this.shouldValidateInteractionKeys) {
      this.validateInteractionKeys();
      this.shouldValidateInteractionKeys = false;
    }
    if (this.shouldUpdateData) {
      this.prepareData();
      this.shouldUpdateData = false;
    }
    if (this.shouldUpdateMarkerData) {
      this.prepareMarkerData();
      this.shouldUpdateMarkerData = false;
    }
    if (this.shouldUpdateSeriesData) {
      this.prepareSeriesData();
      this.shouldUpdateSeriesData = false;
    }
    if (this.shouldUpdateLegendData) {
      this.prepareLegendData();
      this.shouldUpdateLegendData = false;
    }
    if (this.shouldUpdateScales) {
      this.prepareScales();
      this.shouldUpdateScales = false;
    }
    if (this.shouldCheckValueAxis) {
      if (this.layout === 'horizontal') {
        this.shouldUpdateXAxis = true;
        this.shouldSetXAxisAccessibility = true;
        this.shouldUpdateXGrid = true;
      }
      else if (this.layout === 'vertical' || this.layoutOverride) {
        this.shouldUpdateYAxis = true;
        this.shouldSetYAxisAccessibility = true;
        this.shouldUpdateYGrid = true;
      }
      this.shouldCheckValueAxis = false;
    }
    if (this.shouldCheckLabelAxis) {
      if (this.layout === 'vertical' || this.layoutOverride) {
        this.shouldUpdateXAxis = true;
        this.shouldSetXAxisAccessibility = true;
        this.shouldUpdateXGrid = true;
      }
      else if (this.layout === 'horizontal') {
        this.shouldUpdateYAxis = true;
        this.shouldSetYAxisAccessibility = true;
        this.shouldUpdateYGrid = true;
      }
      this.shouldCheckLabelAxis = false;
    }
    if (this.shouldUpdateTableData) {
      this.setTableData();
      this.shouldUpdateTableData = false;
    }
    if (this.shouldSetColors) {
      this.setColors();
      this.shouldSetColors = false;
    }
    // Everything between this comment and the first should eventually
    // be moved into componentWillUpdate (if the stenicl bug is fixed)
    return (h("div", { class: "o-layout" }, h("div", { class: "o-layout--chart" }, h(this.topLevel, { class: "dumbbell-main-title vcl-main-title", "data-testid": "main-title" }, this.mainTitle), h(this.bottomLevel, { class: "visa-ui-text--instructions dumbbell-sub-title vcl-sub-title", "data-testid": "sub-title" }, this.subTitle), h("div", { class: "dumbbell-legend vcl-legend", style: { display: this.legend.visible ? 'block' : 'none' } }), h("keyboard-instructions", { uniqueID: this.chartID, geomType: 'dumbbell', chartTag: 'dumbbell-plot', width: this.width - (this.margin ? this.margin.right || 0 : 0), isInteractive: this.accessibility.elementsAreInterface, disabled: this.suppressEvents &&
        this.accessibility.elementsAreInterface === false &&
        this.accessibility.keyboardNavConfig &&
        this.accessibility.keyboardNavConfig.disabled }), h("div", { class: "visa-viz-d3-dumbbell-container" }), h("div", { class: "dumbbell-tooltip vcl-tooltip", style: { display: this.showTooltip ? 'block' : 'none' } }), h("data-table", { uniqueID: this.chartID, isCompact: true, tableColumns: this.tableColumns, data: this.tableData, padding: this.padding, margin: this.margin, hideDataTable: this.accessibility.hideDataTableButton }))));
  }
  init() {
    // reading properties
    const keys = Object.keys(DumbbellPlotDefaultValues);
    let i = 0;
    const exceptions = {
      wrapLabel: {
        exception: false
      },
      strokeWidth: {
        exception: 0
      },
      showDots: {
        exception: false
      },
      dotRadius: {
        exception: 0
      },
      hoverOpacity: {
        exception: 0
      },
      showTooltip: {
        exception: false
      },
      mainTitle: {
        exception: ''
      },
      subTitle: {
        exception: ''
      },
      showBaselineX: {
        exception: false
      }
    };
    for (i = 0; i < keys.length; i++) {
      const exception = !exceptions[keys[i]] ? false : this[keys[i]] === exceptions[keys[i]].exception;
      this[keys[i]] = this[keys[i]] || exception ? this[keys[i]] : DumbbellPlotDefaultValues[keys[i]];
    }
  }
  get dumbbellPlotEl() { return this; }
  static get watchers() { return {
    "mainTitle": ["mainTitleWatcher"],
    "subTitle": ["subTitleWatcher"],
    "height": ["dimensionWatcher"],
    "width": ["dimensionWatcher"],
    "padding": ["dimensionWatcher"],
    "margin": ["dimensionWatcher"],
    "data": ["dataWatcher"],
    "uniqueID": ["idWatcher"],
    "highestHeadingLevel": ["headingWatcher"],
    "ordinalAccessor": ["ordinalAccessorWatcher"],
    "valueAccessor": ["valueAccessorWatcher"],
    "seriesAccessor": ["seriesAccessorWatcher"],
    "sortOrder": ["sortWatcher"],
    "xAxis": ["xAxisWatcher"],
    "yAxis": ["yAxisWatcher"],
    "wrapLabel": ["wrapLabelWatcher"],
    "layout": ["layoutWatcher"],
    "showBaselineX": ["showBaselineXWatcher"],
    "showBaselineY": ["showBaselineYWatcher"],
    "colorPalette": ["paletteWatcher"],
    "colors": ["paletteWatcher"],
    "hoverStyle": ["hoverStyleWatcher"],
    "clickStyle": ["clickStyleWatcher"],
    "hoverOpacity": ["hoverOpacityWatcher"],
    "cursor": ["cursorWatcher"],
    "focusMarker": ["focusMarkerWatcher"],
    "marker": ["markerWatcher"],
    "barStyle": ["barStyleWatcher"],
    "dataLabel": ["dataLabelWatcher"],
    "seriesLabel": ["seriesLabelWatcher"],
    "differenceLabel": ["differenceLabelWatcher"],
    "showTooltip": ["showTooltipWatcher"],
    "tooltipLabel": ["tooltipLabelWatcher"],
    "accessibility": ["accessibilityWatcher"],
    "legend": ["legendWatcher"],
    "annotations": ["annotationsWatcher"],
    "maxValueOverride": ["valueOverrideWatcher"],
    "minValueOverride": ["valueOverrideWatcher"],
    "referenceStyle": ["referenceWatcher"],
    "referenceLines": ["referenceWatcher"],
    "suppressEvents": ["suppressWatcher"],
    "hoverHighlight": ["hoverWatcher"],
    "clickHighlight": ["clickWatcher"],
    "interactionKeys": ["interactionWatcher"],
    "unitTest": ["unitTestWatcher"]
  }; }
  static get style() { return dumbbellPlotCss; }
}, [0, "dumbbell-plot", {
    "mainTitle": [1025, "main-title"],
    "subTitle": [1025, "sub-title"],
    "height": [1026],
    "width": [1026],
    "margin": [1040],
    "padding": [1040],
    "highestHeadingLevel": [1032, "highest-heading-level"],
    "data": [16],
    "uniqueID": [1, "unique-i-d"],
    "ordinalAccessor": [1025, "ordinal-accessor"],
    "valueAccessor": [1025, "value-accessor"],
    "seriesAccessor": [1025, "series-accessor"],
    "sortOrder": [1025, "sort-order"],
    "xAxis": [1040],
    "yAxis": [1040],
    "wrapLabel": [1028, "wrap-label"],
    "layout": [1025],
    "showBaselineX": [1028, "show-baseline-x"],
    "showBaselineY": [1028, "show-baseline-y"],
    "colorPalette": [1025, "color-palette"],
    "colors": [1040],
    "hoverStyle": [1040],
    "hoverOpacity": [1026, "hover-opacity"],
    "animationConfig": [1040],
    "clickStyle": [1040],
    "referenceStyle": [1040],
    "cursor": [1025],
    "focusMarker": [1040],
    "marker": [1040],
    "barStyle": [1040],
    "dataLabel": [1040],
    "seriesLabel": [1040],
    "differenceLabel": [1040],
    "showTooltip": [1028, "show-tooltip"],
    "tooltipLabel": [1040],
    "accessibility": [1040],
    "legend": [1040],
    "annotations": [1040],
    "maxValueOverride": [1026, "max-value-override"],
    "minValueOverride": [1026, "min-value-override"],
    "referenceLines": [1040],
    "suppressEvents": [1028, "suppress-events"],
    "hoverHighlight": [1040],
    "clickHighlight": [1040],
    "interactionKeys": [1040],
    "unitTest": [4, "unit-test"]
  }]);
// incorporate OSS licenses into build
window['VisaChartsLibOSSLicenses'] = getLicenses(); // tslint:disable-line no-string-literal
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["dumbbell-plot", "data-table", "keyboard-instructions"];
  components.forEach(tagName => { switch (tagName) {
    case "dumbbell-plot":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DumbbellPlot$1);
      }
      break;
    case "data-table":
      if (!customElements.get(tagName)) {
        defineCustomElement$3();
      }
      break;
    case "keyboard-instructions":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
  } });
}

const DumbbellPlot = DumbbellPlot$1;
const defineCustomElement = defineCustomElement$1;

export { DumbbellPlot, defineCustomElement };
